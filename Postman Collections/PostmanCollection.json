{
	"info": {
		"_postman_id": "71c10254-c833-43d3-b37a-65bf87a7d7b7",
		"name": "Team5_APICollectors",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Batch",
			"item": [
				{
					"name": "Create New Program for Batch",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ffff8eda-f225-42b9-8b81-1012abbf264d",
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 201\", ()=>{\r",
									"pm.response.to.have.status(201);\r",
									"})\r",
									"\r",
									"pm.test(\"Check Status Text\", ()=>{\r",
									"    pm.response.to.have.status('Created');\r",
									"})\r",
									"\r",
									"//Validate Header\r",
									"pm.test(\"Content-Type header is present\", ()=>{\r",
									"pm.response.to.have.header(\"Content-Type\");\r",
									"})\r",
									"\r",
									"//Created variable to strore response\r",
									"const response = pm.response.json();\r",
									"\r",
									"console.log(response)\r",
									"\r",
									"//Setting enviornment variable \r",
									"pm.environment.set(\"programId\", response.programId);\r",
									"pm.environment.set(\"programName\", response.programName);\r",
									"\r",
									"\r",
									"//Validating Fields\r",
									"pm.test(\"Test data of the response\", ()=>{\r",
									"pm.expect(response).to.be.an(\"object\");\r",
									"pm.expect(response.programId).to.be.eql(pm.variables.get(\"programId\"));\r",
									"pm.expect(response.programName).to.eql(pm.variables.get(\"programName\"));\r",
									"pm.expect(response.programStatus).to.eql(pm.variables.get(\"programStatus\"));\r",
									"});\r",
									"\r",
									"//Validating response\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"programId\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"creationTime\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"lastModTime\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"programId\",\r",
									"    \"programName\",\r",
									"    \"programDescription\",\r",
									"    \"programStatus\",\r",
									"    \"creationTime\",\r",
									"    \"lastModTime\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Schema is valid\", ()=>{\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "15449f76-4869-4a02-811e-c007e44ed381",
								"exec": [
									"var CrprogramName = \"Jun23-APICollectors-SDET\" + pm.variables.replaceIn('{{$randomInt}}');\r",
									"pm.environment.set(\"programNamebatch\",CrprogramName);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "f70e9d8d-d58d-42fa-b924-18301b5a4b2e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\":\"{{programDescriptionbatch}}\",\r\n  \"programName\":  \"{{programNamebatch}}\",\r\n  \"programStatus\": \"{{programStatusbatch}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "Create New Batch",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bc8f931c-ed1e-4f74-8682-436f63e739a9",
								"exec": [
									"//validate status code\r",
									"pm.test(\"Status code is 201\", ()=> {\r",
									"pm.response.to.have.status(201);\r",
									"})\r",
									"\r",
									"pm.test(\"Check Status Text\", ()=>{\r",
									"    pm.response.to.have.status('Created');\r",
									"})\r",
									"\r",
									"//Validate Header\r",
									"pm.test(\"Content-Type header is present\", ()=>{\r",
									"pm.response.to.have.header(\"Content-Type\");\r",
									"})\r",
									"\r",
									"//create variable for response body\r",
									"const response = pm.response.json();\r",
									"\r",
									"console.log(response)\r",
									"\r",
									"//Create enviornment variables\r",
									"pm.environment.set(\"batchId\", response.batchId);\r",
									"pm.environment.set(\"batchName\", response.batchName);\r",
									"\r",
									"//Validating Fields\r",
									"pm.test(\"Test data of the response\", ()=>{\r",
									"pm.expect(response.programId).to.be.eql(pm.variables.get(\"programId\"));\r",
									"pm.expect(response.programName).to.be.eql(pm.variables.get(\"programName\"));\r",
									"pm.expect(response.batchStatus).to.be.eql(pm.variables.get(\"batchStatus\"));\r",
									"pm.expect(response.batchName).to.be.eql(pm.variables.get(\"batchName\"));\r",
									"pm.expect(response.batchDescription).to.be.eql(pm.variables.get(\"batchDescription\"));\r",
									"pm.expect(response.batchId).to.be.eql(pm.variables.get(\"batchId\"));\r",
									"});\r",
									"\r",
									"console.log;\r",
									"\r",
									"//Validating response\r",
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-06/schema#\",\r",
									"    \"$ref\": \"#/definitions/Welcome10\",\r",
									"    \"definitions\": {\r",
									"        \"Welcome10\": {\r",
									"            \"type\": \"object\",\r",
									"            \"additionalProperties\": false,\r",
									"            \"properties\": {\r",
									"                \"batchId\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"batchName\": {\r",
									"                    \"type\": \"string\",\r",
									"                    \"format\": \"integer\"\r",
									"                },\r",
									"                \"batchDescription\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"batchStatus\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"batchNoOfClasses\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"programId\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"programName\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"batchDescription\",\r",
									"                \"batchId\",\r",
									"                \"batchName\",\r",
									"                \"batchNoOfClasses\",\r",
									"                \"batchStatus\",\r",
									"                \"programId\",\r",
									"                \"programName\"\r",
									"            ],\r",
									"            \"title\": \"Welcome10\"\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.test(\"Schema is valid\", ()=>{\r",
									"pm.expect(tv4.validate(response,schema)).to.be.true\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c52e305e-075d-4df5-b3b2-50e4ff4f0cca",
								"exec": [
									"var CrbatchName = pm.variables.get(\"programName\")+\"-SDET-\" + pm.variables.replaceIn('{{$randomInt}}');\r",
									"pm.environment.set(\"batchName\",CrbatchName);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "2afc6240-e460-4737-a4dd-1515c75aae48",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\":{{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": \"{{programId}}\"\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Get All Batches",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dc21a871-6fab-451a-b89b-e664d12b7eb7",
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 200\", ()=>{\r",
									"pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"\r",
									"//Validate Header\r",
									"pm.test(\"Content-Type header is present\", ()=>{\r",
									"pm.response.to.have.header(\"Content-Type\");\r",
									"})\r",
									"\r",
									"\r",
									"//Validating response\r",
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-06/schema#\",\r",
									"    \"$ref\": \"#/definitions/Welcome10\",\r",
									"    \"definitions\": {\r",
									"        \"Welcome10\": {\r",
									"            \"type\": \"object\",\r",
									"            \"additionalProperties\": false,\r",
									"            \"properties\": {\r",
									"                \"batchId\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"batchName\": {\r",
									"                    \"type\": \"string\",\r",
									"                    \"format\": \"integer\"\r",
									"                },\r",
									"                \"batchDescription\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"batchStatus\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"batchNoOfClasses\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"programId\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"programName\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"batchDescription\",\r",
									"                \"batchId\",\r",
									"                \"batchName\",\r",
									"                \"batchNoOfClasses\",\r",
									"                \"batchStatus\",\r",
									"                \"programId\",\r",
									"                \"programName\"\r",
									"            ],\r",
									"            \"title\": \"Welcome10\"\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Schema is valid\", ()=>{\r",
									"pm.expect(tv4.validate(pm.response,schema))\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "d536f21c-045c-47a6-83bf-8f18063105f9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Create Duplicate Batch",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bc8f931c-ed1e-4f74-8682-436f63e739a9",
								"exec": [
									"//validate status code\r",
									"pm.test(\"Status code is 400\", ()=> {\r",
									"pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Program \" + pm.environment.get(\"programName\") + \" with Batch-\" + pm.environment.get(\"batchName\") + \" already exists: ; Please give a different batch Name or Choose a different Program\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "843fd8f1-e3f2-4bf1-bd35-bd39db80ce1e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\":{{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": \"{{programId}}\"\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Batch without BatchName",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bc8f931c-ed1e-4f74-8682-436f63e739a9",
								"exec": [
									"//validate status code\r",
									"pm.test(\"Status code is 400\", ()=> {\r",
									"pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Body matches string\", () => {\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Batch Name is mandatory\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "4d86d2ab-be8d-43bb-af0c-b4237d757b11",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchNoOfClasses\":{{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": \"{{programId}}\"\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Batch with integer BatchName",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bc8f931c-ed1e-4f74-8682-436f63e739a9",
								"exec": [
									"//validate status code\r",
									"pm.test(\"Status code is 201\", ()=> {\r",
									"pm.response.to.have.status(201);\r",
									"})\r",
									"\r",
									"//create variable for response body\r",
									"const response = pm.response.json();\r",
									"\r",
									"//Create enviornment variables\r",
									"pm.environment.set(\"batchId1\", response.batchId);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ab83dde0-6069-4e32-b44b-d3510719f9ff",
								"exec": [
									"var NumbatchName = pm.variables.replaceIn('{{$randomInt}}');\r",
									"pm.environment.set(\"IntbatchName\",NumbatchName);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "07b451f5-3224-4953-8af3-8dd644136df9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchName\":{{IntbatchName}} ,\r\n  \"batchNoOfClasses\":{{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": \"{{programId}}\"\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Delete integer Batch name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4cb75479-8e4b-4a15-9a17-b3b5851d1208",
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 200\", ()=>{\r",
									"pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.text()).to.include(\" deleted Successfully\");\r",
									"});\r",
									"\r",
									"pm.environment.unset(\"batchId1\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "2fb46813-084c-40cd-874a-f661a01575c0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURL}}/batches/{{batchId1}}"
					},
					"response": []
				},
				{
					"name": "Batch without ProgramId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bc8f931c-ed1e-4f74-8682-436f63e739a9",
								"exec": [
									"//validate status code\r",
									"pm.test(\"Status code is 400\", ()=> {\r",
									"pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.json().message).to.eql(\" ProgramId field is needed; It should be a positive number \");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "0e26e68a-8fa7-4bd7-9c60-fd09048ece25",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\":{{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\"\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Batch negative ProgramId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bc8f931c-ed1e-4f74-8682-436f63e739a9",
								"exec": [
									"//validate status code\r",
									"pm.test(\"Status code is 404\", ()=> {\r",
									"pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Program not found with Id : \" + pm.variables.get(\"NegprogramId\") + \" \");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "465da949-4ddb-40ce-a015-925410a8e191",
								"exec": [
									"pm.variables.set(\"NegprogramId\", -3);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5848ee4f-f5a3-4e40-bd5e-ca7c25938fe0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\":{{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": {{NegprogramId}}\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Batch without Batch Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bc8f931c-ed1e-4f74-8682-436f63e739a9",
								"exec": [
									"//validate status code\r",
									"pm.test(\"Status code is 400\", ()=> {\r",
									"pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Batch status is needed\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "11880d81-0e8d-4874-be2a-dcf5429eb01c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\":{{batchNoOfClasses}},\r\n  \"programId\": \"{{programId}}\"\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Batch with integer Batch Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bc8f931c-ed1e-4f74-8682-436f63e739a9",
								"exec": [
									"//validate status code\r",
									"pm.test(\"Status code is 201\", ()=> {\r",
									"pm.response.to.have.status(201);\r",
									"})\r",
									"\r",
									"//create variable for response body\r",
									"const response = pm.response.json();\r",
									"\r",
									"//Create enviornment variables\r",
									"pm.environment.set(\"batchId1\", response.batchId);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "04d838e2-f428-41d7-8001-c46ef8b81672",
								"exec": [
									"var NbatchName = pm.variables.get(\"programName\")+\"-SDET-\" + pm.variables.replaceIn('{{$randomInt}}');\r",
									"pm.environment.set(\"NewbatchName\",NbatchName);\r",
									"\r",
									"var NbatchStatus = pm.variables.replaceIn('{{$randomInt}}');\r",
									"pm.environment.set(\"NewbatchStatus\",NbatchStatus);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "0f9855da-2a36-4718-81fa-a614c5cd93af",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchName\": \"{{NewbatchName}}\",\r\n  \"batchNoOfClasses\":{{batchNoOfClasses}},\r\n  \"batchStatus\": {{NewbatchStatus}},\r\n  \"programId\": \"{{programId}}\"\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Delete integer Batch status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4cb75479-8e4b-4a15-9a17-b3b5851d1208",
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 200\", ()=>{\r",
									"pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.text()).to.include(\" deleted Successfully\");\r",
									"});\r",
									"\r",
									"pm.environment.unset(\"batchId1\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b41d2d0a-8528-4228-b983-2a055c24f980",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURL}}/batches/{{batchId1}}"
					},
					"response": []
				},
				{
					"name": "Batch without NoOfClasses",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bc8f931c-ed1e-4f74-8682-436f63e739a9",
								"exec": [
									"//validate status code\r",
									"pm.test(\"Status code is 400\", ()=> {\r",
									"pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.json().message).to.eql(\" No of Classes is needed; It should be a positive number \");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "56f7e2b1-2bfe-44ab-8d19-4247cdfcd1d7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": \"{{programId}}\"\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Batch with String NoOfClasses",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bc8f931c-ed1e-4f74-8682-436f63e739a9",
								"exec": [
									"//validate status code\r",
									"pm.test(\"Status code is 400\", ()=> {\r",
									"pm.response.to.have.status(400);\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b6e55aa6-ca05-48c6-aa8a-f1670c041059",
								"exec": [
									"pm.variables.set(\"StringNoOfClasses\", \"three\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "85ea863f-c616-4437-a469-7d8af7811061",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\":\"{{StringNoOfClasses}}\",\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": \"{{programId}}\"\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Batch negative NoOfClasses",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bc8f931c-ed1e-4f74-8682-436f63e739a9",
								"exec": [
									"//validate status code\r",
									"pm.test(\"Status code is 400\", ()=> {\r",
									"pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.json().message).to.eql(\" No of Classes is needed; It should be a positive number \");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3f63e5a6-ed55-4e80-85aa-3e8511087c85",
								"exec": [
									"pm.variables.set(\"NegNoOfClasses\", -3);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "38283ec1-d97e-4655-b364-e08124d77d72",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\":{{NegNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": \"{{programId}}\"\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Get Batche by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dc21a871-6fab-451a-b89b-e664d12b7eb7",
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 200\", ()=>{\r",
									"pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"//Created variable to strore response\r",
									"const response = pm.response.json();\r",
									"\r",
									"//Validating Fields\r",
									"pm.test(\"Test data type of the response\", ()=>{\r",
									"pm.expect(response).to.be.an(\"object\");\r",
									"pm.expect(response.batchId).to.be.an(\"number\");\r",
									"pm.expect(response.batchName).to.be.an(\"string\");\r",
									"pm.expect(response.batchDescription).to.be.an(\"string\");\r",
									"pm.expect(response.batchNoOfClasses).to.be.an(\"number\");\r",
									"pm.expect(response.batchStatus).to.be.an(\"string\");\r",
									"pm.expect(response.programId).to.be.an(\"number\");\r",
									"pm.expect(response.programName).to.be.an(\"string\");\r",
									"});\r",
									"\r",
									"//Validating response\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchId\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"batchName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchNoOfClasses\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"programId\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"batchId\",\r",
									"    \"batchName\",\r",
									"    \"batchDescription\",\r",
									"    \"batchStatus\",\r",
									"    \"batchNoOfClasses\",\r",
									"    \"programId\",\r",
									"    \"programName\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Schema is valid\", ()=>{\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "4db7174e-1d35-4dee-9a84-ec15bbac6a50",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/batches/batchId/{{batchId}}"
					},
					"response": []
				},
				{
					"name": "Get Batche by Invalid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dc21a871-6fab-451a-b89b-e664d12b7eb7",
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 404\", ()=>{\r",
									"pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Batch not found with Id : \" +pm.variables.get(\"InvalidBatchId\") +\" \");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "47741157-7fd0-4cc1-8d4a-50b22134c063",
								"exec": [
									"pm.variables.set(\"InvalidBatchId\", 0);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "6a3e1bd2-c0e5-466f-bb4e-1ef32f14304b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/batches/batchId/:batchId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"batches",
								"batchId",
								":batchId"
							],
							"variable": [
								{
									"key": "batchId",
									"value": "{{InvalidBatchId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Batche by name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dc21a871-6fab-451a-b89b-e664d12b7eb7",
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 200\", ()=>{\r",
									"pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"//Validating response\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"batchId\": {\r",
									"        \"type\": \"number\"\r",
									"      },\r",
									"      \"batchName\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"batchDescription\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"batchStatus\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"batchNoOfClasses\": {\r",
									"        \"type\": \"number\"\r",
									"      },\r",
									"      \"programId\": {\r",
									"        \"type\": \"number\"\r",
									"      },\r",
									"      \"programName\": {\r",
									"        \"type\": \"string\"\r",
									"      }\r",
									"    },\r",
									"    \"required\": [\r",
									"      \"batchId\",\r",
									"      \"batchName\",\r",
									"      \"batchDescription\",\r",
									"      \"batchStatus\",\r",
									"      \"batchNoOfClasses\",\r",
									"      \"programId\",\r",
									"      \"programName\"\r",
									"    ]\r",
									"  }\r",
									"}\r",
									"\r",
									"pm.test(\"Schema is valid\", ()=>{\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "c393951a-cf59-451b-9f90-ae0446508813",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/batches/batchName/{{batchName}}"
					},
					"response": []
				},
				{
					"name": "Get Batche by Invalid name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dc21a871-6fab-451a-b89b-e664d12b7eb7",
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 404\", ()=>{\r",
									"pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.json().message).to.eql(\"programBatch with id \" +pm.variables.get(\"InvalidBatchName\") +\" not found\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b93a4272-5f8b-4526-89f5-c4367230e5af",
								"exec": [
									"pm.variables.set(\"InvalidBatchName\", \"RRR\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "4b3b0374-e19a-45a2-9ea0-d9c6bae502f3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/batches/batchName/:batchName",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"batches",
								"batchName",
								":batchName"
							],
							"variable": [
								{
									"key": "batchName",
									"value": "{{InvalidBatchName}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Batche by ProgramId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dc21a871-6fab-451a-b89b-e664d12b7eb7",
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 200\", ()=>{\r",
									"pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"\r",
									"//Validating response\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"batchId\": {\r",
									"        \"type\": \"number\"\r",
									"      },\r",
									"      \"batchName\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"batchDescription\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"batchStatus\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"batchNoOfClasses\": {\r",
									"        \"type\": \"number\"\r",
									"      },\r",
									"      \"programId\": {\r",
									"        \"type\": \"number\"\r",
									"      },\r",
									"      \"programName\": {\r",
									"        \"type\": \"string\"\r",
									"      }\r",
									"    },\r",
									"    \"required\": [\r",
									"      \"batchId\",\r",
									"      \"batchName\",\r",
									"      \"batchDescription\",\r",
									"      \"batchStatus\",\r",
									"      \"batchNoOfClasses\",\r",
									"      \"programId\",\r",
									"      \"programName\"\r",
									"    ]\r",
									"  }\r",
									"}\r",
									"\r",
									"pm.test(\"Schema is valid\", ()=>{\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ee89893f-0ae8-471c-b221-59075ba9bfe0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/batches/program/{{programId}}"
					},
					"response": []
				},
				{
					"name": "Get Batche by Invalid ProgramId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dc21a871-6fab-451a-b89b-e664d12b7eb7",
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 404\", ()=>{\r",
									"pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.json().message).to.eql(\"batch with programId \" +pm.variables.get(\"InvalidProgramId\") +\" not found\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "dec35b77-fb3a-47de-b1a5-e7f75e2d9c5a",
								"exec": [
									"pm.variables.set(\"InvalidProgramId\", 0);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "12852019-7574-494d-ab29-7fe7b6ca38b2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/batches/program/:programId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"batches",
								"program",
								":programId"
							],
							"variable": [
								{
									"key": "programId",
									"value": "{{InvalidProgramId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Batch",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e59380c9-206e-4f75-bd76-45b77dae9abf",
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 200\", ()=>{\r",
									"pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"console.log(response)\r",
									"\r",
									"//Validating Fields\r",
									"pm.test(\"Test data of the response\", ()=>{\r",
									"pm.expect(response.programId).to.be.eql(pm.variables.get(\"programId\"));\r",
									"pm.expect(response.programName).to.be.eql(pm.variables.get(\"programName\"));\r",
									"pm.expect(response.batchStatus).to.be.eql(pm.variables.get(\"UpdtbatchStatus\"));\r",
									"pm.expect(response.batchName).to.be.eql(pm.variables.get(\"UpdtbatchName\"));\r",
									"pm.expect(response.batchDescription).to.be.eql(pm.variables.get(\"UpdtbatchDescription\"));\r",
									"pm.expect(response.batchId).to.be.eql(pm.variables.get(\"batchId\"));\r",
									"});\r",
									"\r",
									"//Validating response\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchId\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"batchName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchNoOfClasses\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"programId\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"batchId\",\r",
									"    \"batchName\",\r",
									"    \"batchDescription\",\r",
									"    \"batchStatus\",\r",
									"    \"batchNoOfClasses\",\r",
									"    \"programId\",\r",
									"    \"programName\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Schema is valid\", ()=>{\r",
									"pm.expect(tv4.validate(response,schema)).to.be.true\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3211508e-c24e-4ba7-af2e-0329633f7efd",
								"exec": [
									"var UpbatchName = pm.variables.get(\"programName\")+\"-SDET-\" + pm.variables.replaceIn('{{$randomInt}}');\r",
									"pm.environment.set(\"UpdtbatchName\",UpbatchName);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "cf8159cb-48bf-43b1-8863-7164d7a3ea39",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{UpdtbatchDescription}}\",\r\n  \"batchId\": {{batchId}},\r\n  \"batchName\": \"{{UpdtbatchName}}\",\r\n  \"batchNoOfClasses\": {{UpdtbatchNoOfClasses}},\r\n  \"batchStatus\": \"{{UpdtbatchStatus}}\",\r\n  \"programId\": {{programId}},\r\n  \"programName\": \"{{programName}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches/{{batchId}}"
					},
					"response": []
				},
				{
					"name": "Update Batch without programID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e59380c9-206e-4f75-bd76-45b77dae9abf",
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 400\", ()=>{\r",
									"pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.json().message).to.eql(\" ProgramId field is needed; It should be a positive number \");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3211508e-c24e-4ba7-af2e-0329633f7efd",
								"exec": [
									"// var UpbatchName = pm.variables.get(\"programName\")+\"-SDET-\" + pm.variables.replaceIn('{{$randomInt}}');\r",
									"// pm.environment.set(\"UpdtbatchName\",UpbatchName);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "28e87bb7-c550-42dd-a3af-25b05239edc4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{UpdtbatchDescription}}\",\r\n  \"batchId\": {{batchId}},\r\n  \"batchName\": \"{{UpdtbatchName}}\",\r\n  \"batchNoOfClasses\": {{UpdtbatchNoOfClasses}},\r\n  \"batchStatus\": \"{{UpdtbatchStatus}}\",\r\n  \"programName\": \"{{programName}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches/{{batchId}}"
					},
					"response": []
				},
				{
					"name": "Update Batch without batchStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e59380c9-206e-4f75-bd76-45b77dae9abf",
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 400\", ()=>{\r",
									"pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Batch status is needed\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3211508e-c24e-4ba7-af2e-0329633f7efd",
								"exec": [
									"// var UpbatchName = pm.variables.get(\"programName\")+\"-SDET-\" + pm.variables.replaceIn('{{$randomInt}}');\r",
									"// pm.environment.set(\"UpdtbatchName\",UpbatchName);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "e6721184-908c-4ade-8ba1-99fc51641c54",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{UpdtbatchDescription}}\",\r\n  \"batchId\": {{batchId}},\r\n  \"batchName\": \"{{UpdtbatchName}}\",\r\n  \"batchNoOfClasses\": {{UpdtbatchNoOfClasses}},\r\n  \"programId\": {{programId}},\r\n  \"programName\": \"{{programName}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches/{{batchId}}"
					},
					"response": []
				},
				{
					"name": "Update Batch without NoOfClass",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e59380c9-206e-4f75-bd76-45b77dae9abf",
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 400\", ()=>{\r",
									"pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.json().message).to.eql(\" No of Classes is needed; It should be a positive number \");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3211508e-c24e-4ba7-af2e-0329633f7efd",
								"exec": [
									"// var UpbatchName = pm.variables.get(\"programName\")+\"-SDET-\" + pm.variables.replaceIn('{{$randomInt}}');\r",
									"// pm.environment.set(\"UpdtbatchName\",UpbatchName);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "c27fe5ef-0759-4568-8ff9-9ba53aa962c9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{UpdtbatchDescription}}\",\r\n  \"batchId\": {{batchId}},\r\n  \"batchName\": \"{{UpdtbatchName}}\",\r\n  \"batchStatus\": \"{{UpdtbatchStatus}}\",\r\n  \"programId\": {{programId}},\r\n  \"programName\": \"{{programName}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches/{{batchId}}"
					},
					"response": []
				},
				{
					"name": "Update Batch without BatchName",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e59380c9-206e-4f75-bd76-45b77dae9abf",
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 400\", ()=>{\r",
									"pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Batch Name is mandatory\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3211508e-c24e-4ba7-af2e-0329633f7efd",
								"exec": [
									"// var UpbatchName = pm.variables.get(\"programName\")+\"-SDET-\" + pm.variables.replaceIn('{{$randomInt}}');\r",
									"// pm.environment.set(\"UpdtbatchName\",UpbatchName);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "aa094401-9e00-48a5-8eaf-6c298bc98049",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{UpdtbatchDescription}}\",\r\n  \"batchId\": {{batchId}},\r\n  \"batchStatus\": \"{{UpdtbatchStatus}}\",\r\n  \"batchNoOfClasses\": {{UpdtbatchNoOfClasses}},\r\n  \"programId\": {{programId}},\r\n  \"programName\": \"{{programName}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches/{{batchId}}"
					},
					"response": []
				},
				{
					"name": "Delete Batch by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4cb75479-8e4b-4a15-9a17-b3b5851d1208",
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 200\", ()=>{\r",
									"pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.text()).to.include(\"deleted Successfully\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "52d19a48-0aeb-4c4d-bdce-8e26bfda930c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURL}}/batches/{{batchId}}"
					},
					"response": []
				},
				{
					"name": "Delete Batch by same ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4cb75479-8e4b-4a15-9a17-b3b5851d1208",
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 404\", ()=>{\r",
									"pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Batch not found with Id : \" +pm.environment.get(\"batchId\") +\" \");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "d49ba001-071e-4a11-8178-bfc17c87b417",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURL}}/batches/{{batchId}}"
					},
					"response": []
				},
				{
					"name": "Delete Program",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dc06843b-fb09-4658-b927-7164423ee81c",
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 200\", ()=>{\r",
									"pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Messageg\", () => {\r",
									"    pm.expect(pm.response.text()).to.contains(\"deleted Successfully\");\r",
									"});\r",
									"\r",
									"//Delete created variable\r",
									"pm.environment.unset(\"programId\");\r",
									"pm.environment.unset(\"programName\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "69167f02-3659-4393-863a-329fbe3b90d5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURL}}/deletebyprogid/{{programId}}"
					},
					"response": []
				},
				{
					"name": "Get deleted batch Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dc21a871-6fab-451a-b89b-e664d12b7eb7",
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 404\", ()=>{\r",
									"pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Batch not found with Id : \" +pm.environment.get(\"batchId\") +\" \");\r",
									"});\r",
									"\r",
									"\r",
									"//Delete created variable\r",
									"pm.environment.unset(\"batchId\");\r",
									"pm.environment.unset(\"batchName\");\r",
									"pm.environment.unset(\"UpdtbatchName\");\r",
									"pm.environment.unset(\"NewbatchName\");\r",
									"pm.environment.unset(\"NewbatchStatus\");\r",
									"pm.environment.unset(\"IntbatchName\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5c65634a-e08e-434a-b9a5-db325c88b5f0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/batches/batchId/{{batchId}}"
					},
					"response": []
				}
			],
			"id": "592c3aa9-576b-4c8d-8572-ac357adb6214",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c8c67d46-d07e-4fa9-bb39-0611f9850e58",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "641e155e-b6f5-487a-8223-7f885e13e497",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Program",
			"item": [
				{
					"name": "Create Program",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 201\", ()=>{\r",
									"pm.response.to.have.status(201);\r",
									"})\r",
									"\r",
									"pm.test(\"Check Status Text\", ()=>{\r",
									"    pm.response.to.have.status('Created');\r",
									"})\r",
									"\r",
									"//Validate Header\r",
									"pm.test(\"Content-Type header is present\", ()=>{\r",
									"pm.response.to.have.header(\"Content-Type\");\r",
									"})\r",
									"\r",
									"//Created variable to strore response\r",
									"const response = pm.response.json();\r",
									"\r",
									"console.log(response)\r",
									"\r",
									"//Setting enviornment variable \r",
									"pm.environment.set(\"programId\", response.programId);\r",
									"pm.environment.set(\"programName\", response.programName);\r",
									"\r",
									"\r",
									"//Validating Fields\r",
									"pm.test(\"Test data of the response\", ()=>{\r",
									"pm.expect(response).to.be.an(\"object\");\r",
									"pm.expect(response.programId).to.be.eql(pm.variables.get(\"programId\"));\r",
									"pm.expect(response.programName).to.eql(pm.variables.get(\"programName\"));\r",
									"pm.expect(response.programStatus).to.eql(pm.variables.get(\"programStatus\"));\r",
									"});\r",
									"\r",
									"//Validating response\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"programId\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"creationTime\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"lastModTime\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"programId\",\r",
									"    \"programName\",\r",
									"    \"programDescription\",\r",
									"    \"programStatus\",\r",
									"    \"creationTime\",\r",
									"    \"lastModTime\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Schema is valid\", ()=>{\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "2005a1b8-b929-4a92-9452-7601ce44e47e"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var CrprogramName = \"Jun23-APICollectors-SDET-\" + pm.variables.replaceIn('{{$randomInt}}');\r",
									"pm.environment.set(\"programName\",CrprogramName);"
								],
								"type": "text/javascript",
								"id": "90b80e51-ef4e-44fe-8bde-9ff69aff74d3"
							}
						}
					],
					"id": "8daf4c11-c133-4849-8fed-7d171b40b036",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\": \"{{programDescription}}\",\r\n  \"programName\": \"{{programName}}\",\r\n  \"programStatus\": \"{{programStatus}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "Get All Programs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7cf45e83-e3a2-43ec-8d92-322526d91874",
								"exec": [
									"pm.test(\"Status code is 200\",  () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Validate Header\r",
									"pm.test(\"Content-Type header is present\", ()=>{\r",
									"pm.response.to.have.header(\"Content-Type\");\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "56216053-f5b1-4422-addc-80d73ace4864",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/allPrograms"
					},
					"response": []
				},
				{
					"name": "Get Program By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\",  () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Validating response\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"programId\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"creationTime\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"lastModTime\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"programId\",\r",
									"    \"programName\",\r",
									"    \"programDescription\",\r",
									"    \"programStatus\",\r",
									"    \"creationTime\",\r",
									"    \"lastModTime\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Schema is valid\", ()=>{\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "82246fb7-7cf2-4ee7-8fb4-5287811160a5"
							}
						}
					],
					"id": "fec33576-fb31-4829-95f9-9063cf4e1766",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/programs/{{programId}}"
					},
					"response": []
				},
				{
					"name": "Create Program 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 201\", ()=>{\r",
									"pm.response.to.have.status(201);\r",
									"})\r",
									"\r",
									"pm.test(\"Check Status Text\", ()=>{\r",
									"    pm.response.to.have.status('Created');\r",
									"})\r",
									"\r",
									"//Validate Header\r",
									"pm.test(\"Content-Type header is present\", ()=>{\r",
									"pm.response.to.have.header(\"Content-Type\");\r",
									"})\r",
									"\r",
									"//Created variable to strore response\r",
									"const response = pm.response.json();\r",
									"\r",
									"console.log(response)\r",
									"\r",
									"//Setting enviornment variable \r",
									"pm.environment.set(\"programId2\", response.programId);\r",
									"pm.environment.set(\"programName2\", response.programName);\r",
									"\r",
									"\r",
									"//Validating Fields\r",
									"pm.test(\"Test data of the response\", ()=>{\r",
									"pm.expect(response).to.be.an(\"object\");\r",
									"pm.expect(response.programId).to.be.eql(pm.variables.get(\"programId2\"));\r",
									"pm.expect(response.programName).to.eql(pm.variables.get(\"programName2\"));\r",
									"pm.expect(response.programStatus).to.eql(pm.variables.get(\"programStatus2\"));\r",
									"});\r",
									"\r",
									"//Validating response\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"programId\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"creationTime\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"lastModTime\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"programId\",\r",
									"    \"programName\",\r",
									"    \"programDescription\",\r",
									"    \"programStatus\",\r",
									"    \"creationTime\",\r",
									"    \"lastModTime\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Schema is valid\", ()=>{\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "27d38f6a-d230-4509-af43-9e3d00a89a83"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var CrprogramName = \"Jun23-APICollectors-SDET-\" + pm.variables.replaceIn('{{$randomInt}}');\r",
									"pm.environment.set(\"programName2\",CrprogramName);"
								],
								"type": "text/javascript",
								"id": "e903cd30-bed0-4606-88f2-83dcddc10c0d"
							}
						}
					],
					"id": "76f888f2-6727-40df-bfb1-44ea1e6cb2df",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\": \"{{programDescription2}}\",\r\n  \"programName\": \"{{programName2}}\",\r\n  \"programStatus\": \"{{programStatus2}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "Create Duplicate Program",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 400\", ()=>{\r",
									"pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.json().message).to.eql(\"cannot create program , since already exists\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "f0700eab-742d-4d0d-899d-6184cb368f42"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "437f17b2-cbdd-44fc-8a3a-4c69c011bf94"
							}
						}
					],
					"id": "2aaa18ca-2a59-4882-bf74-a4bfcd955da0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\": \"{{programDescription2}}\",\r\n  \"programName\": \"{{programName2}}\",\r\n  \"programStatus\": \"{{programStatus2}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "Create Program without Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 500\", ()=>{\r",
									"pm.response.to.have.status(500);\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"id": "31eab455-07ea-40a3-8d85-d57367a5b932"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var tsprogramName = \"Jun23-APICollectors-SDET-\" + pm.variables.replaceIn('{{$randomInt}}');\r",
									"pm.environment.set(\"TestprogramName\",tsprogramName);"
								],
								"type": "text/javascript",
								"id": "809640bf-aada-4e3d-a78d-ca6917df805d"
							}
						}
					],
					"id": "5dbf3f68-7811-4c71-91ba-8dd4ec648716",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\": \"{{programDescription2}}\",\r\n  \"programName\": \"{{TestprogramName}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "Create Program without programName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 500\", ()=>{\r",
									"pm.response.to.have.status(500);\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"id": "94911d7d-f3a3-4f39-97e7-fac2142aa882"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "6d011000-bf21-40a2-99da-facc8c3a82bf"
							}
						}
					],
					"id": "13b7a049-042f-411e-a346-3ceeef5834c5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\": \"{{programDescription2}}\",\r\n   \"programStatus\": \"{{programStatus2}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "Update Program without Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\",  () => {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "0abea23a-2770-4267-986b-339a8114cd8b"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var upprogramName2 = \"Jun23-APICollectors-SDET-\" + pm.variables.replaceIn('{{$randomInt}}');\r",
									"pm.environment.set(\"UpdtprogramName2\",upprogramName2);"
								],
								"type": "text/javascript",
								"id": "12b738c4-e3ab-453b-b6f3-a8e41e1e0bc8"
							}
						}
					],
					"id": "313abc5c-7731-41b4-9817-8eee687ab76e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\": \"{{UpdtprogramDescription2}}\",\r\n  \"programId\": {{programId2}},\r\n  \"programName\": \"{{UpdtprogramName2}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/program/{{programName2}}"
					},
					"response": []
				},
				{
					"name": "Update Program without programName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\",  () => {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "4460eeb6-11bb-49c0-9d20-11845f029fe1"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var upprogramName2 = \"Jun23-APICollectors-SDET-\" + pm.variables.replaceIn('{{$randomInt}}');\r",
									"pm.environment.set(\"UpdtprogramName2\",upprogramName2);"
								],
								"type": "text/javascript",
								"id": "b89aeaa1-eac7-4af6-b207-a9a0dd1c6b65"
							}
						}
					],
					"id": "177269ef-95e5-4d73-ba43-a7388197decf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\": \"{{UpdtprogramDescription2}}\",\r\n  \"programId\": {{programId2}},\r\n  \"programStatus\": \"{{programStatus2}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/program/{{programName2}}"
					},
					"response": []
				},
				{
					"name": "Update Program with invalid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1f91fccd-2eb6-4f23-ad16-40c81ce008e4",
								"exec": [
									"pm.test(\"Status code is 404\",  () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.text()).to.include(\"program with id \"+ pm.variables.get(\"InvalidprogramId\") +\" not found\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "cd1556b7-499c-403b-ab92-11db78872b0a",
								"exec": [
									"pm.variables.set(\"InvalidprogramId\", 0);\r",
									"\r",
									"var upprogramName2 = \"Jun23-APICollectors-SDET-\" + pm.variables.replaceIn('{{$randomInt}}');\r",
									"pm.environment.set(\"UpdtprogramName2\",upprogramName2);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "0c84120a-9f79-4eed-a218-c3c3646b54cc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\": \"{{UpdtprogramDescription}}\",\r\n  \"programId\": {{programId}},\r\n  \"programName\": \"{{UpdtprogramName}}\",\r\n  \"programStatus\": \"{{programStatus}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/putprogram/:programId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"putprogram",
								":programId"
							],
							"variable": [
								{
									"id": "a8e67fb8-4fab-45a1-a674-7188d88f112a",
									"key": "programId",
									"value": "{{InvalidprogramId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Program By Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1506bcb6-7f8b-43f3-88df-5436a5ed20c9",
								"exec": [
									"pm.test(\"Status code is 200\",  () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.environment.set(\"NewprogramName2\", response.programName);\r",
									"\r",
									"//Validating Fields\r",
									"pm.test(\"Test data of the response\", ()=>{\r",
									"pm.expect(response).to.be.an(\"object\");\r",
									"pm.expect(response.programId).to.be.eql(pm.variables.get(\"programId2\"));\r",
									"pm.expect(response.programName).to.eql(pm.variables.get(\"UpdtprogramName2\"));\r",
									"pm.expect(response.programStatus).to.eql(pm.variables.get(\"programStatus2\"));\r",
									"});\r",
									"\r",
									"//Validating response\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"programId\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"creationTime\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"lastModTime\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"programId\",\r",
									"    \"programName\",\r",
									"    \"programDescription\",\r",
									"    \"programStatus\",\r",
									"    \"creationTime\",\r",
									"    \"lastModTime\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Schema is valid\", ()=>{\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "24f9e67d-816d-44bc-8b97-210bf9cd23a2",
								"exec": [
									"var upprogramName2 = \"Jun23-APICollectors-SDET-\" + pm.variables.replaceIn('{{$randomInt}}');\r",
									"pm.environment.set(\"UpdtprogramName2\",upprogramName2);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "82ba96d6-f147-450d-8d3c-0101a2da2155",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\": \"{{UpdtprogramDescription2}}\",\r\n  \"programId\": {{programId2}},\r\n  \"programName\": \"{{UpdtprogramName2}}\",\r\n  \"programStatus\": \"{{programStatus2}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/program/{{programName2}}"
					},
					"response": []
				},
				{
					"name": "Update Program By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8cdc6227-20a4-4ef3-aa11-144b9255632c",
								"exec": [
									"pm.test(\"Status code is 200\",  () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.environment.set(\"NewprogramName\", response.programName);\r",
									"\r",
									"\r",
									"//Validating Fields\r",
									"pm.test(\"Test data of the response\", ()=>{\r",
									"pm.expect(response).to.be.an(\"object\");\r",
									"pm.expect(response.programId).to.be.eql(pm.variables.get(\"programId\"));\r",
									"pm.expect(response.programName).to.eql(pm.variables.get(\"UpdtprogramName\"));\r",
									"pm.expect(response.programStatus).to.eql(pm.variables.get(\"programStatus\"));\r",
									"});\r",
									"\r",
									"//Validating response\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"programId\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"creationTime\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"lastModTime\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"programId\",\r",
									"    \"programName\",\r",
									"    \"programDescription\",\r",
									"    \"programStatus\",\r",
									"    \"creationTime\",\r",
									"    \"lastModTime\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Schema is valid\", ()=>{\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a951b390-e1ff-4ad7-a488-dc17daff6bc9",
								"exec": [
									"var upprogramName = \"Jun23-APICollectors-SDET-\" + pm.variables.replaceIn('{{$randomInt}}');\r",
									"pm.environment.set(\"UpdtprogramName\",upprogramName);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "d32c3a4c-368b-4c7e-b8f8-bff1ac4fba0e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\": \"{{UpdtprogramDescription}}\",\r\n  \"programId\": {{programId}},\r\n  \"programName\": \"{{UpdtprogramName}}\",\r\n  \"programStatus\": \"{{programStatus}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/putprogram/{{programId}}"
					},
					"response": []
				},
				{
					"name": "Delete Program By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "31ef15f9-5dbd-4c55-8bb2-9d0ea2b6ef46",
								"exec": [
									"pm.test(\"Status code is 200\",  () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.text()).to.include(\"deleted Successfully\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "106b9427-e676-4b50-a047-fe30809ac9e3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURL}}/deletebyprogid/{{programId}}"
					},
					"response": []
				},
				{
					"name": "Delete program by deleted ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "31ef15f9-5dbd-4c55-8bb2-9d0ea2b6ef46",
								"exec": [
									"pm.test(\"Status code is 404\",  () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.text()).to.include(\"no record found with programId \" +pm.variables.get(\"programId\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5fd3cbbd-773e-416a-9a45-1c76bc99f05d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURL}}/deletebyprogid/{{programId}}"
					},
					"response": []
				},
				{
					"name": "Delete By Program Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "83826517-8076-4ebe-ab8e-15ed1c4aff12",
								"exec": [
									"pm.test(\"Status code is 200\",  () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.text()).to.include(\"deleted Successfully\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.environment.unset(\"programName\");\r",
									"pm.environment.unset(\"programId\");\r",
									"pm.environment.unset(\"programName2\");\r",
									"pm.environment.unset(\"programId2\");\r",
									"pm.environment.unset(\"UpdtprogramName\");\r",
									"pm.environment.unset(\"UpdtprogramName2\");\r",
									"pm.environment.unset(\"NewprogramName2\");\r",
									"pm.environment.unset(\"NewprogramName\");\r",
									"pm.environment.unset(\"TestprogramName\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "120c05f1-db97-4c41-bc34-ebe9f8a9a3c6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURL}}/deletebyprogname/{{NewprogramName2}}"
					},
					"response": []
				},
				{
					"name": "Delete By same Program Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "83826517-8076-4ebe-ab8e-15ed1c4aff12",
								"exec": [
									"pm.test(\"Status code is 404\",  () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.text()).to.include(\"no record found with programName\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.environment.unset(\"programName\");\r",
									"pm.environment.unset(\"programId\");\r",
									"pm.environment.unset(\"programName2\");\r",
									"pm.environment.unset(\"programId2\");\r",
									"pm.environment.unset(\"UpdtprogramName\");\r",
									"pm.environment.unset(\"UpdtprogramName2\");\r",
									"pm.environment.unset(\"NewprogramName2\");\r",
									"pm.environment.unset(\"NewprogramName\");\r",
									"pm.environment.unset(\"TestprogramName\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "9a837ab2-52bb-4ef2-9190-f7e47d35c020",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURL}}/deletebyprogname/{{NewprogramName2}}"
					},
					"response": []
				}
			],
			"id": "e1fa573a-2244-44ff-833f-b3a205f9ef0d"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "211aac99-74a3-4a6f-af98-363a6c35cdf3",
				"type": "text/javascript",
				"exec": [
					"// Load data from file",
					"if(typeof pm.variables.get('requestData') !== 'object')",
					"{",
					"    pm.variables.set('requestData', pm.iterationData.toObject());",
					"}",
					"",
					"const requestData = pm.variables.get('requestData');",
					"",
					"if(typeof requestData != 'object' || Object.keys(requestData).length === 0)",
					"{",
					"    console.log('No external data provided/data set is empty');",
					"    return;",
					"}",
					"",
					"// Find current request",
					"const currentRequest = requestData.requests.filter(({name}) => name === pm.info.requestName)[0];",
					"",
					"// If no data",
					"if(!currentRequest)",
					"{",
					"    console.log('Request ${pm.info.requestName} has no data.');",
					"}",
					"",
					"if(currentRequest)",
					"{",
					"    // Expose variables",
					"    const variables = currentRequest.data.shift();",
					"",
					"    Object.entries(variables).forEach(([key, value]) => {",
					"        pm.variables.set(key, value);",
					"    });",
					"",
					"    pm.variables.set('requestData', requestData);",
					"",
					"    // Declare next request",
					"    if(currentRequest.data.length > 0)",
					"    {",
					"        postman.setNextRequest(pm.info.requestName);",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "cebeb229-bbe5-4dbe-b124-bdfabf0f00fe",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "de43657c-f0f3-44d9-bbd5-0423fedc3dc5",
			"key": "BaseURL",
			"value": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms"
		},
		{
			"id": "3744f9dc-c1a9-4608-b1e1-72c9e9e6de8f",
			"key": "batchDescription",
			"value": "Postman",
			"type": "string"
		},
		{
			"id": "e06e0861-3b0f-4e63-932a-eb4a6b17675a",
			"key": "batchNoOfClasses",
			"value": "2",
			"type": "string"
		},
		{
			"id": "9b4d036d-c0cf-47d4-bbc3-64bd6d590b75",
			"key": "batchStatus",
			"value": "Active",
			"type": "string"
		},
		{
			"id": "31fe8516-df4c-4af0-bc8c-5af3410174b4",
			"key": "programDescriptionbatch",
			"value": "Postman",
			"type": "string"
		},
		{
			"id": "6cf0aed8-b392-4a4e-9269-6eba6f6711af",
			"key": "programStatusbatch",
			"value": "Active",
			"type": "string"
		},
		{
			"id": "89b457c8-22e8-4f92-bfb4-a083a4ac1793",
			"key": "UpdtbatchNoOfClasses",
			"value": "4",
			"type": "string"
		},
		{
			"id": "898efeeb-398a-47cc-a940-0617938e4db0",
			"key": "UpdtbatchStatus",
			"value": "InActive",
			"type": "string"
		},
		{
			"id": "2119d521-e402-45f1-b1e6-6b3d53c13f3d",
			"key": "UpdtbatchDescription",
			"value": "Rest Assure",
			"type": "string"
		},
		{
			"id": "af7506af-fc21-4ad8-a40b-e585ef92ae45",
			"key": "userComments",
			"value": "creating new user",
			"type": "string"
		},
		{
			"id": "8f971dea-489d-4f95-bb77-7ca7abb6b324",
			"key": "userEduPg",
			"value": "MS",
			"type": "string"
		},
		{
			"id": "c058c57e-0594-4553-877b-46c472ea0c1f",
			"key": "userEduUg",
			"value": "BE",
			"type": "string"
		},
		{
			"id": "618886bd-8519-4b49-afa2-9eb6d050d9be",
			"key": "userFirstName",
			"value": "APICollectors_004",
			"type": "string"
		},
		{
			"id": "6761145c-6153-4e41-87fb-c3862b55cd7e",
			"key": "adminUserFirstName",
			"value": "APICollectors_001",
			"type": "string"
		},
		{
			"id": "3ff8fab5-e63b-42d7-b5c4-9710f62f4fd3",
			"key": "staffUserFirstName",
			"value": "APICollectors_002",
			"type": "string"
		},
		{
			"id": "95f06b83-02e4-4ffd-b4ef-43cc5b3354c6",
			"key": "studentUserFirstName",
			"value": "APICollectors_003",
			"type": "string"
		},
		{
			"id": "4666af2e-9bd9-49fa-bf4b-6bd61fcfaef8",
			"key": "userLastName",
			"value": "User",
			"type": "string"
		},
		{
			"id": "6680fb2f-e001-4fcd-bc51-f48207374f4a",
			"key": "userLinkedinUrl",
			"value": "www.linkedin.com/Test1234",
			"type": "string"
		},
		{
			"id": "eba8602c-e833-4bdb-8a39-f0e8720fdf74",
			"key": "userLocation",
			"value": "India",
			"type": "string"
		},
		{
			"id": "85422fa8-a557-4cf1-970c-d69ed1360155",
			"key": "userMiddleName",
			"value": "",
			"type": "string"
		},
		{
			"id": "5d47069b-c2ee-4f2b-9a50-d1d6279e509d",
			"key": "roleId",
			"value": "R02",
			"type": "string"
		},
		{
			"id": "bb111761-398f-44e6-9e28-f522714cb090",
			"key": "userRoleStatus",
			"value": "Active",
			"type": "string"
		},
		{
			"id": "f675d5d2-edd2-4b6d-9832-5104a85f8094",
			"key": "userTimeZone",
			"value": "IST",
			"type": "string"
		},
		{
			"id": "dc9084af-3650-45ce-bac5-2981bda9e6ae",
			"key": "userVisaStatus",
			"value": "NA",
			"type": "string"
		},
		{
			"id": "fcede81d-4f1b-48b9-a90f-81233cc75753",
			"key": "invalidUserRoleId",
			"value": "invalidRoleID",
			"type": "string"
		},
		{
			"id": "e3754ab9-7e49-4d4e-b6dc-23fb0d728ac0",
			"key": "integerUserRoleId",
			"value": "46546",
			"type": "string"
		},
		{
			"id": "8c2e8f5f-0647-41c7-82d9-005a1227f0da",
			"key": "invalidUserVisaStatus",
			"value": "invalidVisaStatus",
			"type": "string"
		},
		{
			"id": "b7059ad4-b89f-432c-9152-3fafe31165ef",
			"key": "invalidUserTimeZone",
			"value": "invalidTimeZone",
			"type": "string"
		},
		{
			"id": "84c24766-c51d-4df0-8265-6c98142e8826",
			"key": "stringUserPhoneNumber",
			"value": "strPhone",
			"type": "string"
		},
		{
			"id": "fc1d5685-7135-41a8-b408-fc2aedceeca6",
			"key": "blankRoleId",
			"value": "",
			"type": "string"
		},
		{
			"id": "0bb9cce8-d26b-4f5f-8ac8-46c2a1fc0289",
			"key": "blankUserRoleStatus",
			"value": "",
			"type": "string"
		},
		{
			"id": "dd2e1b1f-30b0-4985-ae9a-cf7026445695",
			"key": "blankUserFirstName",
			"value": "",
			"type": "string"
		},
		{
			"id": "575cb899-c128-42af-9647-55031ceadb8a",
			"key": "blankUserLastName",
			"value": "",
			"type": "string"
		},
		{
			"id": "e846cc3e-2a24-4bb0-822e-76e64781d7d1",
			"key": "blankUserTimeZone",
			"value": "",
			"type": "string"
		},
		{
			"id": "94feceb9-caa3-4832-a198-a3266e3bb62e",
			"key": "blankUserVisaStatus",
			"value": "",
			"type": "string"
		},
		{
			"id": "65d49178-9f82-4ea2-93e5-24be07b4b2f2",
			"key": "programDescription",
			"value": "DA",
			"type": "string"
		},
		{
			"id": "f2609df6-aea7-4d1f-a5f7-74491a2db87d",
			"key": "programStatus",
			"value": "Active",
			"type": "string"
		},
		{
			"id": "8c7226cc-a7ed-493f-8a67-6d199f2a8636",
			"key": "programDescription2",
			"value": "SDET",
			"type": "string"
		},
		{
			"id": "211fff4c-4ca6-4cb8-9045-9817278d4d73",
			"key": "UpdtprogramDescription",
			"value": "Postman",
			"type": "string"
		},
		{
			"id": "f2565b27-9803-4f70-bdff-624522e8e8f1",
			"key": "programStatus2",
			"value": "Active",
			"type": "string"
		},
		{
			"id": "521eedac-715d-4de8-ae62-a4c5ceb1e035",
			"key": "UpdtprogramDescription2",
			"value": "Rest Assure",
			"type": "string"
		},
		{
			"id": "a6154e33-ca86-475c-93ec-04adcdb3a178",
			"key": "userNameCounter",
			"value": "0",
			"type": "string"
		},
		{
			"id": "1a449ea5-b56e-4929-bdb3-58857972d531",
			"key": "messageUpdateStatusSuccess",
			"value": "UserStatus Updated for User: ",
			"type": "string"
		},
		{
			"id": "8575d9ee-4a80-4a3d-8bcb-a5e6b5811377",
			"key": "message1UpdateStatusRoleid",
			"value": "RoleID: ",
			"type": "string"
		},
		{
			"id": "2c43d695-2984-4218-8797-3ce8f898e7ed",
			"key": "message2UpdateStatusRoleid",
			"value": " not found for the UserID: ",
			"type": "string"
		},
		{
			"id": "73b2c51e-34b0-4dec-a4a0-40d0bdb64d93",
			"key": "messageMandatoryRoleStatus",
			"value": "Role Status is Mandatory",
			"type": "string"
		},
		{
			"id": "a65a84ca-e158-46c1-b022-9372bd433360",
			"key": "messageMandatoryRoleid",
			"value": "Role Id is mandatory",
			"type": "string"
		},
		{
			"id": "d2ba5674-3673-4575-a030-57f7047f5c48",
			"key": "messageUpdateRoleStatusInvalidroleid",
			"value": "RoleID: invalidRoleID not found for the UserID: ",
			"type": "string"
		},
		{
			"id": "b3c5dae4-07dc-46ce-8988-92445040a91d",
			"key": "messageMissingPhone",
			"value": "Phone Number is required",
			"type": "string"
		},
		{
			"id": "8225557d-0b14-4bc5-aeac-982d501c6599",
			"key": "messageStringPhone",
			"value": "Phone Number cannot be string",
			"type": "string"
		},
		{
			"id": "e7bc9dae-164a-41f1-84be-27545d4e12a8",
			"key": "messageInvalidRoleid",
			"value": "Invalid Role id",
			"type": "string"
		},
		{
			"id": "4971737e-fc14-4d17-8016-7d5cca6ed89e",
			"key": "messageMandatoryFirstName",
			"value": "User First Name cannot be null or empty",
			"type": "string"
		},
		{
			"id": "4ddc4892-8777-465c-9cfd-b6a947de8dd9",
			"key": "messageMandatoryLastName",
			"value": "User Last Name cannot be null or empty",
			"type": "string"
		},
		{
			"id": "458a0686-53c7-4aac-9f54-bd2fbd5a31ea",
			"key": "messageMandatoryTimeZone",
			"value": "Failed to create user, as 'TimeZone' is invalid !! ",
			"type": "string"
		},
		{
			"id": "a1880584-0259-4d2d-a935-47afa2efe027",
			"key": "messageMandatoryVisaStatus",
			"value": "Failed to create user, as 'Visa Status' is invalid !! ",
			"type": "string"
		},
		{
			"id": "8021036b-f496-46b0-8080-27318fb67e10",
			"key": "integerRoleStatus",
			"value": "1234",
			"type": "string"
		}
	]
}