{
	"info": {
		"_postman_id": "71c10254-c833-43d3-b37a-65bf87a7d7b7",
		"name": "Team5_APICollectors",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "User",
			"item": [
				{
					"name": "Create new Admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 201 Created\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.expect(pm.response.status).to.eql('Created');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"     \"required\": [",
									"      \"userId\",",
									"      \"userFirstName\",",
									"      \"userLastName\",",
									"      \"userMiddleName\",",
									"      \"userPhoneNumber\",",
									"      \"userLocation\",",
									"      \"userTimeZone\",",
									"      \"userLinkedinUrl\",",
									"      \"userEduUg\",",
									"      \"userEduPg\",",
									"      \"userComments\",",
									"      \"userVisaStatus\"",
									"    ],",
									"    \"properties\": {",
									"        \"userId\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userFirstName\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userLastName\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userMiddleName\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userPhoneNumber\": {",
									"            \"type\": \"integer\"",
									"        },",
									"        \"userLocation\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userTimeZone\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userLinkedinUrl\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userEduUg\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userEduPg\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userComments\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userVisaStatus\": {",
									"            \"type\": \"string\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test4 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test5 - Validate userId starts with U",
									"pm.test(\"Auto-created userId should have U\", () => {",
									"    pm.expect(responseJson.userId).to.contain('U');",
									"});",
									"",
									"// Test6 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.userFirstName).to.eql(pm.variables.get(\"adminUserFirstName\"));",
									"    pm.expect(responseJson.userLastName).to.eql(pm.variables.get(\"userLastName\"));",
									"    pm.expect(responseJson.userMiddleName).to.eql(pm.variables.get(\"userMiddleName\"));",
									"    pm.expect(responseJson.userPhoneNumber).to.eql(parseInt(pm.environment.get(\"userPhoneNumber\")));",
									"    pm.expect(responseJson.userLocation).to.eql(pm.variables.get(\"userLocation\"));",
									"    pm.expect(responseJson.userTimeZone).to.eql(pm.variables.get(\"userTimeZone\"));",
									"    pm.expect(responseJson.userLinkedinUrl).to.eql(pm.variables.get(\"userLinkedinUrl\"));",
									"    pm.expect(responseJson.userEduUg).to.eql(pm.variables.get(\"userEduUg\"));",
									"    pm.expect(responseJson.userEduPg).to.eql(pm.variables.get(\"userEduPg\"));",
									"    pm.expect(responseJson.userComments).to.eql(pm.variables.get(\"userComments\"));",
									"    pm.expect(responseJson.userVisaStatus).to.eql(pm.variables.get(\"userVisaStatus\"));",
									"});",
									"",
									"// Set global variables from response, to be used by other requests",
									"if(responseJson)",
									"{",
									"    pm.environment.set(\"adminUserId\", responseJson.userId);",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "6b522288-2905-49d9-9387-2d396fb45e21"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const phoneNumber = Math.floor(Math.random() * 10000000);",
									"pm.environment.set(\"userPhoneNumber\", phoneNumber);"
								],
								"type": "text/javascript",
								"id": "58d40983-3bfc-4d1b-927d-3cdad236dff4"
							}
						}
					],
					"id": "e33afac9-f739-47f4-a13d-1c78da3a3dd5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userComments\": \"{{userComments}}\",\n    \"userEduPg\": \"{{userEduPg}}\",\n    \"userEduUg\": \"{{userEduUg}}\",\n    \"userFirstName\": \"{{adminUserFirstName}}\",\n    \"userLastName\": \"{{userLastName}}\",\n    \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n    \"userLocation\": \"{{userLocation}}\",\n    \"userMiddleName\": \"\",\n    \"userPhoneNumber\": {{userPhoneNumber}},\n    \"userRoleMaps\": [\n        {\n            \"roleId\": \"{{roleId}}\",\n            \"userRoleStatus\": \"{{userRoleStatus}}\"\n        }\n    ],\n    \"userTimeZone\": \"{{userTimeZone}}\",\n    \"userVisaStatus\": \"{{userVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Get Admin User info by Id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "0a43c72f-ca93-4f90-ada2-3514e4c4ebc5"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.status).to.eql('OK');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"var schema = {",
									"  \"type\": \"array\",",
									"  \"items\": {",
									"      \"type\": \"object\",",
									"      \"required\": [",
									"          \"userRoleId\",",
									"          \"user\",",
									"          \"role\",",
									"          \"batches\",",
									"          \"userRoleStatus\"",
									"      ],",
									"      \"properties\": {",
									"          \"userRoleId\": {",
									"              \"type\": \"integer\"",
									"          },",
									"          \"user\": {",
									"              \"type\": \"object\",",
									"              \"required\": [",
									"                  \"userId\",",
									"                  \"userFirstName\",",
									"                  \"userLastName\",",
									"                  \"userPhoneNumber\",",
									"                  \"userTimeZone\",",
									"                  \"userVisaStatus\"",
									"              ],",
									"              \"properties\": {",
									"                  \"userId\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"userFirstName\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"userLastName\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"userPhoneNumber\": {",
									"                      \"type\": \"integer\"",
									"                  },",
									"                  \"userTimeZone\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"userVisaStatus\": {",
									"                      \"type\": \"string\"",
									"                  }",
									"                }",
									"          },",
									"          \"role\": {",
									"              \"type\": \"object\",",
									"              \"required\": [",
									"                  \"roleId\",",
									"                  \"roleName\",",
									"                  \"roleDesc\",",
									"                  \"creationTime\",",
									"                  \"lastModTime\",",
									"                  \"hibernateLazyInitializer\"",
									"              ],",
									"              \"properties\": {",
									"                  \"roleId\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"roleName\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"roleDesc\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"creationTime\": {",
									"                      \"type\": \"null\"",
									"                  },",
									"                  \"lastModTime\": {",
									"                      \"type\": \"null\"",
									"                  },",
									"                  \"hibernateLazyInitializer\": {",
									"                      \"type\": \"object\"",
									"                  }",
									"              }",
									"           },",
									"          \"batches\": {",
									"              \"type\": \"array\",",
									"              \"items\": {}",
									"          },",
									"          \"userRoleStatus\": {",
									"              \"type\": \"string\"",
									"          }",
									"      }",
									"  }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson[0].user.userId).to.eql(pm.environment.get(\"adminUserId\"));",
									"    pm.expect(responseJson[0].user.userFirstName).to.eql(pm.variables.get(\"adminUserFirstName\"));",
									"    pm.expect(responseJson[0].user.userLastName).to.eql(pm.variables.get(\"userLastName\"));",
									"    pm.expect(responseJson[0].user.userMiddleName).to.eql(pm.variables.get(\"userMiddleName\"));",
									"    pm.expect(responseJson[0].user.userPhoneNumber).to.eql(parseInt(pm.environment.get(\"userPhoneNumber\")));",
									"    pm.expect(responseJson[0].user.userLocation).to.eql(pm.variables.get(\"userLocation\"));",
									"    pm.expect(responseJson[0].user.userTimeZone).to.eql(pm.variables.get(\"userTimeZone\"));",
									"    pm.expect(responseJson[0].user.userLinkedinUrl).to.eql(pm.variables.get(\"userLinkedinUrl\"));",
									"    pm.expect(responseJson[0].user.userEduUg).to.eql(pm.variables.get(\"userEduUg\"));",
									"    pm.expect(responseJson[0].user.userEduPg).to.eql(pm.variables.get(\"userEduPg\"));",
									"    pm.expect(responseJson[0].user.userComments).to.eql(pm.variables.get(\"userComments\"));",
									"    pm.expect(responseJson[0].user.userVisaStatus).to.eql(pm.variables.get(\"userVisaStatus\"));",
									"    pm.expect(responseJson[0].role.roleId).to.eql(pm.variables.get(\"roleId\"));",
									"    pm.expect(responseJson[0].userRoleStatus).to.eql(pm.variables.get(\"userRoleStatus\"));",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "a0dd5256-3e8b-43a1-9eb4-b653be8226d5"
							}
						}
					],
					"id": "40de2490-1f4b-4d7b-8717-c136a15cf716",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/users/users/:userId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"users",
								":userId"
							],
							"variable": [
								{
									"id": "5686e195-c33a-4d04-b8db-9f17c5472ca8",
									"key": "userId",
									"value": "{{adminUserId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new Staff user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 201 Created\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.expect(pm.response.status).to.eql('Created');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"      \"userId\",",
									"      \"userFirstName\",",
									"      \"userLastName\",",
									"      \"userMiddleName\",",
									"      \"userPhoneNumber\",",
									"      \"userLocation\",",
									"      \"userTimeZone\",",
									"      \"userLinkedinUrl\",",
									"      \"userEduUg\",",
									"      \"userEduPg\",",
									"      \"userComments\",",
									"      \"userVisaStatus\"",
									"    ],",
									"    \"properties\": {",
									"        \"userId\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userFirstName\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userLastName\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userMiddleName\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userPhoneNumber\": {",
									"            \"type\": \"integer\"",
									"        },",
									"        \"userLocation\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userTimeZone\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userLinkedinUrl\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userEduUg\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userEduPg\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userComments\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userVisaStatus\": {",
									"            \"type\": \"string\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test4 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test5 - Validate userId starts with U",
									"pm.test(\"Auto-created userId should have U\", () => {",
									"    pm.expect(responseJson.userId).to.contain('U');",
									"});",
									"",
									"// Test6 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.userFirstName).to.eql(pm.variables.get(\"staffUserFirstName\"));",
									"    pm.expect(responseJson.userLastName).to.eql(pm.variables.get(\"userLastName\"));",
									"    pm.expect(responseJson.userMiddleName).to.eql(pm.variables.get(\"userMiddleName\"));",
									"    pm.expect(responseJson.userPhoneNumber).to.eql(parseInt(pm.environment.get(\"userPhoneNumber\")));",
									"    pm.expect(responseJson.userLocation).to.eql(pm.variables.get(\"userLocation\"));",
									"    pm.expect(responseJson.userTimeZone).to.eql(pm.variables.get(\"userTimeZone\"));",
									"    pm.expect(responseJson.userLinkedinUrl).to.eql(pm.variables.get(\"userLinkedinUrl\"));",
									"    pm.expect(responseJson.userEduUg).to.eql(pm.variables.get(\"userEduUg\"));",
									"    pm.expect(responseJson.userEduPg).to.eql(pm.variables.get(\"userEduPg\"));",
									"    pm.expect(responseJson.userComments).to.eql(pm.variables.get(\"userComments\"));",
									"    pm.expect(responseJson.userVisaStatus).to.eql(pm.variables.get(\"userVisaStatus\"));",
									"});",
									"",
									"// Set global variables from response, to be used by other requests",
									"if(responseJson)",
									"{",
									"    pm.environment.set(\"staffUserId\", responseJson.userId);",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "0670bf7a-60c2-405e-a1d3-5afd2bfd3286"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const phoneNumber = Math.floor(Math.random() * 10000000);",
									"pm.environment.set(\"userPhoneNumber\", phoneNumber);"
								],
								"type": "text/javascript",
								"id": "ad07838b-6867-4f47-8d36-4816a2812a78"
							}
						}
					],
					"id": "c110e2b8-231c-4cbb-8afc-2d39941cb924",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userComments\": \"{{userComments}}\",\n    \"userEduPg\": \"{{userEduPg}}\",\n    \"userEduUg\": \"{{userEduUg}}\",\n    \"userFirstName\": \"{{staffUserFirstName}}\",\n    \"userLastName\": \"{{userLastName}}\",\n    \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n    \"userLocation\": \"{{userLocation}}\",\n    \"userMiddleName\": \"\",\n    \"userPhoneNumber\": {{userPhoneNumber}},\n    \"userRoleMaps\": [\n        {\n            \"roleId\": \"{{roleId}}\",\n            \"userRoleStatus\": \"{{userRoleStatus}}\"\n        }\n    ],\n    \"userTimeZone\": \"{{userTimeZone}}\",\n    \"userVisaStatus\": \"{{userVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Get All Staff",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.status).to.eql('OK');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"var schema = {",
									"  \"type\": \"array\",",
									"  \"items\": {",
									"      \"type\": \"object\",",
									"      \"required\": [",
									"          \"userRoleId\",",
									"          \"user\",",
									"          \"role\",",
									"          \"batches\",",
									"          \"userRoleStatus\"",
									"      ],",
									"      \"properties\": {",
									"          \"userRoleId\": {",
									"              \"type\": \"integer\"",
									"          },",
									"          \"user\": {",
									"              \"type\": \"object\",",
									"              \"required\": [",
									"                  \"userId\",",
									"                  \"userFirstName\",",
									"                  \"userLastName\",",
									"                  \"userPhoneNumber\",",
									"                  \"userTimeZone\",",
									"                  \"userVisaStatus\",",
									"                  \"hibernateLazyInitializer\"",
									"              ],",
									"              \"properties\": {",
									"                  \"userId\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"userFirstName\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"userLastName\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"userPhoneNumber\": {",
									"                      \"type\": \"integer\"",
									"                  },",
									"                  \"userTimeZone\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"userVisaStatus\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"hibernateLazyInitializer\": {",
									"                      \"type\": \"object\"",
									"                  }",
									"                }",
									"          },",
									"          \"role\": {",
									"              \"type\": \"object\",",
									"              \"required\": [",
									"                  \"roleId\",",
									"                  \"roleName\",",
									"                  \"roleDesc\",",
									"                  \"creationTime\",",
									"                  \"lastModTime\",",
									"                  \"hibernateLazyInitializer\"",
									"              ],",
									"              \"properties\": {",
									"                  \"roleId\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"roleName\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"roleDesc\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"creationTime\": {",
									"                      \"type\": \"null\"",
									"                  },",
									"                  \"lastModTime\": {",
									"                      \"type\": \"null\"",
									"                  },",
									"                  \"hibernateLazyInitializer\": {",
									"                      \"type\": \"object\"",
									"                  }",
									"              }",
									"           },",
									"          \"batches\": {",
									"              \"type\": \"array\",",
									"              \"items\": {}",
									"          },",
									"          \"userRoleStatus\": {",
									"              \"type\": \"string\"",
									"          }",
									"      }",
									"  }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Filter staff user created earlier",
									"if(responseJson.user)",
									"{",
									"    const staffUser = responseJson.filter((user) => user.user.userId === pm.environment.get(\"staffUserId\"));",
									"",
									"    // Test5 - Validate Staff user",
									"    pm.test(\"Staff user created should be in All users\", () => {",
									"        pm.expect(staffUser.length).to.eql(1);",
									"        pm.expect(staffUser[0]).to.be.an('object');",
									"    });",
									"}",
									"else",
									"{",
									"    pm.test(\"Staff user found\", () => {",
									"        pm.expect(responseJson.user).to.be.true;",
									"    });",
									"}"
								],
								"type": "text/javascript",
								"id": "81036496-f8a2-40fe-a540-3439d84f83ba"
							}
						}
					],
					"id": "d2bfc4bd-a0d8-465a-83e7-31d5b32c9bc5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/users/users/getAllStaff"
					},
					"response": []
				},
				{
					"name": "Get Staff User info by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.status).to.eql('OK');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"var schema = {",
									"  \"type\": \"array\",",
									"  \"items\": {",
									"      \"type\": \"object\",",
									"      \"required\": [",
									"          \"userRoleId\",",
									"          \"user\",",
									"          \"role\",",
									"          \"batches\",",
									"          \"userRoleStatus\"",
									"      ],",
									"      \"properties\": {",
									"          \"userRoleId\": {",
									"              \"type\": \"integer\"",
									"          },",
									"          \"user\": {",
									"              \"type\": \"object\",",
									"              \"required\": [",
									"                  \"userId\",",
									"                  \"userFirstName\",",
									"                  \"userLastName\",",
									"                  \"userPhoneNumber\",",
									"                  \"userTimeZone\",",
									"                  \"userVisaStatus\"",
									"              ],",
									"              \"properties\": {",
									"                  \"userId\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"userFirstName\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"userLastName\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"userPhoneNumber\": {",
									"                      \"type\": \"integer\"",
									"                  },",
									"                  \"userTimeZone\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"userVisaStatus\": {",
									"                      \"type\": \"string\"",
									"                  }",
									"                }",
									"          },",
									"          \"role\": {",
									"              \"type\": \"object\",",
									"              \"required\": [",
									"                  \"roleId\",",
									"                  \"roleName\",",
									"                  \"roleDesc\",",
									"                  \"creationTime\",",
									"                  \"lastModTime\",",
									"                  \"hibernateLazyInitializer\"",
									"              ],",
									"              \"properties\": {",
									"                  \"roleId\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"roleName\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"roleDesc\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"creationTime\": {",
									"                      \"type\": \"null\"",
									"                  },",
									"                  \"lastModTime\": {",
									"                      \"type\": \"null\"",
									"                  },",
									"                  \"hibernateLazyInitializer\": {",
									"                      \"type\": \"object\"",
									"                  }",
									"              }",
									"           },",
									"          \"batches\": {",
									"              \"type\": \"array\",",
									"              \"items\": {}",
									"          },",
									"          \"userRoleStatus\": {",
									"              \"type\": \"string\"",
									"          }",
									"      }",
									"  }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson[0].user.userId).to.eql(pm.environment.get(\"staffUserId\"));",
									"    pm.expect(responseJson[0].user.userFirstName).to.eql(pm.variables.get(\"staffUserFirstName\"));",
									"    pm.expect(responseJson[0].user.userLastName).to.eql(pm.variables.get(\"userLastName\"));",
									"    pm.expect(responseJson[0].user.userMiddleName).to.eql(pm.variables.get(\"userMiddleName\"));",
									"    pm.expect(responseJson[0].user.userPhoneNumber).to.eql(parseInt(pm.environment.get(\"userPhoneNumber\")));",
									"    pm.expect(responseJson[0].user.userLocation).to.eql(pm.variables.get(\"userLocation\"));",
									"    pm.expect(responseJson[0].user.userTimeZone).to.eql(pm.variables.get(\"userTimeZone\"));",
									"    pm.expect(responseJson[0].user.userLinkedinUrl).to.eql(pm.variables.get(\"userLinkedinUrl\"));",
									"    pm.expect(responseJson[0].user.userEduUg).to.eql(pm.variables.get(\"userEduUg\"));",
									"    pm.expect(responseJson[0].user.userEduPg).to.eql(pm.variables.get(\"userEduPg\"));",
									"    pm.expect(responseJson[0].user.userComments).to.eql(pm.variables.get(\"userComments\"));",
									"    pm.expect(responseJson[0].user.userVisaStatus).to.eql(pm.variables.get(\"userVisaStatus\"));",
									"    pm.expect(responseJson[0].role.roleId).to.eql(pm.variables.get(\"roleId\"));",
									"    pm.expect(responseJson[0].userRoleStatus).to.eql(pm.variables.get(\"userRoleStatus\"));",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "5f5862ca-bf43-4a91-b2d5-49dd75c8e150"
							}
						}
					],
					"id": "9ea16731-f5cc-42ee-b0d6-fdbbc6653220",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/users/users/:userId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"users",
								":userId"
							],
							"variable": [
								{
									"id": "3ff290c0-f3ad-4abd-ac8b-ecca158906bd",
									"key": "userId",
									"value": "{{staffUserId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new Student user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 201 Created\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.expect(pm.response.status).to.eql('Created');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"      \"userId\",",
									"      \"userFirstName\",",
									"      \"userLastName\",",
									"      \"userMiddleName\",",
									"      \"userPhoneNumber\",",
									"      \"userLocation\",",
									"      \"userTimeZone\",",
									"      \"userLinkedinUrl\",",
									"      \"userEduUg\",",
									"      \"userEduPg\",",
									"      \"userComments\",",
									"      \"userVisaStatus\"",
									"    ],",
									"    \"properties\": {",
									"        \"userId\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userFirstName\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userLastName\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userMiddleName\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userPhoneNumber\": {",
									"            \"type\": \"integer\"",
									"        },",
									"        \"userLocation\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userTimeZone\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userLinkedinUrl\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userEduUg\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userEduPg\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userComments\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userVisaStatus\": {",
									"            \"type\": \"string\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test4 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test5 - Validate userId starts with U",
									"pm.test(\"Auto-created userId should have U\", () => {",
									"    pm.expect(responseJson.userId).to.contain('U');",
									"});",
									"",
									"// Test6 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.userFirstName).to.eql(pm.variables.get(\"studentUserFirstName\"));",
									"    pm.expect(responseJson.userLastName).to.eql(pm.variables.get(\"userLastName\"));",
									"    pm.expect(responseJson.userMiddleName).to.eql(pm.variables.get(\"userMiddleName\"));",
									"    pm.expect(responseJson.userPhoneNumber).to.eql(parseInt(pm.environment.get(\"userPhoneNumber\")));",
									"    pm.expect(responseJson.userLocation).to.eql(pm.variables.get(\"userLocation\"));",
									"    pm.expect(responseJson.userTimeZone).to.eql(pm.variables.get(\"userTimeZone\"));",
									"    pm.expect(responseJson.userLinkedinUrl).to.eql(pm.variables.get(\"userLinkedinUrl\"));",
									"    pm.expect(responseJson.userEduUg).to.eql(pm.variables.get(\"userEduUg\"));",
									"    pm.expect(responseJson.userEduPg).to.eql(pm.variables.get(\"userEduPg\"));",
									"    pm.expect(responseJson.userComments).to.eql(pm.variables.get(\"userComments\"));",
									"    pm.expect(responseJson.userVisaStatus).to.eql(pm.variables.get(\"userVisaStatus\"));",
									"});",
									"",
									"// Set global variables from response, to be used by other requests",
									"if(responseJson)",
									"{",
									"    pm.environment.set(\"studentUserId\", responseJson.userId);",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "87a9079c-b967-46f1-a131-e69f361d9248"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const phoneNumber = Math.floor(Math.random() * 10000000);",
									"pm.environment.set(\"userPhoneNumber\", phoneNumber);"
								],
								"type": "text/javascript",
								"id": "eda8b7c0-2517-4009-a95b-17b1913deeff"
							}
						}
					],
					"id": "dd266534-131a-411c-b57c-162cacd02a86",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userComments\": \"{{userComments}}\",\n    \"userEduPg\": \"{{userEduPg}}\",\n    \"userEduUg\": \"{{userEduUg}}\",\n    \"userFirstName\": \"{{studentUserFirstName}}\",\n    \"userLastName\": \"{{userLastName}}\",\n    \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n    \"userLocation\": \"{{userLocation}}\",\n    \"userMiddleName\": \"\",\n    \"userPhoneNumber\": {{userPhoneNumber}},\n    \"userRoleMaps\": [\n        {\n            \"roleId\": \"{{roleId}}\",\n            \"userRoleStatus\": \"{{userRoleStatus}}\"\n        }\n    ],\n    \"userTimeZone\": \"{{userTimeZone}}\",\n    \"userVisaStatus\": \"{{userVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Get Student User info by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.status).to.eql('OK');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"var schema = {",
									"  \"type\": \"array\",",
									"  \"items\": {",
									"      \"type\": \"object\",",
									"      \"required\": [",
									"          \"userRoleId\",",
									"          \"user\",",
									"          \"role\",",
									"          \"batches\",",
									"          \"userRoleStatus\"",
									"      ],",
									"      \"properties\": {",
									"          \"userRoleId\": {",
									"              \"type\": \"integer\"",
									"          },",
									"          \"user\": {",
									"              \"type\": \"object\",",
									"              \"required\": [",
									"                  \"userId\",",
									"                  \"userFirstName\",",
									"                  \"userLastName\",",
									"                  \"userPhoneNumber\",",
									"                  \"userTimeZone\",",
									"                  \"userVisaStatus\"",
									"              ],",
									"              \"properties\": {",
									"                  \"userId\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"userFirstName\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"userLastName\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"userPhoneNumber\": {",
									"                      \"type\": \"integer\"",
									"                  },",
									"                  \"userTimeZone\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"userVisaStatus\": {",
									"                      \"type\": \"string\"",
									"                  }",
									"                }",
									"          },",
									"          \"role\": {",
									"              \"type\": \"object\",",
									"              \"required\": [",
									"                  \"roleId\",",
									"                  \"roleName\",",
									"                  \"roleDesc\",",
									"                  \"creationTime\",",
									"                  \"lastModTime\",",
									"                  \"hibernateLazyInitializer\"",
									"              ],",
									"              \"properties\": {",
									"                  \"roleId\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"roleName\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"roleDesc\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"creationTime\": {",
									"                      \"type\": \"null\"",
									"                  },",
									"                  \"lastModTime\": {",
									"                      \"type\": \"null\"",
									"                  },",
									"                  \"hibernateLazyInitializer\": {",
									"                      \"type\": \"object\"",
									"                  }",
									"              }",
									"           },",
									"          \"batches\": {",
									"              \"type\": \"array\",",
									"              \"items\": {}",
									"          },",
									"          \"userRoleStatus\": {",
									"              \"type\": \"string\"",
									"          }",
									"      }",
									"  }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson[0].user.userId).to.eql(pm.environment.get(\"studentUserId\"));",
									"    pm.expect(responseJson[0].user.userFirstName).to.eql(pm.variables.get(\"studentUserFirstName\"));",
									"    pm.expect(responseJson[0].user.userLastName).to.eql(pm.variables.get(\"userLastName\"));",
									"    pm.expect(responseJson[0].user.userMiddleName).to.eql(pm.variables.get(\"userMiddleName\"));",
									"    pm.expect(responseJson[0].user.userPhoneNumber).to.eql(parseInt(pm.environment.get(\"userPhoneNumber\")));",
									"    pm.expect(responseJson[0].user.userLocation).to.eql(pm.variables.get(\"userLocation\"));",
									"    pm.expect(responseJson[0].user.userTimeZone).to.eql(pm.variables.get(\"userTimeZone\"));",
									"    pm.expect(responseJson[0].user.userLinkedinUrl).to.eql(pm.variables.get(\"userLinkedinUrl\"));",
									"    pm.expect(responseJson[0].user.userEduUg).to.eql(pm.variables.get(\"userEduUg\"));",
									"    pm.expect(responseJson[0].user.userEduPg).to.eql(pm.variables.get(\"userEduPg\"));",
									"    pm.expect(responseJson[0].user.userComments).to.eql(pm.variables.get(\"userComments\"));",
									"    pm.expect(responseJson[0].user.userVisaStatus).to.eql(pm.variables.get(\"userVisaStatus\"));",
									"    pm.expect(responseJson[0].role.roleId).to.eql(pm.variables.get(\"roleId\"));",
									"    pm.expect(responseJson[0].userRoleStatus).to.eql(pm.variables.get(\"userRoleStatus\"));",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "ae0f249d-23db-49b0-aa9f-2208fe63e054"
							}
						}
					],
					"id": "7bf046da-da41-418a-8be9-ee46d3cb3d60",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/users/users/:userId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"users",
								":userId"
							],
							"variable": [
								{
									"id": "85182236-1aed-4170-b918-b6fddabe226a",
									"key": "userId",
									"value": "{{studentUserId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.status).to.eql('OK');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"array\",",
									"    \"items\": {",
									"        \"type\": \"object\",",
									"        \"required\": [",
									"            \"userId\",",
									"            \"userFirstName\",",
									"            \"userLastName\",",
									"            \"userPhoneNumber\",",
									"            \"userTimeZone\",",
									"            \"userVisaStatus\"",
									"        ],",
									"        \"properties\": {",
									"            \"userId\": {",
									"                \"type\": \"string\"",
									"            },",
									"            \"userFirstName\": {",
									"                \"type\": \"string\"",
									"            },",
									"            \"userLastName\": {",
									"                \"type\": \"string\"",
									"            },",
									"            \"userPhoneNumber\": {",
									"                \"type\": \"integer\"",
									"            },",
									"            \"userTimeZone\": {",
									"                \"type\": \"string\"",
									"            },",
									"            \"userVisaStatus\": {",
									"                \"type\": \"string\"",
									"            }",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Filter admin user created earlier",
									"const adminUser = responseJson.filter((user) => user.userId === pm.environment.get(\"adminUserId\"));",
									"",
									"// Test4 - Validate Admin user",
									"pm.test(\"Admin user created should be in All users\", () => {",
									"    pm.expect(adminUser.length).to.eql(1);",
									"    pm.expect(adminUser[0]).to.be.an('object');",
									"});",
									"",
									"// Filter staff user created earlier",
									"const staffUser = responseJson.filter((user) => user.userId === pm.environment.get(\"staffUserId\"));",
									"",
									"// Test5 - Validate Staff user",
									"pm.test(\"Staff user created should be in All users\", () => {",
									"    pm.expect(staffUser.length).to.eql(1);",
									"    pm.expect(staffUser[0]).to.be.an('object');",
									"});",
									"",
									"// Filter student user created earlier",
									"const studentUser = responseJson.filter((user) => user.userId === pm.environment.get(\"studentUserId\"));",
									"",
									"// Test6 - Validate Student user",
									"pm.test(\"Student user created should be in All users\", () => {",
									"    pm.expect(studentUser.length).to.eql(1);",
									"    pm.expect(studentUser[0]).to.be.an('object');",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "130035aa-b0fa-445c-ae67-3d8e82351841"
							}
						}
					],
					"id": "b7f56437-baa2-490b-a322-880093cad927",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/users/users"
					},
					"response": []
				},
				{
					"name": "Get All Users with Roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.status).to.eql('OK');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"var schema = {",
									"  \"type\": \"array\",",
									"  \"items\": {",
									"      \"type\": \"object\",",
									"      \"required\": [",
									"          \"userRoleId\",",
									"          \"user\",",
									"          \"role\",",
									"          \"batches\",",
									"          \"userRoleStatus\"",
									"      ],",
									"      \"properties\": {",
									"          \"userRoleId\": {",
									"              \"type\": \"integer\"",
									"          },",
									"          \"user\": {",
									"              \"type\": \"object\",",
									"              \"required\": [",
									"                  \"userId\",",
									"                  \"userFirstName\",",
									"                  \"userLastName\",",
									"                  \"userPhoneNumber\",",
									"                  \"userTimeZone\",",
									"                  \"userVisaStatus\",",
									"                  \"hibernateLazyInitializer\"",
									"              ],",
									"              \"properties\": {",
									"                  \"userId\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"userFirstName\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"userLastName\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"userPhoneNumber\": {",
									"                      \"type\": \"integer\"",
									"                  },",
									"                  \"userTimeZone\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"userVisaStatus\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"hibernateLazyInitializer\": {",
									"                      \"type\": \"object\"",
									"                  }",
									"                }",
									"          },",
									"          \"role\": {",
									"              \"type\": \"object\",",
									"              \"required\": [",
									"                  \"roleId\",",
									"                  \"roleName\",",
									"                  \"roleDesc\",",
									"                  \"creationTime\",",
									"                  \"lastModTime\",",
									"                  \"hibernateLazyInitializer\"",
									"              ],",
									"              \"properties\": {",
									"                  \"roleId\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"roleName\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"roleDesc\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"creationTime\": {",
									"                      \"type\": \"null\"",
									"                  },",
									"                  \"lastModTime\": {",
									"                      \"type\": \"null\"",
									"                  },",
									"                  \"hibernateLazyInitializer\": {",
									"                      \"type\": \"object\"",
									"                  }",
									"              }",
									"           },",
									"          \"batches\": {",
									"              \"type\": \"array\",",
									"              \"items\": {}",
									"          },",
									"          \"userRoleStatus\": {",
									"              \"type\": \"string\"",
									"          }",
									"      }",
									"  }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Filter admin user created earlier",
									"const adminUser = responseJson.filter((user) => user.user.userId === pm.environment.get(\"adminUserId\"));",
									"",
									"// Test4 - Validate Admin user",
									"pm.test(\"Admin user created should be in All users\", () => {",
									"    pm.expect(adminUser.length).to.eql(1);",
									"    pm.expect(adminUser[0]).to.be.an('object');",
									"});",
									"",
									"// Filter staff user created earlier",
									"const staffUser = responseJson.filter((user) => user.user.userId === pm.environment.get(\"staffUserId\"));",
									"",
									"// Test5 - Validate Staff user",
									"pm.test(\"Staff user created should be in All users\", () => {",
									"    pm.expect(staffUser.length).to.eql(1);",
									"    pm.expect(staffUser[0]).to.be.an('object');",
									"});",
									"",
									"// Filter student user created earlier",
									"const studentUser = responseJson.filter((user) => user.user.userId === pm.environment.get(\"studentUserId\"));",
									"",
									"// Test6 - Validate Student user",
									"pm.test(\"Student user created should be in All users\", () => {",
									"    pm.expect(studentUser.length).to.eql(1);",
									"    pm.expect(studentUser[0]).to.be.an('object');",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "fe5108ab-818e-4623-b2ed-d7245c08d065"
							}
						}
					],
					"id": "b36faf41-fa72-4c61-916e-181842e23bc3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/users/users/roles"
					},
					"response": []
				},
				{
					"name": "Delete Admin user by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.unset(\"adminUserId\");"
								],
								"type": "text/javascript",
								"id": "2e21ed54-4756-4c2f-ac77-1e63e9ffc38b"
							}
						}
					],
					"id": "6d0e14e0-27cc-4ed2-864b-0ef883924738",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/users/users/:userID",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"users",
								":userID"
							],
							"variable": [
								{
									"id": "85e7dbac-ad03-415a-afbe-0f7e569b4451",
									"key": "userID",
									"value": "{{adminUserId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Staff user by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.unset(\"staffUserId\");"
								],
								"type": "text/javascript",
								"id": "81c8eb62-4388-4938-81e1-55bf24aee379"
							}
						}
					],
					"id": "ec525bec-77d7-4c36-938b-2edb2c82d65c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/users/users/:userID",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"users",
								":userID"
							],
							"variable": [
								{
									"id": "231ac382-69a4-49c1-abf9-2fc1a28288da",
									"key": "userID",
									"value": "{{staffUserId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Student user by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.unset(\"studentUserId\");"
								],
								"type": "text/javascript",
								"id": "b0a82c4f-44da-4c59-9488-4fda2bb75689"
							}
						}
					],
					"id": "8292f503-3e8a-47f4-915b-932ded412261",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/users/users/:userID",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"users",
								":userID"
							],
							"variable": [
								{
									"id": "a9ba4c52-9859-475d-8014-1414d1530d61",
									"key": "userID",
									"value": "{{studentUserId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new user only mandatory fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 201 Created\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.expect(pm.response.status).to.eql('Created');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"      \"userId\",",
									"      \"userFirstName\",",
									"      \"userLastName\",",
									"      \"userPhoneNumber\",",
									"      \"userTimeZone\",",
									"      \"userLinkedinUrl\",",
									"      \"userEduUg\",",
									"      \"userEduPg\",",
									"      \"userVisaStatus\"",
									"    ],",
									"    \"properties\": {",
									"        \"userId\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userFirstName\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userLastName\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userPhoneNumber\": {",
									"            \"type\": \"integer\"",
									"        },",
									"        \"userTimeZone\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userVisaStatus\": {",
									"            \"type\": \"string\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test4 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test5 - Validate userId starts with U",
									"pm.test(\"Auto-created userId should have U\", () => {",
									"    pm.expect(responseJson.userId).to.contain('U');",
									"});",
									"",
									"// Test6 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.userFirstName).to.eql(pm.variables.get(\"userFirstName\"));",
									"    pm.expect(responseJson.userLastName).to.eql(pm.variables.get(\"userLastName\"));",
									"    pm.expect(responseJson.userMiddleName).to.be.undefined;",
									"    pm.expect(responseJson.userPhoneNumber).to.eql(parseInt(pm.variables.get(\"userPhoneNumber\")));",
									"    pm.expect(responseJson.userLocation).to.eql(pm.variables.get(\"userLocation\"));",
									"    pm.expect(responseJson.userTimeZone).to.eql(pm.variables.get(\"userTimeZone\"));",
									"    pm.expect(responseJson.userLinkedinUrl).to.eql(pm.variables.get(\"userLinkedinUrl\"));",
									"    pm.expect(responseJson.userEduUg).to.eql(pm.variables.get(\"userEduUg\"));",
									"    pm.expect(responseJson.userEduPg).to.eql(pm.variables.get(\"userEduPg\"));",
									"    pm.expect(responseJson.userComments).to.be.undefined;",
									"    pm.expect(responseJson.userVisaStatus).to.eql(pm.variables.get(\"userVisaStatus\"));",
									"});",
									"",
									"// Set global variables from response, to be used by other requests",
									"if(responseJson)",
									"{",
									"    pm.environment.set(\"userId\", responseJson.userId);",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "6be4bf29-18b9-41ac-be14-1830443db368"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const phoneNumber = Math.floor(Math.random() * 10000000);",
									"pm.environment.set(\"userPhoneNumber\", phoneNumber);"
								],
								"type": "text/javascript",
								"id": "9d4e8c53-b0e7-4f85-8d07-1013e235228e"
							}
						}
					],
					"id": "5da95f90-b177-4274-b728-9b1c2132ced3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userFirstName\": \"{{userFirstName}}\",\n    \"userLastName\": \"{{userLastName}}\",\n    \"userPhoneNumber\": {{userPhoneNumber}},\n    \"userRoleMaps\": [\n        {\n            \"roleId\": \"{{roleId}}\",\n            \"userRoleStatus\": \"{{userRoleStatus}}\"\n        }\n    ],\n    \"userTimeZone\": \"{{userTimeZone}}\",\n    \"userVisaStatus\": \"{{userVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create new user with duplicate phone number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(\"Failed to create new User as phone number \" + pm.environment.get(\"userPhoneNumber\") + \" already exists !!\");",
									"    pm.expect(responseJson.success).to.be.false;",
									"});",
									"",
									"pm.environment.unset(\"userPhoneNumber\");"
								],
								"type": "text/javascript",
								"id": "25faed46-b8c0-4ad8-95f6-ab4521b92b80"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "5d0a3c6d-8fa2-4041-964e-a79e26af7125"
							}
						}
					],
					"id": "332e08a4-f7b1-4842-9299-f275764dab05",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userComments\": \"{{userComments}}\",\n    \"userEduPg\": \"{{userEduPg}}\",\n    \"userEduUg\": \"{{userEduUg}}\",\n    \"userFirstName\": \"{{userFirstName}}\",\n    \"userLastName\": \"{{userLastName}}\",\n    \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n    \"userLocation\": \"{{userLocation}}\",\n    \"userPhoneNumber\": {{userPhoneNumber}},\n    \"userMiddleName\": \"\",\n    \"userRoleMaps\": [\n        {\n            \"roleId\": \"{{roleId}}\",\n            \"userRoleStatus\": \"{{userRoleStatus}}\"\n        }\n    ],\n    \"userTimeZone\": \"{{userTimeZone}}\",\n    \"userVisaStatus\": \"{{userVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Delete User by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "d702fb17-895f-47d4-a21a-09dd8f770485"
							}
						}
					],
					"id": "00959264-8446-444e-a1cc-058c209ec348",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/users/users/:userID",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"users",
								":userID"
							],
							"variable": [
								{
									"id": "7982ed95-e44b-4b95-a924-687b6a127a6d",
									"key": "userID",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get deleted user by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 404 Not Found\", function () {",
									"    pm.response.to.have.status(404);",
									"    pm.expect(pm.response.status).to.eql('Not Found');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(\"User Id \" + pm.environment.get(\"userId\") + \" not found\");",
									"    pm.expect(responseJson.success).to.be.false;",
									"});",
									"",
									"pm.environment.unset(\"userId\");"
								],
								"type": "text/javascript",
								"id": "f5778c4b-5156-47c5-bacb-4495cd8fbc4a"
							}
						}
					],
					"id": "ed4fa38d-a078-48b9-8608-3419dcf90ede",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/users/users/:userId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"users",
								":userId"
							],
							"variable": [
								{
									"id": "96e68a01-c37e-466b-9458-dbe0e2379abc",
									"key": "userId",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new user with string values as integers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 201 Created\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.expect(pm.response.status).to.eql('Created');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"     \"required\": [",
									"      \"userId\",",
									"      \"userFirstName\",",
									"      \"userLastName\",",
									"      \"userMiddleName\",",
									"      \"userPhoneNumber\",",
									"      \"userLocation\",",
									"      \"userTimeZone\",",
									"      \"userLinkedinUrl\",",
									"      \"userEduUg\",",
									"      \"userEduPg\",",
									"      \"userComments\",",
									"      \"userVisaStatus\"",
									"    ],",
									"    \"properties\": {",
									"        \"userId\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userFirstName\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userLastName\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userMiddleName\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userPhoneNumber\": {",
									"            \"type\": \"integer\"",
									"        },",
									"        \"userLocation\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userTimeZone\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userLinkedinUrl\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userEduUg\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userEduPg\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userComments\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userVisaStatus\": {",
									"            \"type\": \"string\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test4 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test5 - Validate userId starts with U",
									"pm.test(\"Auto-created userId should have U\", () => {",
									"    pm.expect(responseJson.userId).to.contain('U');",
									"});",
									"",
									"// Test6 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.userFirstName).to.be.string;",
									"    pm.expect(responseJson.userLastName).to.be.string;",
									"    pm.expect(responseJson.userMiddleName).to.be.string;",
									"    pm.expect(responseJson.userEduUg).to.be.string;",
									"    pm.expect(responseJson.userEduPg).to.be.string;",
									"    pm.expect(responseJson.userComments).to.be.string;",
									"    pm.expect(responseJson.userLinkedinUrl).to.be.string;",
									"    pm.expect(responseJson.userLocation).to.be.string;",
									"    pm.expect(responseJson.userVisaStatus).to.be.string;",
									"    pm.expect(parseInt(responseJson.userFirstName)).to.eql(pm.variables.get(\"userFirstName\"));",
									"    pm.expect(parseInt(responseJson.userLastName)).to.eql(pm.variables.get(\"userLastName\"));",
									"    pm.expect(parseInt(responseJson.userMiddleName)).to.eql(pm.variables.get(\"userMiddleName\"));",
									"    pm.expect(responseJson.userPhoneNumber).to.eql(parseInt(pm.environment.get(\"userPhoneNumber\")));",
									"    pm.expect(parseInt(responseJson.userLocation)).to.eql(pm.variables.get(\"userLocation\"));",
									"    pm.expect(responseJson.userTimeZone).to.eql(pm.variables.get(\"userTimeZone\"));",
									"    pm.expect(parseInt(responseJson.userLinkedinUrl)).to.eql(pm.variables.get(\"userLinkedinUrl\"));",
									"    pm.expect(parseInt(responseJson.userEduUg)).to.eql(pm.variables.get(\"userEduUg\"));",
									"    pm.expect(parseInt(responseJson.userEduPg)).to.eql(pm.variables.get(\"userEduPg\"));",
									"    pm.expect(parseInt(responseJson.userComments)).to.eql(pm.variables.get(\"userComments\"));",
									"    pm.expect(responseJson.userVisaStatus).to.eql(pm.variables.get(\"userVisaStatus\"));",
									"});",
									"",
									"// Set global variables from response, to be used by other requests",
									"if(responseJson)",
									"{",
									"    pm.environment.set(\"userId\", responseJson.userId);",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "7330476e-d335-4f18-89f1-3d01b5afe100"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const phoneNumber = Math.floor(Math.random() * 10000000);",
									"pm.environment.set(\"userPhoneNumber\", phoneNumber);",
									"",
									"pm.variables.set(\"userFirstName\", phoneNumber);",
									"pm.variables.set(\"userLastName\", phoneNumber);",
									"pm.variables.set(\"userMiddleName\", phoneNumber);",
									"pm.variables.set(\"userComments\", phoneNumber);",
									"pm.variables.set(\"userEduPg\", phoneNumber);",
									"pm.variables.set(\"userEduUg\", phoneNumber);",
									"pm.variables.set(\"userLinkedinUrl\", phoneNumber);",
									"pm.variables.set(\"userLocation\", phoneNumber);",
									"pm.variables.set(\"userRoleStatus\", phoneNumber);"
								],
								"type": "text/javascript",
								"id": "1e44bdd8-cc8a-4384-bfe6-1b16e1072f1a"
							}
						}
					],
					"id": "ed9cd5b4-18a5-4472-93db-be8ceb2f8fc0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userComments\": {{userComments}},\n    \"userEduPg\": {{userEduPg}},\n    \"userEduUg\": {{userEduUg}},\n    \"userFirstName\": {{userFirstName}},\n    \"userLastName\": {{userLastName}},\n    \"userLinkedinUrl\": {{userLinkedinUrl}},\n    \"userLocation\": {{userLocation}},\n    \"userMiddleName\": {{userMiddleName}},\n    \"userPhoneNumber\": {{userPhoneNumber}},\n    \"userRoleMaps\": [\n        {\n            \"roleId\": \"{{roleId}}\",\n            \"userRoleStatus\": {{userRoleStatus}}\n        }\n    ],\n    \"userTimeZone\": \"{{userTimeZone}}\",\n    \"userVisaStatus\": \"{{userVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Delete User by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.unset(\"userId\");"
								],
								"type": "text/javascript",
								"id": "fe8d4542-8d3a-44de-97ff-f0bc043e9967"
							}
						}
					],
					"id": "2540be9d-5338-4710-88a7-278b4266f8e3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/users/users/:userID",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"users",
								":userID"
							],
							"variable": [
								{
									"id": "c26bbfaa-8628-455e-9c52-5bfc8fc2e1e1",
									"key": "userID",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new user with missing phone number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(\"Phone Number is required\");",
									"    pm.expect(responseJson.success).to.be.false;",
									"});"
								],
								"type": "text/javascript",
								"id": "6c2a4010-537d-4e18-9d96-5c8be00e92dc"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "d2d43c60-f593-4817-850a-4e7d48ae543a"
							}
						}
					],
					"id": "2eb47c31-41a3-470d-8c97-57bb6979cf03",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userComments\": \"{{userComments}}\",\n    \"userEduPg\": \"{{userEduPg}}\",\n    \"userEduUg\": \"{{userEduUg}}\",\n    \"userFirstName\": \"{{userFirstName}}\",\n    \"userLastName\": \"{{userLastName}}\",\n    \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n    \"userLocation\": \"{{userLocation}}\",\n    \"userMiddleName\": \"\",\n    \"userRoleMaps\": [\n        {\n            \"roleId\": \"{{roleId}}\",\n            \"userRoleStatus\": \"{{userRoleStatus}}\"\n        }\n    ],\n    \"userTimeZone\": \"{{userTimeZone}}\",\n    \"userVisaStatus\": \"{{userVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create new user with blank phone number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(\"Phone Number is required\");",
									"    pm.expect(responseJson.success).to.be.false;",
									"});"
								],
								"type": "text/javascript",
								"id": "8e2661ce-e2a8-4fa3-968e-062c7f981072"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userPhoneNumber\", undefined);"
								],
								"type": "text/javascript",
								"id": "8a99864d-26f7-4f1a-8259-fa605a5bd293"
							}
						}
					],
					"id": "f75bb620-5637-41f7-ac3f-2305f404aa7a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userComments\": \"{{userComments}}\",\n    \"userEduPg\": \"{{userEduPg}}\",\n    \"userEduUg\": \"{{userEduUg}}\",\n    \"userFirstName\": \"{{userFirstName}}\",\n    \"userLastName\": \"{{userLastName}}\",\n    \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n    \"userLocation\": \"{{userLocation}}\",\n    \"userPhoneNumber\": {{userPhoneNumber}},\n    \"userMiddleName\": \"\",\n    \"userRoleMaps\": [\n        {\n            \"roleId\": \"{{roleId}}\",\n            \"userRoleStatus\": \"{{userRoleStatus}}\"\n        }\n    ],\n    \"userTimeZone\": \"{{userTimeZone}}\",\n    \"userVisaStatus\": \"{{userVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create new user with string phone number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(\"Phone number cannot be string\");",
									"    pm.expect(responseJson.success).to.be.false;",
									"});"
								],
								"type": "text/javascript",
								"id": "30f7451e-4ce5-44df-9e79-04e84bd2c1c2"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "73564eb7-7104-4f65-900f-290b39aea33b"
							}
						}
					],
					"id": "a63e7fb9-6f29-4130-960b-09170095a0b2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userComments\": \"{{userComments}}\",\n    \"userEduPg\": \"{{userEduPg}}\",\n    \"userEduUg\": \"{{userEduUg}}\",\n    \"userFirstName\": \"{{userFirstName}}\",\n    \"userLastName\": \"{{userLastName}}\",\n    \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n    \"userLocation\": \"{{userLocation}}\",\n    \"stringUserPhoneNumber\": \"{{stringUserPhoneNumber}}\",\n    \"userMiddleName\": \"\",\n    \"userRoleMaps\": [\n        {\n            \"roleId\": \"{{roleId}}\",\n            \"userRoleStatus\": \"{{userRoleStatus}}\"\n        }\n    ],\n    \"userTimeZone\": \"{{userTimeZone}}\",\n    \"userVisaStatus\": \"{{userVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create new user with missing role id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(\"Role Id is mandatory\");",
									"    pm.expect(responseJson.success).to.be.false;",
									"});"
								],
								"type": "text/javascript",
								"id": "af8ff473-7434-4501-ad9c-05b34b584e29"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const phoneNumber = Math.floor(Math.random() * 10000000);",
									"pm.environment.set(\"userPhoneNumber\", phoneNumber);"
								],
								"type": "text/javascript",
								"id": "07f4f7ea-9771-4a4d-aefd-4202f8b837fa"
							}
						}
					],
					"id": "c20f9f67-147f-490c-9b05-22adad49c10c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userComments\": \"{{userComments}}\",\n    \"userEduPg\": \"{{userEduPg}}\",\n    \"userEduUg\": \"{{userEduUg}}\",\n    \"userFirstName\": \"{{userFirstName}}\",\n    \"userLastName\": \"{{userLastName}}\",\n    \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n    \"userLocation\": \"{{userLocation}}\",\n    \"userMiddleName\": \"\",\n    \"userPhoneNumber\": {{userPhoneNumber}},\n    \"userRoleMaps\": [\n        {\n            \"userRoleStatus\": \"{{userRoleStatus}}\"\n        }\n    ],\n    \"userTimeZone\": \"{{userTimeZone}}\",\n    \"userVisaStatus\": \"{{userVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create new user with blank role id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(\"Role Id is mandatory\");",
									"    pm.expect(responseJson.success).to.be.false;",
									"});"
								],
								"type": "text/javascript",
								"id": "6e6c22c7-1f9c-42b0-a9de-9872f7d31219"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const phoneNumber = Math.floor(Math.random() * 10000000);",
									"pm.environment.set(\"userPhoneNumber\", phoneNumber);",
									""
								],
								"type": "text/javascript",
								"id": "042802b2-fb90-4704-9c8c-5f0a467b0cc4"
							}
						}
					],
					"id": "0beb3b05-06b3-4ece-8876-5d8327f7b94f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userComments\": \"{{userComments}}\",\n    \"userEduPg\": \"{{userEduPg}}\",\n    \"userEduUg\": \"{{userEduUg}}\",\n    \"userFirstName\": \"{{userFirstName}}\",\n    \"userLastName\": \"{{userLastName}}\",\n    \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n    \"userLocation\": \"{{userLocation}}\",\n    \"userMiddleName\": \"\",\n    \"userPhoneNumber\": {{userPhoneNumber}},\n    \"userRoleMaps\": [\n        {\n            \"roleId\": \"{{blankRoleId}}\",\n            \"userRoleStatus\": \"{{userRoleStatus}}\"\n        }\n    ],\n    \"userTimeZone\": \"{{userTimeZone}}\",\n    \"userVisaStatus\": \"{{userVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create new user with invalid role id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(\"Invalid Role id\");",
									"    pm.expect(responseJson.success).to.be.false;",
									"});"
								],
								"type": "text/javascript",
								"id": "05ec7d48-a6e9-4177-bb84-77e46c26fe50"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const phoneNumber = Math.floor(Math.random() * 10000000);",
									"pm.environment.set(\"userPhoneNumber\", phoneNumber);"
								],
								"type": "text/javascript",
								"id": "651ac7e5-13f2-47b8-bbaa-3424e6c9ab38"
							}
						}
					],
					"id": "3b2426a7-1e0c-4ed4-b0e8-3dd68904d44c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userComments\": \"{{userComments}}\",\n    \"userEduPg\": \"{{userEduPg}}\",\n    \"userEduUg\": \"{{userEduUg}}\",\n    \"userFirstName\": \"{{userFirstName}}\",\n    \"userLastName\": \"{{userLastName}}\",\n    \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n    \"userLocation\": \"{{userLocation}}\",\n    \"userMiddleName\": \"\",\n    \"userPhoneNumber\": {{userPhoneNumber}},\n    \"userRoleMaps\": [\n        {\n            \"roleId\": \"{{invalidRoleId}}\",\n            \"userRoleStatus\": \"{{userRoleStatus}}\"\n        }\n    ],\n    \"userTimeZone\": \"{{userTimeZone}}\",\n    \"userVisaStatus\": \"{{userVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create new user with integer role id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(\"Invalid Role id\");",
									"    pm.expect(responseJson.success).to.be.false;",
									"});"
								],
								"type": "text/javascript",
								"id": "151a482f-b7a9-4e86-ad3a-66123a6f4744"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const phoneNumber = Math.floor(Math.random() * 10000000);",
									"pm.environment.set(\"userPhoneNumber\", phoneNumber);"
								],
								"type": "text/javascript",
								"id": "9d1e3b2e-7cba-4007-86ba-dbcc2a6cd184"
							}
						}
					],
					"id": "192945ab-2a40-416d-ac13-bbc301578224",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userComments\": \"{{userComments}}\",\n    \"userEduPg\": \"{{userEduPg}}\",\n    \"userEduUg\": \"{{userEduUg}}\",\n    \"userFirstName\": \"{{userFirstName}}\",\n    \"userLastName\": \"{{userLastName}}\",\n    \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n    \"userLocation\": \"{{userLocation}}\",\n    \"userMiddleName\": \"\",\n    \"userPhoneNumber\": {{userPhoneNumber}},\n    \"userRoleMaps\": [\n        {\n            \"roleId\": {{integerRoleId}},\n            \"userRoleStatus\": \"{{userRoleStatus}}\"\n        }\n    ],\n    \"userTimeZone\": \"{{userTimeZone}}\",\n    \"userVisaStatus\": \"{{userVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create new user with missing role status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(\"Role Status is Mandatory\");",
									"    pm.expect(responseJson.success).to.be.false;",
									"});"
								],
								"type": "text/javascript",
								"id": "c14b513a-00cb-45a9-9f4a-8cc629f5d323"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const phoneNumber = Math.floor(Math.random() * 10000000);",
									"pm.environment.set(\"userPhoneNumber\", phoneNumber);"
								],
								"type": "text/javascript",
								"id": "981fa991-bcb7-433b-881f-fc031e01fab0"
							}
						}
					],
					"id": "d3403bc2-6cbf-4b2b-b7f4-877a46a0b7ea",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userComments\": \"{{userComments}}\",\n    \"userEduPg\": \"{{userEduPg}}\",\n    \"userEduUg\": \"{{userEduUg}}\",\n    \"userFirstName\": \"{{userFirstName}}\",\n    \"userLastName\": \"{{userLastName}}\",\n    \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n    \"userLocation\": \"{{userLocation}}\",\n    \"userMiddleName\": \"\",\n    \"userPhoneNumber\": {{userPhoneNumber}},\n    \"userRoleMaps\": [\n        {\n            \"roleId\": \"{{roleId}}\"\n        }\n    ],\n    \"userTimeZone\": \"{{userTimeZone}}\",\n    \"userVisaStatus\": \"{{userVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create new user with blank role status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(\"Role Status is Mandatory\");",
									"    pm.expect(responseJson.success).to.be.false;",
									"});"
								],
								"type": "text/javascript",
								"id": "c9aee585-86ab-4a20-bd41-8019c35f10dc"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const phoneNumber = Math.floor(Math.random() * 10000000);",
									"pm.environment.set(\"userPhoneNumber\", phoneNumber);"
								],
								"type": "text/javascript",
								"id": "1e60742b-e521-4560-a962-a08717b90667"
							}
						}
					],
					"id": "0f5695ae-95d8-4fe9-8b01-a0409282b22f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userComments\": \"{{userComments}}\",\n    \"userEduPg\": \"{{userEduPg}}\",\n    \"userEduUg\": \"{{userEduUg}}\",\n    \"userFirstName\": \"{{userFirstName}}\",\n    \"userLastName\": \"{{userLastName}}\",\n    \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n    \"userLocation\": \"{{userLocation}}\",\n    \"userMiddleName\": \"\",\n    \"userPhoneNumber\": {{userPhoneNumber}},\n    \"userRoleMaps\": [\n        {\n            \"roleId\": \"{{roleId}}\",\n            \"userRoleStatus\": \"{{blankUserRoleStatus}}\"\n        }\n    ],\n    \"userTimeZone\": \"{{userTimeZone}}\",\n    \"userVisaStatus\": \"{{userVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create new user with missing first name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(\"User First Name is cannot be null or empty\");",
									"    pm.expect(responseJson.success).to.be.false;",
									"});"
								],
								"type": "text/javascript",
								"id": "ccd2538e-0a7d-4f5a-92a5-fb25b1a2d30d"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const phoneNumber = Math.floor(Math.random() * 10000000);",
									"pm.environment.set(\"userPhoneNumber\", phoneNumber);"
								],
								"type": "text/javascript",
								"id": "20cfa4f3-669d-49ce-a865-84ef26559bfd"
							}
						}
					],
					"id": "13adccf3-6993-49bb-a674-8341e6d01706",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userComments\": \"{{userComments}}\",\n    \"userEduPg\": \"{{userEduPg}}\",\n    \"userEduUg\": \"{{userEduUg}}\",\n    \"userLastName\": \"{{userLastName}}\",\n    \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n    \"userLocation\": \"{{userLocation}}\",\n    \"userMiddleName\": \"\",\n    \"userPhoneNumber\": {{userPhoneNumber}},\n    \"userRoleMaps\": [\n        {\n            \"roleId\": \"{{roleId}}\",\n            \"userRoleStatus\": \"{{userRoleStatus}}\"\n        }\n    ],\n    \"userTimeZone\": \"{{userTimeZone}}\",\n    \"userVisaStatus\": \"{{userVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create new user with blank first name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(\"User First Name is cannot be null or empty\");",
									"    pm.expect(responseJson.success).to.be.false;",
									"});"
								],
								"type": "text/javascript",
								"id": "7904b457-e9b9-4171-be1b-1a6050e7121a"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const phoneNumber = Math.floor(Math.random() * 10000000);",
									"pm.environment.set(\"userPhoneNumber\", phoneNumber);"
								],
								"type": "text/javascript",
								"id": "1d02f09c-3eba-4e34-bb36-ef43250a0435"
							}
						}
					],
					"id": "ad9a1edc-59cb-497d-8e21-71d9025746a4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userComments\": \"{{userComments}}\",\n    \"userEduPg\": \"{{userEduPg}}\",\n    \"userEduUg\": \"{{userEduUg}}\",\n    \"userLastName\": \"{{userLastName}}\",\n    \"userFirstName\": \"{{blankUserFirstName}}\",\n    \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n    \"userLocation\": \"{{userLocation}}\",\n    \"userMiddleName\": \"\",\n    \"userPhoneNumber\": {{userPhoneNumber}},\n    \"userRoleMaps\": [\n        {\n            \"roleId\": \"{{roleId}}\",\n            \"userRoleStatus\": \"{{userRoleStatus}}\"\n        }\n    ],\n    \"userTimeZone\": \"{{userTimeZone}}\",\n    \"userVisaStatus\": \"{{userVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create new user with missing last name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(\"User Last Name is cannot be null or empty\");",
									"    pm.expect(responseJson.success).to.be.false;",
									"});"
								],
								"type": "text/javascript",
								"id": "23ed511c-4d20-4fdf-8e33-31383f49b2ad"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const phoneNumber = Math.floor(Math.random() * 10000000);",
									"pm.environment.set(\"userPhoneNumber\", phoneNumber);"
								],
								"type": "text/javascript",
								"id": "bc8d741c-fe94-4226-a97f-ac7cf60aec4d"
							}
						}
					],
					"id": "b51b6a7d-51a0-4b4c-af7a-475fe6a504b7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userComments\": \"{{userComments}}\",\n    \"userEduPg\": \"{{userEduPg}}\",\n    \"userEduUg\": \"{{userEduUg}}\",\n    \"userFirstName\": \"{{userFirstName}}\",\n    \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n    \"userLocation\": \"{{userLocation}}\",\n    \"userMiddleName\": \"\",\n    \"userPhoneNumber\": {{userPhoneNumber}},\n    \"userRoleMaps\": [\n        {\n            \"roleId\": \"{{roleId}}\",\n            \"userRoleStatus\": \"{{userRoleStatus}}\"\n        }\n    ],\n    \"userTimeZone\": \"{{userTimeZone}}\",\n    \"userVisaStatus\": \"{{userVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create new user with blank last name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(\"User Last Name is cannot be null or empty\");",
									"    pm.expect(responseJson.success).to.be.false;",
									"});"
								],
								"type": "text/javascript",
								"id": "33a590cb-d093-4228-b4b4-9758ee3de75b"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const phoneNumber = Math.floor(Math.random() * 10000000);",
									"pm.environment.set(\"userPhoneNumber\", phoneNumber);"
								],
								"type": "text/javascript",
								"id": "9b47d35d-b7e5-4cc6-87bc-ca0eb630df46"
							}
						}
					],
					"id": "c50e786c-df70-4388-a508-2d1019b4743c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userComments\": \"{{userComments}}\",\n    \"userEduPg\": \"{{userEduPg}}\",\n    \"userEduUg\": \"{{userEduUg}}\",\n    \"userFirstName\": \"{{userFirstName}}\",\n    \"userLastName\": \"{{blankUserLastName}}\",\n    \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n    \"userLocation\": \"{{userLocation}}\",\n    \"userMiddleName\": \"\",\n    \"userPhoneNumber\": {{userPhoneNumber}},\n    \"userRoleMaps\": [\n        {\n            \"roleId\": \"{{roleId}}\",\n            \"userRoleStatus\": \"{{userRoleStatus}}\"\n        }\n    ],\n    \"userTimeZone\": \"{{userTimeZone}}\",\n    \"userVisaStatus\": \"{{userVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create new user with missing time zone",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(\"Failed to create user, as 'TimeZone' is invalid !! \");",
									"    pm.expect(responseJson.success).to.be.false;",
									"});"
								],
								"type": "text/javascript",
								"id": "aa7d0b20-946b-403c-8784-c7f6fd3b1703"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const phoneNumber = Math.floor(Math.random() * 10000000);",
									"pm.environment.set(\"userPhoneNumber\", phoneNumber);"
								],
								"type": "text/javascript",
								"id": "ac8e91fb-c438-4bb9-a508-c2511b270ec5"
							}
						}
					],
					"id": "62a149c6-a728-4ea8-a555-b4846b0bd690",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userComments\": \"{{userComments}}\",\n    \"userEduPg\": \"{{userEduPg}}\",\n    \"userEduUg\": \"{{userEduUg}}\",\n    \"userFirstName\": \"{{userFirstName}}\",\n    \"userLastName\": \"{{userLastName}}\",\n    \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n    \"userLocation\": \"{{userLocation}}\",\n    \"userMiddleName\": \"\",\n    \"userPhoneNumber\": {{userPhoneNumber}},\n    \"userRoleMaps\": [\n        {\n            \"roleId\": \"{{roleId}}\",\n            \"userRoleStatus\": \"{{userRoleStatus}}\"\n        }\n    ],\n    \"userVisaStatus\": \"{{userVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create new user with blank time zone",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(\"Failed to create user, as 'TimeZone' is invalid !! \");",
									"    pm.expect(responseJson.success).to.be.false;",
									"});"
								],
								"type": "text/javascript",
								"id": "c84886f6-4f2b-4797-ab11-2a76c3539e78"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const phoneNumber = Math.floor(Math.random() * 10000000);",
									"pm.environment.set(\"userPhoneNumber\", phoneNumber);"
								],
								"type": "text/javascript",
								"id": "8495d793-942e-4079-b99c-0eb0f82a03e0"
							}
						}
					],
					"id": "069cef98-3929-4acb-97a3-2a0293c0bf65",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userComments\": \"{{userComments}}\",\n    \"userEduPg\": \"{{userEduPg}}\",\n    \"userEduUg\": \"{{userEduUg}}\",\n    \"userFirstName\": \"{{userFirstName}}\",\n    \"userLastName\": \"{{userLastName}}\",\n    \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n    \"userLocation\": \"{{userLocation}}\",\n    \"userMiddleName\": \"\",\n    \"userPhoneNumber\": {{userPhoneNumber}},\n    \"userRoleMaps\": [\n        {\n            \"roleId\": \"{{roleId}}\",\n            \"userRoleStatus\": \"{{userRoleStatus}}\"\n        }\n    ],\n    \"userTimeZone\": \"{{blankUserTimeZone}}\",\n    \"userVisaStatus\": \"{{userVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create new user with invalid time zone",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(\"Failed to create user, as 'TimeZone' is invalid !! \");",
									"    pm.expect(responseJson.success).to.be.false;",
									"});"
								],
								"type": "text/javascript",
								"id": "20ce12bb-cfc8-4a41-b475-734e8de468e2"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const phoneNumber = Math.floor(Math.random() * 10000000);",
									"pm.environment.set(\"userPhoneNumber\", phoneNumber);"
								],
								"type": "text/javascript",
								"id": "c283703e-aa69-446b-b2ea-fffae7298e70"
							}
						}
					],
					"id": "a2f9e655-75d8-4253-9d8f-2a3ccf00e035",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userComments\": \"{{userComments}}\",\n    \"userEduPg\": \"{{userEduPg}}\",\n    \"userEduUg\": \"{{userEduUg}}\",\n    \"userFirstName\": \"{{userFirstName}}\",\n    \"userLastName\": \"{{userLastName}}\",\n    \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n    \"userLocation\": \"{{userLocation}}\",\n    \"userMiddleName\": \"\",\n    \"userPhoneNumber\": {{userPhoneNumber}},\n    \"userRoleMaps\": [\n        {\n            \"roleId\": \"{{roleId}}\",\n            \"userRoleStatus\": \"{{userRoleStatus}}\"\n        }\n    ],\n    \"userTimeZone\": \"{{invalidUserTimeZone}}\",\n    \"userVisaStatus\": \"{{userVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create new user with integer time zone",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(\"Failed to create user, as 'TimeZone' is invalid !! \");",
									"    pm.expect(responseJson.success).to.be.false;",
									"});"
								],
								"type": "text/javascript",
								"id": "7610f867-b5e4-4e23-8977-3bc4978a840e"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const phoneNumber = Math.floor(Math.random() * 10000000);",
									"pm.environment.set(\"userPhoneNumber\", phoneNumber);",
									"",
									"pm.variables.set(\"userTimeZone\", phoneNumber);"
								],
								"type": "text/javascript",
								"id": "f6da92ed-2588-498f-8112-2a8b637194ed"
							}
						}
					],
					"id": "86791a9a-d6d4-45ab-be94-e309c01d3e4e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userComments\": \"{{userComments}}\",\n    \"userEduPg\": \"{{userEduPg}}\",\n    \"userEduUg\": \"{{userEduUg}}\",\n    \"userFirstName\": \"{{userFirstName}}\",\n    \"userLastName\": \"{{userLastName}}\",\n    \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n    \"userLocation\": \"{{userLocation}}\",\n    \"userMiddleName\": \"\",\n    \"userPhoneNumber\": {{userPhoneNumber}},\n    \"userRoleMaps\": [\n        {\n            \"roleId\": \"{{roleId}}\",\n            \"userRoleStatus\": \"{{userRoleStatus}}\"\n        }\n    ],\n    \"userTimeZone\": {{userTimeZone}},\n    \"userVisaStatus\": \"{{userVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create new user with missing visa status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(\"Failed to create user, as 'Visa Status' is invalid !! \");",
									"    pm.expect(responseJson.success).to.be.false;",
									"});"
								],
								"type": "text/javascript",
								"id": "28dcd76d-eac3-46ea-a30c-574524761163"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const phoneNumber = Math.floor(Math.random() * 10000000);",
									"pm.environment.set(\"userPhoneNumber\", phoneNumber);"
								],
								"type": "text/javascript",
								"id": "a78430bd-96a4-4bfd-bd9f-00096e6acf54"
							}
						}
					],
					"id": "d6f604b7-b6ce-480d-8992-399ad0c68db9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userComments\": \"{{userComments}}\",\n    \"userEduPg\": \"{{userEduPg}}\",\n    \"userEduUg\": \"{{userEduUg}}\",\n    \"userFirstName\": \"{{userFirstName}}\",\n    \"userLastName\": \"{{userLastName}}\",\n    \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n    \"userLocation\": \"{{userLocation}}\",\n    \"userMiddleName\": \"\",\n    \"userPhoneNumber\": {{userPhoneNumber}},\n    \"userRoleMaps\": [\n        {\n            \"roleId\": \"{{roleId}}\",\n            \"userRoleStatus\": \"{{userRoleStatus}}\"\n        }\n    ],\n    \"userTimeZone\": \"{{userTimeZone}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create new user with blank visa status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(\"Failed to create user, as 'Visa Status' is invalid !! \");",
									"    pm.expect(responseJson.success).to.be.false;",
									"});"
								],
								"type": "text/javascript",
								"id": "9a1659ec-9694-49f2-86ea-3774c8baafec"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const phoneNumber = Math.floor(Math.random() * 10000000);",
									"pm.environment.set(\"userPhoneNumber\", phoneNumber);"
								],
								"type": "text/javascript",
								"id": "45e4c55f-bc7b-43b7-9b08-796ceb53a260"
							}
						}
					],
					"id": "7b066c57-9b9b-4964-937c-0444ac19bc31",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userComments\": \"{{userComments}}\",\n    \"userEduPg\": \"{{userEduPg}}\",\n    \"userEduUg\": \"{{userEduUg}}\",\n    \"userFirstName\": \"{{userFirstName}}\",\n    \"userLastName\": \"{{userLastName}}\",\n    \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n    \"userLocation\": \"{{userLocation}}\",\n    \"userMiddleName\": \"\",\n    \"userPhoneNumber\": {{userPhoneNumber}},\n    \"userRoleMaps\": [\n        {\n            \"roleId\": \"{{roleId}}\",\n            \"userRoleStatus\": \"{{userRoleStatus}}\"\n        }\n    ],\n    \"userTimeZone\": \"{{userTimeZone}}\",\n    \"userVisaStatus\": \"{{blankUserVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create new user with invalid visa status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(\"Failed to create user, as 'Visa Status' is invalid !! \");",
									"    pm.expect(responseJson.success).to.be.false;",
									"});"
								],
								"type": "text/javascript",
								"id": "7f8762fa-7c33-407f-ad9c-727659b82e2c"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const phoneNumber = Math.floor(Math.random() * 10000000);",
									"pm.environment.set(\"userPhoneNumber\", phoneNumber);"
								],
								"type": "text/javascript",
								"id": "20b597d3-041d-4b32-9f13-522eb41e9991"
							}
						}
					],
					"id": "24c19996-cab5-431c-9867-d21dd90157a8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userComments\": \"{{userComments}}\",\n    \"userEduPg\": \"{{userEduPg}}\",\n    \"userEduUg\": \"{{userEduUg}}\",\n    \"userFirstName\": \"{{userFirstName}}\",\n    \"userLastName\": \"{{userLastName}}\",\n    \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n    \"userLocation\": \"{{userLocation}}\",\n    \"userMiddleName\": \"\",\n    \"userPhoneNumber\": {{userPhoneNumber}},\n    \"userRoleMaps\": [\n        {\n            \"roleId\": \"{{roleId}}\",\n            \"userRoleStatus\": \"{{userRoleStatus}}\"\n        }\n    ],\n    \"userTimeZone\": \"{{userTimeZone}}\",\n    \"userVisaStatus\": \"{{invalidUserVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create new user with integer visa status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(\"Failed to create user, as 'Visa Status' is invalid !! \");",
									"    pm.expect(responseJson.success).to.be.false;",
									"});"
								],
								"type": "text/javascript",
								"id": "0d15597e-3f49-4c2d-8803-605d8fafd832"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const phoneNumber = Math.floor(Math.random() * 10000000);",
									"pm.environment.set(\"userPhoneNumber\", phoneNumber);",
									"",
									"pm.variables.set(\"userVisaStatus\", phoneNumber);"
								],
								"type": "text/javascript",
								"id": "d063b852-9573-4056-847a-5b4c40866c3b"
							}
						}
					],
					"id": "0fbd1f6d-6b19-456d-9782-6fcc4b8a8a62",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userComments\": \"{{userComments}}\",\n    \"userEduPg\": \"{{userEduPg}}\",\n    \"userEduUg\": \"{{userEduUg}}\",\n    \"userFirstName\": \"{{userFirstName}}\",\n    \"userLastName\": \"{{userLastName}}\",\n    \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n    \"userLocation\": \"{{userLocation}}\",\n    \"userMiddleName\": \"\",\n    \"userPhoneNumber\": {{userPhoneNumber}},\n    \"userRoleMaps\": [\n        {\n            \"roleId\": \"{{roleId}}\",\n            \"userRoleStatus\": \"{{userRoleStatus}}\"\n        }\n    ],\n    \"userTimeZone\": \"{{userTimeZone}}\",\n    \"userVisaStatus\": {{userVisaStatus}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				}
			],
			"id": "c1b43c8e-a2c0-4a0f-84f2-7a52c9caac96"
		},
		{
			"name": "Batch",
			"item": [
				{
					"name": "Create New Program for Batch",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ffff8eda-f225-42b9-8b81-1012abbf264d",
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 201\", ()=>{\r",
									"pm.response.to.have.status(201);\r",
									"})\r",
									"\r",
									"pm.test(\"Check Status Text\", ()=>{\r",
									"    pm.response.to.have.status('Created');\r",
									"})\r",
									"\r",
									"//Validate Header\r",
									"pm.test(\"Content-Type header is present\", ()=>{\r",
									"pm.response.to.have.header(\"Content-Type\");\r",
									"})\r",
									"\r",
									"//Created variable to strore response\r",
									"const response = pm.response.json();\r",
									"\r",
									"console.log(response)\r",
									"\r",
									"//Setting enviornment variable \r",
									"pm.environment.set(\"programId\", response.programId);\r",
									"pm.environment.set(\"programName\", response.programName);\r",
									"\r",
									"\r",
									"//Validating Fields\r",
									"pm.test(\"Test data of the response\", ()=>{\r",
									"pm.expect(response).to.be.an(\"object\");\r",
									"pm.expect(response.programId).to.be.eql(pm.variables.get(\"programId\"));\r",
									"pm.expect(response.programName).to.eql(pm.variables.get(\"programName\"));\r",
									"pm.expect(response.programStatus).to.eql(pm.variables.get(\"programStatus\"));\r",
									"});\r",
									"\r",
									"//Validating response\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"programId\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"creationTime\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"lastModTime\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"programId\",\r",
									"    \"programName\",\r",
									"    \"programDescription\",\r",
									"    \"programStatus\",\r",
									"    \"creationTime\",\r",
									"    \"lastModTime\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Schema is valid\", ()=>{\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "15449f76-4869-4a02-811e-c007e44ed381",
								"exec": [
									"var CrprogramName = \"Jun23-APICollectors-SDET\" + pm.variables.replaceIn('{{$randomInt}}');\r",
									"pm.environment.set(\"programName\",CrprogramName);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "f70e9d8d-d58d-42fa-b924-18301b5a4b2e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\":\"{{programDescription}}\",\r\n  \"programName\":  \"{{programName}}\",\r\n  \"programStatus\": \"{{programStatus}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "Create New Batch",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bc8f931c-ed1e-4f74-8682-436f63e739a9",
								"exec": [
									"//validate status code\r",
									"pm.test(\"Status code is 201\", ()=> {\r",
									"pm.response.to.have.status(201);\r",
									"})\r",
									"\r",
									"pm.test(\"Check Status Text\", ()=>{\r",
									"    pm.response.to.have.status('Created');\r",
									"})\r",
									"\r",
									"//Validate Header\r",
									"pm.test(\"Content-Type header is present\", ()=>{\r",
									"pm.response.to.have.header(\"Content-Type\");\r",
									"})\r",
									"\r",
									"//create variable for response body\r",
									"const response = pm.response.json();\r",
									"\r",
									"console.log(response)\r",
									"\r",
									"//Create enviornment variables\r",
									"pm.environment.set(\"batchId\", response.batchId);\r",
									"pm.environment.set(\"batchName\", response.batchName);\r",
									"\r",
									"//Validating Fields\r",
									"pm.test(\"Test data of the response\", ()=>{\r",
									"pm.expect(response.programId).to.be.eql(pm.variables.get(\"programId\"));\r",
									"pm.expect(response.programName).to.be.eql(pm.variables.get(\"programName\"));\r",
									"pm.expect(response.batchStatus).to.be.eql(pm.variables.get(\"batchStatus\"));\r",
									"pm.expect(response.batchName).to.be.eql(pm.variables.get(\"batchName\"));\r",
									"pm.expect(response.batchDescription).to.be.eql(pm.variables.get(\"batchDescription\"));\r",
									"pm.expect(response.batchId).to.be.eql(pm.variables.get(\"batchId\"));\r",
									"});\r",
									"\r",
									"console.log;\r",
									"\r",
									"//Validating response\r",
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-06/schema#\",\r",
									"    \"$ref\": \"#/definitions/Welcome10\",\r",
									"    \"definitions\": {\r",
									"        \"Welcome10\": {\r",
									"            \"type\": \"object\",\r",
									"            \"additionalProperties\": false,\r",
									"            \"properties\": {\r",
									"                \"batchId\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"batchName\": {\r",
									"                    \"type\": \"string\",\r",
									"                    \"format\": \"integer\"\r",
									"                },\r",
									"                \"batchDescription\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"batchStatus\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"batchNoOfClasses\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"programId\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"programName\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"batchDescription\",\r",
									"                \"batchId\",\r",
									"                \"batchName\",\r",
									"                \"batchNoOfClasses\",\r",
									"                \"batchStatus\",\r",
									"                \"programId\",\r",
									"                \"programName\"\r",
									"            ],\r",
									"            \"title\": \"Welcome10\"\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.test(\"Schema is valid\", ()=>{\r",
									"pm.expect(tv4.validate(response,schema)).to.be.true\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c52e305e-075d-4df5-b3b2-50e4ff4f0cca",
								"exec": [
									"var CrbatchName = pm.variables.get(\"programName\")+\"-SDET-\" + pm.variables.replaceIn('{{$randomInt}}');\r",
									"pm.environment.set(\"batchName\",CrbatchName);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "2afc6240-e460-4737-a4dd-1515c75aae48",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\":{{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": \"{{programId}}\"\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Get All Batches",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dc21a871-6fab-451a-b89b-e664d12b7eb7",
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 200\", ()=>{\r",
									"pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"\r",
									"//Validate Header\r",
									"pm.test(\"Content-Type header is present\", ()=>{\r",
									"pm.response.to.have.header(\"Content-Type\");\r",
									"})\r",
									"\r",
									"\r",
									"//Validating response\r",
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-06/schema#\",\r",
									"    \"$ref\": \"#/definitions/Welcome10\",\r",
									"    \"definitions\": {\r",
									"        \"Welcome10\": {\r",
									"            \"type\": \"object\",\r",
									"            \"additionalProperties\": false,\r",
									"            \"properties\": {\r",
									"                \"batchId\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"batchName\": {\r",
									"                    \"type\": \"string\",\r",
									"                    \"format\": \"integer\"\r",
									"                },\r",
									"                \"batchDescription\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"batchStatus\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"batchNoOfClasses\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"programId\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"programName\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"batchDescription\",\r",
									"                \"batchId\",\r",
									"                \"batchName\",\r",
									"                \"batchNoOfClasses\",\r",
									"                \"batchStatus\",\r",
									"                \"programId\",\r",
									"                \"programName\"\r",
									"            ],\r",
									"            \"title\": \"Welcome10\"\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Schema is valid\", ()=>{\r",
									"pm.expect(tv4.validate(pm.response,schema))\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "d536f21c-045c-47a6-83bf-8f18063105f9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Create Duplicate Batch",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bc8f931c-ed1e-4f74-8682-436f63e739a9",
								"exec": [
									"//validate status code\r",
									"pm.test(\"Status code is 400\", ()=> {\r",
									"pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Program \" + pm.environment.get(\"programName\") + \" with Batch-\" + pm.environment.get(\"batchName\") + \" already exists: ; Please give a different batch Name or Choose a different Program\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "843fd8f1-e3f2-4bf1-bd35-bd39db80ce1e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\":{{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": \"{{programId}}\"\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Batch without BatchName",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bc8f931c-ed1e-4f74-8682-436f63e739a9",
								"exec": [
									"//validate status code\r",
									"pm.test(\"Status code is 400\", ()=> {\r",
									"pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Body matches string\", () => {\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Batch Name is mandatory\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "4d86d2ab-be8d-43bb-af0c-b4237d757b11",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchNoOfClasses\":{{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": \"{{programId}}\"\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Batch with integer BatchName",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bc8f931c-ed1e-4f74-8682-436f63e739a9",
								"exec": [
									"//validate status code\r",
									"pm.test(\"Status code is 201\", ()=> {\r",
									"pm.response.to.have.status(201);\r",
									"})\r",
									"\r",
									"//create variable for response body\r",
									"const response = pm.response.json();\r",
									"\r",
									"//Create enviornment variables\r",
									"pm.environment.set(\"batchId1\", response.batchId);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ab83dde0-6069-4e32-b44b-d3510719f9ff",
								"exec": [
									"var NumbatchName = pm.variables.replaceIn('{{$randomInt}}');\r",
									"pm.environment.set(\"IntbatchName\",NumbatchName);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "07b451f5-3224-4953-8af3-8dd644136df9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchName\":{{IntbatchName}} ,\r\n  \"batchNoOfClasses\":{{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": \"{{programId}}\"\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Delete integer Batch name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4cb75479-8e4b-4a15-9a17-b3b5851d1208",
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 200\", ()=>{\r",
									"pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.text()).to.include(\" deleted Successfully\");\r",
									"});\r",
									"\r",
									"pm.environment.unset(\"batchId1\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "2fb46813-084c-40cd-874a-f661a01575c0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURL}}/batches/{{batchId1}}"
					},
					"response": []
				},
				{
					"name": "Batch without ProgramId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bc8f931c-ed1e-4f74-8682-436f63e739a9",
								"exec": [
									"//validate status code\r",
									"pm.test(\"Status code is 400\", ()=> {\r",
									"pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.json().message).to.eql(\" ProgramId field is needed; It should be a positive number \");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "0e26e68a-8fa7-4bd7-9c60-fd09048ece25",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\":{{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\"\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Batch negative ProgramId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bc8f931c-ed1e-4f74-8682-436f63e739a9",
								"exec": [
									"//validate status code\r",
									"pm.test(\"Status code is 404\", ()=> {\r",
									"pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Program not found with Id : \" + pm.variables.get(\"NegprogramId\") + \" \");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "465da949-4ddb-40ce-a015-925410a8e191",
								"exec": [
									"pm.variables.set(\"NegprogramId\", -3);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5848ee4f-f5a3-4e40-bd5e-ca7c25938fe0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\":{{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": {{NegprogramId}}\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Batch without Batch Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bc8f931c-ed1e-4f74-8682-436f63e739a9",
								"exec": [
									"//validate status code\r",
									"pm.test(\"Status code is 400\", ()=> {\r",
									"pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Batch status is needed\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "11880d81-0e8d-4874-be2a-dcf5429eb01c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\":{{batchNoOfClasses}},\r\n  \"programId\": \"{{programId}}\"\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Batch with integer Batch Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bc8f931c-ed1e-4f74-8682-436f63e739a9",
								"exec": [
									"//validate status code\r",
									"pm.test(\"Status code is 201\", ()=> {\r",
									"pm.response.to.have.status(201);\r",
									"})\r",
									"\r",
									"//create variable for response body\r",
									"const response = pm.response.json();\r",
									"\r",
									"//Create enviornment variables\r",
									"pm.environment.set(\"batchId1\", response.batchId);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "04d838e2-f428-41d7-8001-c46ef8b81672",
								"exec": [
									"var NbatchName = pm.variables.get(\"programName\")+\"-SDET-\" + pm.variables.replaceIn('{{$randomInt}}');\r",
									"pm.environment.set(\"NewbatchName\",NbatchName);\r",
									"\r",
									"var NbatchStatus = pm.variables.replaceIn('{{$randomInt}}');\r",
									"pm.environment.set(\"NewbatchStatus\",NbatchStatus);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "0f9855da-2a36-4718-81fa-a614c5cd93af",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchName\": \"{{NewbatchName}}\",\r\n  \"batchNoOfClasses\":{{batchNoOfClasses}},\r\n  \"batchStatus\": {{NewbatchStatus}},\r\n  \"programId\": \"{{programId}}\"\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Delete integer Batch status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4cb75479-8e4b-4a15-9a17-b3b5851d1208",
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 200\", ()=>{\r",
									"pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.text()).to.include(\" deleted Successfully\");\r",
									"});\r",
									"\r",
									"pm.environment.unset(\"batchId1\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b41d2d0a-8528-4228-b983-2a055c24f980",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURL}}/batches/{{batchId1}}"
					},
					"response": []
				},
				{
					"name": "Batch without NoOfClasses",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bc8f931c-ed1e-4f74-8682-436f63e739a9",
								"exec": [
									"//validate status code\r",
									"pm.test(\"Status code is 400\", ()=> {\r",
									"pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.json().message).to.eql(\" No of Classes is needed; It should be a positive number \");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "56f7e2b1-2bfe-44ab-8d19-4247cdfcd1d7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": \"{{programId}}\"\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Batch with String NoOfClasses",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bc8f931c-ed1e-4f74-8682-436f63e739a9",
								"exec": [
									"//validate status code\r",
									"pm.test(\"Status code is 400\", ()=> {\r",
									"pm.response.to.have.status(400);\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b6e55aa6-ca05-48c6-aa8a-f1670c041059",
								"exec": [
									"pm.variables.set(\"StringNoOfClasses\", \"three\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "85ea863f-c616-4437-a469-7d8af7811061",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\":\"{{StringNoOfClasses}}\",\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": \"{{programId}}\"\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Batch negative NoOfClasses",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bc8f931c-ed1e-4f74-8682-436f63e739a9",
								"exec": [
									"//validate status code\r",
									"pm.test(\"Status code is 400\", ()=> {\r",
									"pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.json().message).to.eql(\" No of Classes is needed; It should be a positive number \");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3f63e5a6-ed55-4e80-85aa-3e8511087c85",
								"exec": [
									"pm.variables.set(\"NegNoOfClasses\", -3);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "38283ec1-d97e-4655-b364-e08124d77d72",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\":{{NegNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": \"{{programId}}\"\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Get Batche by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dc21a871-6fab-451a-b89b-e664d12b7eb7",
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 200\", ()=>{\r",
									"pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"//Created variable to strore response\r",
									"const response = pm.response.json();\r",
									"\r",
									"//Validating Fields\r",
									"pm.test(\"Test data type of the response\", ()=>{\r",
									"pm.expect(response).to.be.an(\"object\");\r",
									"pm.expect(response.batchId).to.be.an(\"number\");\r",
									"pm.expect(response.batchName).to.be.an(\"string\");\r",
									"pm.expect(response.batchDescription).to.be.an(\"string\");\r",
									"pm.expect(response.batchNoOfClasses).to.be.an(\"number\");\r",
									"pm.expect(response.batchStatus).to.be.an(\"string\");\r",
									"pm.expect(response.programId).to.be.an(\"number\");\r",
									"pm.expect(response.programName).to.be.an(\"string\");\r",
									"});\r",
									"\r",
									"//Validating response\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchId\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"batchName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchNoOfClasses\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"programId\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"batchId\",\r",
									"    \"batchName\",\r",
									"    \"batchDescription\",\r",
									"    \"batchStatus\",\r",
									"    \"batchNoOfClasses\",\r",
									"    \"programId\",\r",
									"    \"programName\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Schema is valid\", ()=>{\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "4db7174e-1d35-4dee-9a84-ec15bbac6a50",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/batches/batchId/{{batchId}}"
					},
					"response": []
				},
				{
					"name": "Get Batche by Invalid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dc21a871-6fab-451a-b89b-e664d12b7eb7",
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 404\", ()=>{\r",
									"pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Batch not found with Id : \" +pm.variables.get(\"InvalidBatchId\") +\" \");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "47741157-7fd0-4cc1-8d4a-50b22134c063",
								"exec": [
									"pm.variables.set(\"InvalidBatchId\", 0);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "6a3e1bd2-c0e5-466f-bb4e-1ef32f14304b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/batches/batchId/:batchId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"batches",
								"batchId",
								":batchId"
							],
							"variable": [
								{
									"key": "batchId",
									"value": "{{InvalidBatchId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Batche by name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dc21a871-6fab-451a-b89b-e664d12b7eb7",
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 200\", ()=>{\r",
									"pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"//Validating response\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"batchId\": {\r",
									"        \"type\": \"number\"\r",
									"      },\r",
									"      \"batchName\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"batchDescription\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"batchStatus\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"batchNoOfClasses\": {\r",
									"        \"type\": \"number\"\r",
									"      },\r",
									"      \"programId\": {\r",
									"        \"type\": \"number\"\r",
									"      },\r",
									"      \"programName\": {\r",
									"        \"type\": \"string\"\r",
									"      }\r",
									"    },\r",
									"    \"required\": [\r",
									"      \"batchId\",\r",
									"      \"batchName\",\r",
									"      \"batchDescription\",\r",
									"      \"batchStatus\",\r",
									"      \"batchNoOfClasses\",\r",
									"      \"programId\",\r",
									"      \"programName\"\r",
									"    ]\r",
									"  }\r",
									"}\r",
									"\r",
									"pm.test(\"Schema is valid\", ()=>{\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "c393951a-cf59-451b-9f90-ae0446508813",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/batches/batchName/{{batchName}}"
					},
					"response": []
				},
				{
					"name": "Get Batche by Invalid name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dc21a871-6fab-451a-b89b-e664d12b7eb7",
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 404\", ()=>{\r",
									"pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.json().message).to.eql(\"programBatch with id \" +pm.variables.get(\"InvalidBatchName\") +\" not found\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b93a4272-5f8b-4526-89f5-c4367230e5af",
								"exec": [
									"pm.variables.set(\"InvalidBatchName\", \"RRR\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "4b3b0374-e19a-45a2-9ea0-d9c6bae502f3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/batches/batchName/:batchName",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"batches",
								"batchName",
								":batchName"
							],
							"variable": [
								{
									"key": "batchName",
									"value": "{{InvalidBatchName}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Batche by ProgramId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dc21a871-6fab-451a-b89b-e664d12b7eb7",
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 200\", ()=>{\r",
									"pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"\r",
									"//Validating response\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"batchId\": {\r",
									"        \"type\": \"number\"\r",
									"      },\r",
									"      \"batchName\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"batchDescription\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"batchStatus\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"batchNoOfClasses\": {\r",
									"        \"type\": \"number\"\r",
									"      },\r",
									"      \"programId\": {\r",
									"        \"type\": \"number\"\r",
									"      },\r",
									"      \"programName\": {\r",
									"        \"type\": \"string\"\r",
									"      }\r",
									"    },\r",
									"    \"required\": [\r",
									"      \"batchId\",\r",
									"      \"batchName\",\r",
									"      \"batchDescription\",\r",
									"      \"batchStatus\",\r",
									"      \"batchNoOfClasses\",\r",
									"      \"programId\",\r",
									"      \"programName\"\r",
									"    ]\r",
									"  }\r",
									"}\r",
									"\r",
									"pm.test(\"Schema is valid\", ()=>{\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ee89893f-0ae8-471c-b221-59075ba9bfe0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/batches/program/{{programId}}"
					},
					"response": []
				},
				{
					"name": "Get Batche by Invalid ProgramId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dc21a871-6fab-451a-b89b-e664d12b7eb7",
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 404\", ()=>{\r",
									"pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.json().message).to.eql(\"batch with programId \" +pm.variables.get(\"InvalidProgramId\") +\" not found\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "dec35b77-fb3a-47de-b1a5-e7f75e2d9c5a",
								"exec": [
									"pm.variables.set(\"InvalidProgramId\", 0);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "12852019-7574-494d-ab29-7fe7b6ca38b2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/batches/program/:programId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"batches",
								"program",
								":programId"
							],
							"variable": [
								{
									"key": "programId",
									"value": "{{InvalidProgramId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Batch",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e59380c9-206e-4f75-bd76-45b77dae9abf",
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 200\", ()=>{\r",
									"pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"console.log(response)\r",
									"\r",
									"//Validating Fields\r",
									"pm.test(\"Test data of the response\", ()=>{\r",
									"pm.expect(response.programId).to.be.eql(pm.variables.get(\"programId\"));\r",
									"pm.expect(response.programName).to.be.eql(pm.variables.get(\"programName\"));\r",
									"pm.expect(response.batchStatus).to.be.eql(pm.variables.get(\"UpdtbatchStatus\"));\r",
									"pm.expect(response.batchName).to.be.eql(pm.variables.get(\"UpdtbatchName\"));\r",
									"pm.expect(response.batchDescription).to.be.eql(pm.variables.get(\"UpdtbatchDescription\"));\r",
									"pm.expect(response.batchId).to.be.eql(pm.variables.get(\"batchId\"));\r",
									"});\r",
									"\r",
									"//Validating response\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchId\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"batchName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchNoOfClasses\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"programId\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"batchId\",\r",
									"    \"batchName\",\r",
									"    \"batchDescription\",\r",
									"    \"batchStatus\",\r",
									"    \"batchNoOfClasses\",\r",
									"    \"programId\",\r",
									"    \"programName\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Schema is valid\", ()=>{\r",
									"pm.expect(tv4.validate(response,schema)).to.be.true\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3211508e-c24e-4ba7-af2e-0329633f7efd",
								"exec": [
									"var UpbatchName = pm.variables.get(\"programName\")+\"-SDET-\" + pm.variables.replaceIn('{{$randomInt}}');\r",
									"pm.environment.set(\"UpdtbatchName\",UpbatchName);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "cf8159cb-48bf-43b1-8863-7164d7a3ea39",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{UpdtbatchDescription}}\",\r\n  \"batchId\": {{batchId}},\r\n  \"batchName\": \"{{UpdtbatchName}}\",\r\n  \"batchNoOfClasses\": {{UpdtbatchNoOfClasses}},\r\n  \"batchStatus\": \"{{UpdtbatchStatus}}\",\r\n  \"programId\": {{programId}},\r\n  \"programName\": \"{{programName}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches/{{batchId}}"
					},
					"response": []
				},
				{
					"name": "Update Batch without programID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e59380c9-206e-4f75-bd76-45b77dae9abf",
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 400\", ()=>{\r",
									"pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.json().message).to.eql(\" ProgramId field is needed; It should be a positive number \");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3211508e-c24e-4ba7-af2e-0329633f7efd",
								"exec": [
									"// var UpbatchName = pm.variables.get(\"programName\")+\"-SDET-\" + pm.variables.replaceIn('{{$randomInt}}');\r",
									"// pm.environment.set(\"UpdtbatchName\",UpbatchName);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "28e87bb7-c550-42dd-a3af-25b05239edc4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{UpdtbatchDescription}}\",\r\n  \"batchId\": {{batchId}},\r\n  \"batchName\": \"{{UpdtbatchName}}\",\r\n  \"batchNoOfClasses\": {{UpdtbatchNoOfClasses}},\r\n  \"batchStatus\": \"{{UpdtbatchStatus}}\",\r\n  \"programName\": \"{{programName}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches/{{batchId}}"
					},
					"response": []
				},
				{
					"name": "Update Batch without batchStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e59380c9-206e-4f75-bd76-45b77dae9abf",
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 400\", ()=>{\r",
									"pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Batch status is needed\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3211508e-c24e-4ba7-af2e-0329633f7efd",
								"exec": [
									"// var UpbatchName = pm.variables.get(\"programName\")+\"-SDET-\" + pm.variables.replaceIn('{{$randomInt}}');\r",
									"// pm.environment.set(\"UpdtbatchName\",UpbatchName);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "e6721184-908c-4ade-8ba1-99fc51641c54",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{UpdtbatchDescription}}\",\r\n  \"batchId\": {{batchId}},\r\n  \"batchName\": \"{{UpdtbatchName}}\",\r\n  \"batchNoOfClasses\": {{UpdtbatchNoOfClasses}},\r\n  \"programId\": {{programId}},\r\n  \"programName\": \"{{programName}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches/{{batchId}}"
					},
					"response": []
				},
				{
					"name": "Update Batch without NoOfClass",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e59380c9-206e-4f75-bd76-45b77dae9abf",
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 400\", ()=>{\r",
									"pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.json().message).to.eql(\" No of Classes is needed; It should be a positive number \");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3211508e-c24e-4ba7-af2e-0329633f7efd",
								"exec": [
									"// var UpbatchName = pm.variables.get(\"programName\")+\"-SDET-\" + pm.variables.replaceIn('{{$randomInt}}');\r",
									"// pm.environment.set(\"UpdtbatchName\",UpbatchName);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "c27fe5ef-0759-4568-8ff9-9ba53aa962c9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{UpdtbatchDescription}}\",\r\n  \"batchId\": {{batchId}},\r\n  \"batchName\": \"{{UpdtbatchName}}\",\r\n  \"batchStatus\": \"{{UpdtbatchStatus}}\",\r\n  \"programId\": {{programId}},\r\n  \"programName\": \"{{programName}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches/{{batchId}}"
					},
					"response": []
				},
				{
					"name": "Update Batch without BatchName",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e59380c9-206e-4f75-bd76-45b77dae9abf",
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 400\", ()=>{\r",
									"pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Batch Name is mandatory\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3211508e-c24e-4ba7-af2e-0329633f7efd",
								"exec": [
									"// var UpbatchName = pm.variables.get(\"programName\")+\"-SDET-\" + pm.variables.replaceIn('{{$randomInt}}');\r",
									"// pm.environment.set(\"UpdtbatchName\",UpbatchName);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "aa094401-9e00-48a5-8eaf-6c298bc98049",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{UpdtbatchDescription}}\",\r\n  \"batchId\": {{batchId}},\r\n  \"batchStatus\": \"{{UpdtbatchStatus}}\",\r\n  \"batchNoOfClasses\": {{UpdtbatchNoOfClasses}},\r\n  \"programId\": {{programId}},\r\n  \"programName\": \"{{programName}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches/{{batchId}}"
					},
					"response": []
				},
				{
					"name": "Delete Batch by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4cb75479-8e4b-4a15-9a17-b3b5851d1208",
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 200\", ()=>{\r",
									"pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.text()).to.include(\"deleted Successfully\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "52d19a48-0aeb-4c4d-bdce-8e26bfda930c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURL}}/batches/{{batchId}}"
					},
					"response": []
				},
				{
					"name": "Delete Batch by same ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4cb75479-8e4b-4a15-9a17-b3b5851d1208",
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 404\", ()=>{\r",
									"pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Batch not found with Id : \" +pm.environment.get(\"batchId\") +\" \");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "d49ba001-071e-4a11-8178-bfc17c87b417",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURL}}/batches/{{batchId}}"
					},
					"response": []
				},
				{
					"name": "Delete Program",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dc06843b-fb09-4658-b927-7164423ee81c",
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 200\", ()=>{\r",
									"pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Messageg\", () => {\r",
									"    pm.expect(pm.response.text()).to.contains(\"deleted Successfully\");\r",
									"});\r",
									"\r",
									"//Delete created variable\r",
									"pm.environment.unset(\"programId\");\r",
									"pm.environment.unset(\"programName\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "69167f02-3659-4393-863a-329fbe3b90d5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURL}}/deletebyprogid/{{programId}}"
					},
					"response": []
				},
				{
					"name": "Get deleted batch Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dc21a871-6fab-451a-b89b-e664d12b7eb7",
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 404\", ()=>{\r",
									"pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Batch not found with Id : \" +pm.environment.get(\"batchId\") +\" \");\r",
									"});\r",
									"\r",
									"\r",
									"//Delete created variable\r",
									"pm.environment.unset(\"batchId\");\r",
									"pm.environment.unset(\"batchName\");\r",
									"pm.environment.unset(\"UpdtbatchName\");\r",
									"pm.environment.unset(\"NewbatchName\");\r",
									"pm.environment.unset(\"NewbatchStatus\");\r",
									"pm.environment.unset(\"IntbatchName\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5c65634a-e08e-434a-b9a5-db325c88b5f0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/batches/batchId/{{batchId}}"
					},
					"response": []
				}
			],
			"id": "592c3aa9-576b-4c8d-8572-ac357adb6214",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c8c67d46-d07e-4fa9-bb39-0611f9850e58",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "641e155e-b6f5-487a-8223-7f885e13e497",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Program",
			"item": [
				{
					"name": "Create Program",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 201\", ()=>{\r",
									"pm.response.to.have.status(201);\r",
									"})\r",
									"\r",
									"pm.test(\"Check Status Text\", ()=>{\r",
									"    pm.response.to.have.status('Created');\r",
									"})\r",
									"\r",
									"//Validate Header\r",
									"pm.test(\"Content-Type header is present\", ()=>{\r",
									"pm.response.to.have.header(\"Content-Type\");\r",
									"})\r",
									"\r",
									"//Created variable to strore response\r",
									"const response = pm.response.json();\r",
									"\r",
									"console.log(response)\r",
									"\r",
									"//Setting enviornment variable \r",
									"pm.environment.set(\"programId\", response.programId);\r",
									"pm.environment.set(\"programName\", response.programName);\r",
									"\r",
									"\r",
									"//Validating Fields\r",
									"pm.test(\"Test data of the response\", ()=>{\r",
									"pm.expect(response).to.be.an(\"object\");\r",
									"pm.expect(response.programId).to.be.eql(pm.variables.get(\"programId\"));\r",
									"pm.expect(response.programName).to.eql(pm.variables.get(\"programName\"));\r",
									"pm.expect(response.programStatus).to.eql(pm.variables.get(\"programStatus\"));\r",
									"});\r",
									"\r",
									"//Validating response\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"programId\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"creationTime\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"lastModTime\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"programId\",\r",
									"    \"programName\",\r",
									"    \"programDescription\",\r",
									"    \"programStatus\",\r",
									"    \"creationTime\",\r",
									"    \"lastModTime\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Schema is valid\", ()=>{\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "2005a1b8-b929-4a92-9452-7601ce44e47e"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var CrprogramName = \"Jun23-APICollectors-SDET-\" + pm.variables.replaceIn('{{$randomInt}}');\r",
									"pm.environment.set(\"programName\",CrprogramName);"
								],
								"type": "text/javascript",
								"id": "90b80e51-ef4e-44fe-8bde-9ff69aff74d3"
							}
						}
					],
					"id": "8daf4c11-c133-4849-8fed-7d171b40b036",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\": \"{{programDescription}}\",\r\n  \"programName\": \"{{programName}}\",\r\n  \"programStatus\": \"{{programStatus}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "Get All Programs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7cf45e83-e3a2-43ec-8d92-322526d91874",
								"exec": [
									"pm.test(\"Status code is 200\",  () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Validate Header\r",
									"pm.test(\"Content-Type header is present\", ()=>{\r",
									"pm.response.to.have.header(\"Content-Type\");\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "56216053-f5b1-4422-addc-80d73ace4864",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/allPrograms"
					},
					"response": []
				},
				{
					"name": "Get Program By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\",  () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Validating response\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"programId\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"creationTime\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"lastModTime\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"programId\",\r",
									"    \"programName\",\r",
									"    \"programDescription\",\r",
									"    \"programStatus\",\r",
									"    \"creationTime\",\r",
									"    \"lastModTime\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Schema is valid\", ()=>{\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "82246fb7-7cf2-4ee7-8fb4-5287811160a5"
							}
						}
					],
					"id": "fec33576-fb31-4829-95f9-9063cf4e1766",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/programs/{{programId}}"
					},
					"response": []
				},
				{
					"name": "Create Program 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 201\", ()=>{\r",
									"pm.response.to.have.status(201);\r",
									"})\r",
									"\r",
									"pm.test(\"Check Status Text\", ()=>{\r",
									"    pm.response.to.have.status('Created');\r",
									"})\r",
									"\r",
									"//Validate Header\r",
									"pm.test(\"Content-Type header is present\", ()=>{\r",
									"pm.response.to.have.header(\"Content-Type\");\r",
									"})\r",
									"\r",
									"//Created variable to strore response\r",
									"const response = pm.response.json();\r",
									"\r",
									"console.log(response)\r",
									"\r",
									"//Setting enviornment variable \r",
									"pm.environment.set(\"programId2\", response.programId);\r",
									"pm.environment.set(\"programName2\", response.programName);\r",
									"\r",
									"\r",
									"//Validating Fields\r",
									"pm.test(\"Test data of the response\", ()=>{\r",
									"pm.expect(response).to.be.an(\"object\");\r",
									"pm.expect(response.programId).to.be.eql(pm.variables.get(\"programId2\"));\r",
									"pm.expect(response.programName).to.eql(pm.variables.get(\"programName2\"));\r",
									"pm.expect(response.programStatus).to.eql(pm.variables.get(\"programStatus2\"));\r",
									"});\r",
									"\r",
									"//Validating response\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"programId\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"creationTime\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"lastModTime\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"programId\",\r",
									"    \"programName\",\r",
									"    \"programDescription\",\r",
									"    \"programStatus\",\r",
									"    \"creationTime\",\r",
									"    \"lastModTime\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Schema is valid\", ()=>{\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "27d38f6a-d230-4509-af43-9e3d00a89a83"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var CrprogramName = \"Jun23-APICollectors-SDET-\" + pm.variables.replaceIn('{{$randomInt}}');\r",
									"pm.environment.set(\"programName2\",CrprogramName);"
								],
								"type": "text/javascript",
								"id": "e903cd30-bed0-4606-88f2-83dcddc10c0d"
							}
						}
					],
					"id": "76f888f2-6727-40df-bfb1-44ea1e6cb2df",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\": \"{{programDescription2}}\",\r\n  \"programName\": \"{{programName2}}\",\r\n  \"programStatus\": \"{{programStatus2}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "Create Duplicate Program",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 400\", ()=>{\r",
									"pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.json().message).to.eql(\"cannot create program , since already exists\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "f0700eab-742d-4d0d-899d-6184cb368f42"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "437f17b2-cbdd-44fc-8a3a-4c69c011bf94"
							}
						}
					],
					"id": "2aaa18ca-2a59-4882-bf74-a4bfcd955da0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\": \"{{programDescription2}}\",\r\n  \"programName\": \"{{programName2}}\",\r\n  \"programStatus\": \"{{programStatus2}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "Create Program without Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 500\", ()=>{\r",
									"pm.response.to.have.status(500);\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"id": "31eab455-07ea-40a3-8d85-d57367a5b932"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var tsprogramName = \"Jun23-APICollectors-SDET-\" + pm.variables.replaceIn('{{$randomInt}}');\r",
									"pm.environment.set(\"TestprogramName\",tsprogramName);"
								],
								"type": "text/javascript",
								"id": "809640bf-aada-4e3d-a78d-ca6917df805d"
							}
						}
					],
					"id": "5dbf3f68-7811-4c71-91ba-8dd4ec648716",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\": \"{{programDescription2}}\",\r\n  \"programName\": \"{{TestprogramName}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "Create Program without programName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 500\", ()=>{\r",
									"pm.response.to.have.status(500);\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"id": "94911d7d-f3a3-4f39-97e7-fac2142aa882"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "6d011000-bf21-40a2-99da-facc8c3a82bf"
							}
						}
					],
					"id": "13b7a049-042f-411e-a346-3ceeef5834c5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\": \"{{programDescription2}}\",\r\n   \"programStatus\": \"{{programStatus2}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "Update Program without Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\",  () => {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "0abea23a-2770-4267-986b-339a8114cd8b"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var upprogramName2 = \"Jun23-APICollectors-SDET-\" + pm.variables.replaceIn('{{$randomInt}}');\r",
									"pm.environment.set(\"UpdtprogramName2\",upprogramName2);"
								],
								"type": "text/javascript",
								"id": "12b738c4-e3ab-453b-b6f3-a8e41e1e0bc8"
							}
						}
					],
					"id": "313abc5c-7731-41b4-9817-8eee687ab76e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\": \"{{UpdtprogramDescription2}}\",\r\n  \"programId\": {{programId2}},\r\n  \"programName\": \"{{UpdtprogramName2}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/program/{{programName2}}"
					},
					"response": []
				},
				{
					"name": "Update Program without programName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\",  () => {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "4460eeb6-11bb-49c0-9d20-11845f029fe1"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var upprogramName2 = \"Jun23-APICollectors-SDET-\" + pm.variables.replaceIn('{{$randomInt}}');\r",
									"pm.environment.set(\"UpdtprogramName2\",upprogramName2);"
								],
								"type": "text/javascript",
								"id": "b89aeaa1-eac7-4af6-b207-a9a0dd1c6b65"
							}
						}
					],
					"id": "177269ef-95e5-4d73-ba43-a7388197decf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\": \"{{UpdtprogramDescription2}}\",\r\n  \"programId\": {{programId2}},\r\n  \"programStatus\": \"{{programStatus2}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/program/{{programName2}}"
					},
					"response": []
				},
				{
					"name": "Update Program with invalid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\",  () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "1f91fccd-2eb6-4f23-ad16-40c81ce008e4"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"InvalidprogramId\", 0);\r",
									"\r",
									"var upprogramName2 = \"Jun23-APICollectors-SDET-\" + pm.variables.replaceIn('{{$randomInt}}');\r",
									"pm.environment.set(\"UpdtprogramName2\",upprogramName2);"
								],
								"type": "text/javascript",
								"id": "cd1556b7-499c-403b-ab92-11db78872b0a"
							}
						}
					],
					"id": "0c84120a-9f79-4eed-a218-c3c3646b54cc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\": \"{{UpdtprogramDescription}}\",\r\n  \"programId\": {{programId}},\r\n  \"programName\": \"{{UpdtprogramName}}\",\r\n  \"programStatus\": \"{{programStatus}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/putprogram/:programId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"putprogram",
								":programId"
							],
							"variable": [
								{
									"id": "a8e67fb8-4fab-45a1-a674-7188d88f112a",
									"key": "programId",
									"value": "{{InvalidprogramId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Program By Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1506bcb6-7f8b-43f3-88df-5436a5ed20c9",
								"exec": [
									"pm.test(\"Status code is 200\",  () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.environment.set(\"NewprogramName2\", response.programName);\r",
									"\r",
									"//Validating Fields\r",
									"pm.test(\"Test data of the response\", ()=>{\r",
									"pm.expect(response).to.be.an(\"object\");\r",
									"pm.expect(response.programId).to.be.eql(pm.variables.get(\"programId2\"));\r",
									"pm.expect(response.programName).to.eql(pm.variables.get(\"UpdtprogramName2\"));\r",
									"pm.expect(response.programStatus).to.eql(pm.variables.get(\"programStatus2\"));\r",
									"});\r",
									"\r",
									"//Validating response\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"programId\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"creationTime\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"lastModTime\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"programId\",\r",
									"    \"programName\",\r",
									"    \"programDescription\",\r",
									"    \"programStatus\",\r",
									"    \"creationTime\",\r",
									"    \"lastModTime\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Schema is valid\", ()=>{\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "24f9e67d-816d-44bc-8b97-210bf9cd23a2",
								"exec": [
									"var upprogramName2 = \"Jun23-APICollectors-SDET-\" + pm.variables.replaceIn('{{$randomInt}}');\r",
									"pm.environment.set(\"UpdtprogramName2\",upprogramName2);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "82ba96d6-f147-450d-8d3c-0101a2da2155",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\": \"{{UpdtprogramDescription2}}\",\r\n  \"programId\": {{programId2}},\r\n  \"programName\": \"{{UpdtprogramName2}}\",\r\n  \"programStatus\": \"{{programStatus2}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/program/{{programName2}}"
					},
					"response": []
				},
				{
					"name": "Update Program By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8cdc6227-20a4-4ef3-aa11-144b9255632c",
								"exec": [
									"pm.test(\"Status code is 200\",  () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.environment.set(\"NewprogramName\", response.programName);\r",
									"\r",
									"\r",
									"//Validating Fields\r",
									"pm.test(\"Test data of the response\", ()=>{\r",
									"pm.expect(response).to.be.an(\"object\");\r",
									"pm.expect(response.programId).to.be.eql(pm.variables.get(\"programId\"));\r",
									"pm.expect(response.programName).to.eql(pm.variables.get(\"UpdtprogramName\"));\r",
									"pm.expect(response.programStatus).to.eql(pm.variables.get(\"programStatus\"));\r",
									"});\r",
									"\r",
									"//Validating response\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"programId\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"creationTime\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"lastModTime\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"programId\",\r",
									"    \"programName\",\r",
									"    \"programDescription\",\r",
									"    \"programStatus\",\r",
									"    \"creationTime\",\r",
									"    \"lastModTime\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Schema is valid\", ()=>{\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a951b390-e1ff-4ad7-a488-dc17daff6bc9",
								"exec": [
									"var upprogramName = \"Jun23-APICollectors-SDET-\" + pm.variables.replaceIn('{{$randomInt}}');\r",
									"pm.environment.set(\"UpdtprogramName\",upprogramName);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "d32c3a4c-368b-4c7e-b8f8-bff1ac4fba0e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\": \"{{UpdtprogramDescription}}\",\r\n  \"programId\": {{programId}},\r\n  \"programName\": \"{{UpdtprogramName}}\",\r\n  \"programStatus\": \"{{programStatus}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/putprogram/{{programId}}"
					},
					"response": []
				},
				{
					"name": "Delete Program By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "31ef15f9-5dbd-4c55-8bb2-9d0ea2b6ef46",
								"exec": [
									"pm.test(\"Status code is 200\",  () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.text()).to.include(\"deleted Successfully\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "106b9427-e676-4b50-a047-fe30809ac9e3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURL}}/deletebyprogid/{{programId}}"
					},
					"response": []
				},
				{
					"name": "Delete program by deleted ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "31ef15f9-5dbd-4c55-8bb2-9d0ea2b6ef46",
								"exec": [
									"pm.test(\"Status code is 404\",  () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.text()).to.include(\"no record found with programId \" +pm.variables.get(\"programId\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5fd3cbbd-773e-416a-9a45-1c76bc99f05d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURL}}/deletebyprogid/{{programId}}"
					},
					"response": []
				},
				{
					"name": "Delete By Program Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "83826517-8076-4ebe-ab8e-15ed1c4aff12",
								"exec": [
									"pm.test(\"Status code is 200\",  () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.text()).to.include(\"deleted Successfully\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.environment.unset(\"programName\");\r",
									"pm.environment.unset(\"programId\");\r",
									"pm.environment.unset(\"programName2\");\r",
									"pm.environment.unset(\"programId2\");\r",
									"pm.environment.unset(\"UpdtprogramName\");\r",
									"pm.environment.unset(\"UpdtprogramName2\");\r",
									"pm.environment.unset(\"NewprogramName2\");\r",
									"pm.environment.unset(\"NewprogramName\");\r",
									"pm.environment.unset(\"TestprogramName\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "120c05f1-db97-4c41-bc34-ebe9f8a9a3c6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURL}}/deletebyprogname/{{NewprogramName2}}"
					},
					"response": []
				},
				{
					"name": "Delete By same Program Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "83826517-8076-4ebe-ab8e-15ed1c4aff12",
								"exec": [
									"pm.test(\"Status code is 404\",  () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.text()).to.include(\"no record found with programName\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.environment.unset(\"programName\");\r",
									"pm.environment.unset(\"programId\");\r",
									"pm.environment.unset(\"programName2\");\r",
									"pm.environment.unset(\"programId2\");\r",
									"pm.environment.unset(\"UpdtprogramName\");\r",
									"pm.environment.unset(\"UpdtprogramName2\");\r",
									"pm.environment.unset(\"NewprogramName2\");\r",
									"pm.environment.unset(\"NewprogramName\");\r",
									"pm.environment.unset(\"TestprogramName\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "9a837ab2-52bb-4ef2-9190-f7e47d35c020",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURL}}/deletebyprogname/{{NewprogramName2}}"
					},
					"response": []
				}
			],
			"id": "e1fa573a-2244-44ff-833f-b3a205f9ef0d"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "4b3841c2-9f39-42ac-ad64-112cd69cb98e",
				"type": "text/javascript",
				"exec": [
					"// Load data from file",
					"if(typeof pm.variables.get('requestData') !== 'object')",
					"{",
					"    pm.variables.set('requestData', pm.iterationData.toObject());",
					"}",
					"",
					"const requestData = pm.variables.get('requestData');",
					"",
					"if(typeof requestData != 'object' || Object.keys(requestData).length === 0)",
					"{",
					"    console.log('No external data provided/data set is empty');",
					"    return;",
					"}",
					"",
					"// Find current request",
					"const currentRequest = requestData.requests.filter(({name}) => name === pm.info.requestName)[0];",
					"",
					"// If no data",
					"if(!currentRequest)",
					"{",
					"    console.log('Request ${pm.info.requestName} has no data.');",
					"}",
					"",
					"if(currentRequest)",
					"{",
					"    // Expose variables",
					"    const variables = currentRequest.data.shift();",
					"",
					"    Object.entries(variables).forEach(([key, value]) => {",
					"        pm.variables.set(key, value);",
					"    });",
					"",
					"    pm.variables.set('requestData', requestData);",
					"",
					"    // Declare next request",
					"    if(currentRequest.data.length > 0)",
					"    {",
					"        postman.setNextRequest(pm.info.requestName);",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "1861209e-2ca5-47b2-aced-39a6a71d9ac6",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "4648273d-19c3-4ae9-83e0-e9be2cb4c15f",
			"key": "BaseURL",
			"value": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms"
		},
		{
			"id": "dca9796d-75b7-434f-a7dd-437e469ad65f",
			"key": "batchDescription",
			"value": "Postman",
			"type": "string"
		},
		{
			"id": "7773ccc4-3843-457b-8101-1f7d37b86675",
			"key": "batchNoOfClasses",
			"value": "2",
			"type": "string"
		},
		{
			"id": "8fc041d7-2ab8-4edd-a0ec-9d51cc17a3a6",
			"key": "batchStatus",
			"value": "Active",
			"type": "string"
		},
		{
			"id": "06f75c66-0dcc-4ae8-b748-aa23c573c539",
			"key": "programDescription",
			"value": "Postman",
			"type": "string"
		},
		{
			"id": "f518e5f9-6a1f-433b-a605-ceeb394ca444",
			"key": "programStatus",
			"value": "Active",
			"type": "string"
		},
		{
			"id": "5f0d7a57-ac44-4ec7-8339-bd5b63946a01",
			"key": "UpdtbatchNoOfClasses",
			"value": "4",
			"type": "string"
		},
		{
			"id": "713bf0f0-f58a-4e8c-bd33-b94cd8f97a61",
			"key": "UpdtbatchStatus",
			"value": "InActive",
			"type": "string"
		},
		{
			"id": "1e7fbaae-ad58-4c1b-a132-fcb660d32921",
			"key": "UpdtbatchDescription",
			"value": "Rest Assure",
			"type": "string"
		},
		{
			"id": "08d97f5c-5a06-4370-990d-17a6988e763f",
			"key": "userComments",
			"value": "creating new user",
			"type": "string"
		},
		{
			"id": "76961e39-97aa-43a8-8ffc-0caed8acfef4",
			"key": "userEduPg",
			"value": "MS",
			"type": "string"
		},
		{
			"id": "0e84cf97-3f46-49f7-aea1-808f27d2271a",
			"key": "userEduUg",
			"value": "BE",
			"type": "string"
		},
		{
			"id": "d5e91e1d-2c40-4bfc-8a90-6fc66c967b13",
			"key": "userFirstName",
			"value": "APICollectors_004",
			"type": "string"
		},
		{
			"id": "a35a5d94-fab9-4ff7-aa61-09858a8583db",
			"key": "adminUserFirstName",
			"value": "APICollectors_001",
			"type": "string"
		},
		{
			"id": "a41bcccf-75d7-4fe2-b1d9-c20e24a2a2cc",
			"key": "staffUserFirstName",
			"value": "APICollectors_002",
			"type": "string"
		},
		{
			"id": "88a6b828-5cfa-4b36-bc36-58ff1211dd14",
			"key": "studentUserFirstName",
			"value": "APICollectors_003",
			"type": "string"
		},
		{
			"id": "917638a4-502a-48df-bdc5-391e807b5f43",
			"key": "userLastName",
			"value": "User",
			"type": "string"
		},
		{
			"id": "08a57a8f-dc61-474f-a38f-803cda8a28c3",
			"key": "userLinkedinUrl",
			"value": "www.linkedin.com/Test1234",
			"type": "string"
		},
		{
			"id": "d8d11b84-4dfc-47da-b93c-74cc0412d133",
			"key": "userLocation",
			"value": "India",
			"type": "string"
		},
		{
			"id": "aae579e3-b43f-46a8-a9cb-9323564eb2b8",
			"key": "userMiddleName",
			"value": "",
			"type": "string"
		},
		{
			"id": "2f96d671-d34a-4ccb-83b2-d4e4cce5c7a2",
			"key": "roleId",
			"value": "R02",
			"type": "string"
		},
		{
			"id": "bee49587-4ed9-468f-a91b-d13c8971eade",
			"key": "userRoleStatus",
			"value": "Active",
			"type": "string"
		},
		{
			"id": "16c7785c-deca-48c0-b06c-69082d7d2f36",
			"key": "userTimeZone",
			"value": "IST",
			"type": "string"
		},
		{
			"id": "8e419899-0b7a-413b-9019-a73bcb34ff58",
			"key": "userVisaStatus",
			"value": "NA",
			"type": "string"
		},
		{
			"id": "90b24e1b-40a1-4742-9af8-4cec0c37bad4",
			"key": "invalidUserRoleId",
			"value": "invalidRoleID",
			"type": "string"
		},
		{
			"id": "ea9ec647-67b3-49ae-a7d0-d2cfc234413f",
			"key": "integerUserRoleId",
			"value": "46546",
			"type": "string"
		},
		{
			"id": "2c8dcb9f-1e55-447b-be04-c8f885283fdd",
			"key": "invalidUserVisaStatus",
			"value": "invalidVisaStatus",
			"type": "string"
		},
		{
			"id": "e2763419-a0d5-4251-8dd2-6bf0d973dfff",
			"key": "invalidUserTimeZone",
			"value": "invalidTimeZone",
			"type": "string"
		},
		{
			"id": "2301610b-daeb-4d9f-bf83-8e46b82f898c",
			"key": "stringUserPhoneNumber",
			"value": "strPhone",
			"type": "string"
		},
		{
			"id": "8d1f318d-2e2b-47a6-9ab7-56bb1317f22f",
			"key": "blankRoleId",
			"value": "",
			"type": "string"
		},
		{
			"id": "b4c96ffa-a3b2-44fd-a655-8d11c5c758e5",
			"key": "blankUserRoleStatus",
			"value": "",
			"type": "string"
		},
		{
			"id": "1bb8d43c-ddfa-4584-9c85-fa786979c21e",
			"key": "blankUserFirstName",
			"value": "",
			"type": "string"
		},
		{
			"id": "45910aec-b1de-468d-8f0b-048896a6b3fa",
			"key": "blankUserLastName",
			"value": "",
			"type": "string"
		},
		{
			"id": "e6b2d4f7-ad41-45ca-8274-3dc058193373",
			"key": "blankUserTimeZone",
			"value": "",
			"type": "string"
		},
		{
			"id": "07d83c37-0751-488f-9cd8-370bb7dc2a92",
			"key": "blankUserVisaStatus",
			"value": "",
			"type": "string"
		},
		{
			"id": "1626807b-2cc1-4c38-9c3e-274cc215f333",
			"key": "programDescription",
			"value": "DA",
			"type": "string"
		},
		{
			"id": "c350c827-ee72-49f4-ad26-eaf7e285f894",
			"key": "programStatus",
			"value": "Active",
			"type": "string"
		},
		{
			"id": "f7cdc09a-51f5-45d6-a172-72a641de3acc",
			"key": "programDescription2",
			"value": "SDET",
			"type": "string"
		},
		{
			"id": "823ec361-086c-4c7f-9c78-d95f78b66255",
			"key": "UpdtprogramDescription",
			"value": "Postman",
			"type": "string"
		},
		{
			"id": "86abde40-5f41-4996-bfcf-a0375f4abe2d",
			"key": "programStatus2",
			"value": "Active",
			"type": "string"
		},
		{
			"id": "f36802ad-2022-40bf-a3e2-606e8ff8de5a",
			"key": "UpdtprogramDescription2",
			"value": "Rest Assure",
			"type": "string"
		}
	]
}