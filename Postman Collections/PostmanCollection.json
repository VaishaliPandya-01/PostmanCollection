{
	"info": {
		"_postman_id": "71c10254-c833-43d3-b37a-65bf87a7d7b7",
		"name": "Team5_APICollectors",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Program",
			"item": [
				{
					"name": "Create Program",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 201\", ()=>{\r",
									"pm.response.to.have.status(201);\r",
									"})\r",
									"\r",
									"pm.test(\"Check Status Text\", ()=>{\r",
									"    pm.response.to.have.status('Created');\r",
									"})\r",
									"\r",
									"//Validate Header\r",
									"pm.test(\"Content-Type header is present\", ()=>{\r",
									"pm.response.to.have.header(\"Content-Type\");\r",
									"})\r",
									"\r",
									"//Created variable to strore response\r",
									"const response = pm.response.json();\r",
									"\r",
									"console.log(response)\r",
									"\r",
									"//Setting enviornment variable \r",
									"pm.environment.set(\"programId\", response.programId);\r",
									"pm.environment.set(\"programName\", response.programName);\r",
									"\r",
									"\r",
									"//Validating Fields\r",
									"pm.test(\"Test data of the response\", ()=>{\r",
									"pm.expect(response).to.be.an(\"object\");\r",
									"pm.expect(response.programId).to.be.eql(pm.variables.get(\"programId\"));\r",
									"pm.expect(response.programName).to.eql(pm.variables.get(\"programName\"));\r",
									"pm.expect(response.programStatus).to.eql(pm.variables.get(\"programStatus\"));\r",
									"});\r",
									"\r",
									"//Validating response\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"programId\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"creationTime\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"lastModTime\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"programId\",\r",
									"    \"programName\",\r",
									"    \"programDescription\",\r",
									"    \"programStatus\",\r",
									"    \"creationTime\",\r",
									"    \"lastModTime\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Schema is valid\", ()=>{\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "2005a1b8-b929-4a92-9452-7601ce44e47e"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var CrprogramName = \"Jun23-APICollectors-SDET-\" + pm.variables.replaceIn('{{$randomInt}}');\r",
									"pm.environment.set(\"programName\",CrprogramName);"
								],
								"type": "text/javascript",
								"id": "90b80e51-ef4e-44fe-8bde-9ff69aff74d3"
							}
						}
					],
					"id": "8daf4c11-c133-4849-8fed-7d171b40b036",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\": \"{{programDescription}}\",\r\n  \"programName\": \"{{programName}}\",\r\n  \"programStatus\": \"{{programStatus}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "Get All Programs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7cf45e83-e3a2-43ec-8d92-322526d91874",
								"exec": [
									"pm.test(\"Status code is 200\",  () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Validate Header\r",
									"pm.test(\"Content-Type header is present\", ()=>{\r",
									"pm.response.to.have.header(\"Content-Type\");\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "56216053-f5b1-4422-addc-80d73ace4864",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/allPrograms"
					},
					"response": []
				},
				{
					"name": "Get Program By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\",  () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Validating response\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"programId\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"creationTime\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"lastModTime\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"programId\",\r",
									"    \"programName\",\r",
									"    \"programDescription\",\r",
									"    \"programStatus\",\r",
									"    \"creationTime\",\r",
									"    \"lastModTime\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Schema is valid\", ()=>{\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "82246fb7-7cf2-4ee7-8fb4-5287811160a5"
							}
						}
					],
					"id": "fec33576-fb31-4829-95f9-9063cf4e1766",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/programs/{{programId}}"
					},
					"response": []
				},
				{
					"name": "Create Program 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 201\", ()=>{\r",
									"pm.response.to.have.status(201);\r",
									"})\r",
									"\r",
									"pm.test(\"Check Status Text\", ()=>{\r",
									"    pm.response.to.have.status('Created');\r",
									"})\r",
									"\r",
									"//Validate Header\r",
									"pm.test(\"Content-Type header is present\", ()=>{\r",
									"pm.response.to.have.header(\"Content-Type\");\r",
									"})\r",
									"\r",
									"//Created variable to strore response\r",
									"const response = pm.response.json();\r",
									"\r",
									"console.log(response)\r",
									"\r",
									"//Setting enviornment variable \r",
									"pm.environment.set(\"programId2\", response.programId);\r",
									"pm.environment.set(\"programName2\", response.programName);\r",
									"\r",
									"\r",
									"//Validating Fields\r",
									"pm.test(\"Test data of the response\", ()=>{\r",
									"pm.expect(response).to.be.an(\"object\");\r",
									"pm.expect(response.programId).to.be.eql(pm.variables.get(\"programId2\"));\r",
									"pm.expect(response.programName).to.eql(pm.variables.get(\"programName2\"));\r",
									"pm.expect(response.programStatus).to.eql(pm.variables.get(\"programStatus2\"));\r",
									"});\r",
									"\r",
									"//Validating response\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"programId\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"creationTime\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"lastModTime\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"programId\",\r",
									"    \"programName\",\r",
									"    \"programDescription\",\r",
									"    \"programStatus\",\r",
									"    \"creationTime\",\r",
									"    \"lastModTime\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Schema is valid\", ()=>{\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "27d38f6a-d230-4509-af43-9e3d00a89a83"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var CrprogramName = \"Jun23-APICollectors-SDET-\" + pm.variables.replaceIn('{{$randomInt}}');\r",
									"pm.environment.set(\"programName2\",CrprogramName);"
								],
								"type": "text/javascript",
								"id": "e903cd30-bed0-4606-88f2-83dcddc10c0d"
							}
						}
					],
					"id": "76f888f2-6727-40df-bfb1-44ea1e6cb2df",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\": \"{{programDescription2}}\",\r\n  \"programName\": \"{{programName2}}\",\r\n  \"programStatus\": \"{{programStatus2}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "Create Duplicate Program",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 400\", ()=>{\r",
									"pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.json().message).to.eql(\"cannot create program , since already exists\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "f0700eab-742d-4d0d-899d-6184cb368f42"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "437f17b2-cbdd-44fc-8a3a-4c69c011bf94"
							}
						}
					],
					"id": "2aaa18ca-2a59-4882-bf74-a4bfcd955da0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\": \"{{programDescription2}}\",\r\n  \"programName\": \"{{programName2}}\",\r\n  \"programStatus\": \"{{programStatus2}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "Create Program without Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 500\", ()=>{\r",
									"pm.response.to.have.status(500);\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"id": "31eab455-07ea-40a3-8d85-d57367a5b932"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var tsprogramName = \"Jun23-APICollectors-SDET-\" + pm.variables.replaceIn('{{$randomInt}}');\r",
									"pm.environment.set(\"TestprogramName\",tsprogramName);"
								],
								"type": "text/javascript",
								"id": "809640bf-aada-4e3d-a78d-ca6917df805d"
							}
						}
					],
					"id": "5dbf3f68-7811-4c71-91ba-8dd4ec648716",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\": \"{{programDescription2}}\",\r\n  \"programName\": \"{{TestprogramName}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "Create Program without programName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 500\", ()=>{\r",
									"pm.response.to.have.status(500);\r",
									"})\r",
									""
								],
								"type": "text/javascript",
								"id": "94911d7d-f3a3-4f39-97e7-fac2142aa882"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "6d011000-bf21-40a2-99da-facc8c3a82bf"
							}
						}
					],
					"id": "13b7a049-042f-411e-a346-3ceeef5834c5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\": \"{{programDescription2}}\",\r\n   \"programStatus\": \"{{programStatus2}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "Update Program without Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\",  () => {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "0abea23a-2770-4267-986b-339a8114cd8b"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var upprogramName2 = \"Jun23-APICollectors-SDET-\" + pm.variables.replaceIn('{{$randomInt}}');\r",
									"pm.environment.set(\"UpdtprogramName2\",upprogramName2);"
								],
								"type": "text/javascript",
								"id": "12b738c4-e3ab-453b-b6f3-a8e41e1e0bc8"
							}
						}
					],
					"id": "313abc5c-7731-41b4-9817-8eee687ab76e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\": \"{{UpdtprogramDescription2}}\",\r\n  \"programId\": {{programId2}},\r\n  \"programName\": \"{{UpdtprogramName2}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/program/{{programName2}}"
					},
					"response": []
				},
				{
					"name": "Update Program without programName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\",  () => {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "4460eeb6-11bb-49c0-9d20-11845f029fe1"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var upprogramName2 = \"Jun23-APICollectors-SDET-\" + pm.variables.replaceIn('{{$randomInt}}');\r",
									"pm.environment.set(\"UpdtprogramName2\",upprogramName2);"
								],
								"type": "text/javascript",
								"id": "b89aeaa1-eac7-4af6-b207-a9a0dd1c6b65"
							}
						}
					],
					"id": "177269ef-95e5-4d73-ba43-a7388197decf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\": \"{{UpdtprogramDescription2}}\",\r\n  \"programId\": {{programId2}},\r\n  \"programStatus\": \"{{programStatus2}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/program/{{programName2}}"
					},
					"response": []
				},
				{
					"name": "Update Program with invalid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1f91fccd-2eb6-4f23-ad16-40c81ce008e4",
								"exec": [
									"pm.test(\"Status code is 404\",  () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.text()).to.include(\"program with id \"+ pm.variables.get(\"InvalidprogramId\") +\" not found\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "cd1556b7-499c-403b-ab92-11db78872b0a",
								"exec": [
									"pm.variables.set(\"InvalidprogramId\", 0);\r",
									"\r",
									"var upprogramName2 = \"Jun23-APICollectors-SDET-\" + pm.variables.replaceIn('{{$randomInt}}');\r",
									"pm.environment.set(\"UpdtprogramName2\",upprogramName2);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "0c84120a-9f79-4eed-a218-c3c3646b54cc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\": \"{{UpdtprogramDescription}}\",\r\n  \"programId\": {{programId}},\r\n  \"programName\": \"{{UpdtprogramName}}\",\r\n  \"programStatus\": \"{{programStatus}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/putprogram/:programId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"putprogram",
								":programId"
							],
							"variable": [
								{
									"id": "a8e67fb8-4fab-45a1-a674-7188d88f112a",
									"key": "programId",
									"value": "{{InvalidprogramId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Program By Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1506bcb6-7f8b-43f3-88df-5436a5ed20c9",
								"exec": [
									"pm.test(\"Status code is 200\",  () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.environment.set(\"NewprogramName2\", response.programName);\r",
									"\r",
									"//Validating Fields\r",
									"pm.test(\"Test data of the response\", ()=>{\r",
									"pm.expect(response).to.be.an(\"object\");\r",
									"pm.expect(response.programId).to.be.eql(pm.variables.get(\"programId2\"));\r",
									"pm.expect(response.programName).to.eql(pm.variables.get(\"UpdtprogramName2\"));\r",
									"pm.expect(response.programStatus).to.eql(pm.variables.get(\"programStatus2\"));\r",
									"});\r",
									"\r",
									"//Validating response\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"programId\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"creationTime\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"lastModTime\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"programId\",\r",
									"    \"programName\",\r",
									"    \"programDescription\",\r",
									"    \"programStatus\",\r",
									"    \"creationTime\",\r",
									"    \"lastModTime\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Schema is valid\", ()=>{\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "24f9e67d-816d-44bc-8b97-210bf9cd23a2",
								"exec": [
									"var upprogramName2 = \"Jun23-APICollectors-SDET-\" + pm.variables.replaceIn('{{$randomInt}}');\r",
									"pm.environment.set(\"UpdtprogramName2\",upprogramName2);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "82ba96d6-f147-450d-8d3c-0101a2da2155",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\": \"{{UpdtprogramDescription2}}\",\r\n  \"programId\": {{programId2}},\r\n  \"programName\": \"{{UpdtprogramName2}}\",\r\n  \"programStatus\": \"{{programStatus2}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/program/{{programName2}}"
					},
					"response": []
				},
				{
					"name": "Update Program By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8cdc6227-20a4-4ef3-aa11-144b9255632c",
								"exec": [
									"pm.test(\"Status code is 200\",  () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.environment.set(\"NewprogramName\", response.programName);\r",
									"\r",
									"\r",
									"//Validating Fields\r",
									"pm.test(\"Test data of the response\", ()=>{\r",
									"pm.expect(response).to.be.an(\"object\");\r",
									"pm.expect(response.programId).to.be.eql(pm.variables.get(\"programId\"));\r",
									"pm.expect(response.programName).to.eql(pm.variables.get(\"UpdtprogramName\"));\r",
									"pm.expect(response.programStatus).to.eql(pm.variables.get(\"programStatus\"));\r",
									"});\r",
									"\r",
									"//Validating response\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"programId\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"creationTime\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"lastModTime\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"programId\",\r",
									"    \"programName\",\r",
									"    \"programDescription\",\r",
									"    \"programStatus\",\r",
									"    \"creationTime\",\r",
									"    \"lastModTime\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Schema is valid\", ()=>{\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a951b390-e1ff-4ad7-a488-dc17daff6bc9",
								"exec": [
									"var upprogramName = \"Jun23-APICollectors-SDET-\" + pm.variables.replaceIn('{{$randomInt}}');\r",
									"pm.environment.set(\"UpdtprogramName\",upprogramName);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "d32c3a4c-368b-4c7e-b8f8-bff1ac4fba0e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\": \"{{UpdtprogramDescription}}\",\r\n  \"programId\": {{programId}},\r\n  \"programName\": \"{{UpdtprogramName}}\",\r\n  \"programStatus\": \"{{programStatus}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/putprogram/{{programId}}"
					},
					"response": []
				},
				{
					"name": "Delete Program By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "31ef15f9-5dbd-4c55-8bb2-9d0ea2b6ef46",
								"exec": [
									"pm.test(\"Status code is 200\",  () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.text()).to.include(\"deleted Successfully\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "106b9427-e676-4b50-a047-fe30809ac9e3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURL}}/deletebyprogid/{{programId}}"
					},
					"response": []
				},
				{
					"name": "Delete program by deleted ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "31ef15f9-5dbd-4c55-8bb2-9d0ea2b6ef46",
								"exec": [
									"pm.test(\"Status code is 404\",  () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.text()).to.include(\"no record found with programId \" +pm.variables.get(\"programId\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5fd3cbbd-773e-416a-9a45-1c76bc99f05d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURL}}/deletebyprogid/{{programId}}"
					},
					"response": []
				},
				{
					"name": "Delete By Program Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "83826517-8076-4ebe-ab8e-15ed1c4aff12",
								"exec": [
									"pm.test(\"Status code is 200\",  () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.text()).to.include(\"deleted Successfully\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.environment.unset(\"programName\");\r",
									"pm.environment.unset(\"programId\");\r",
									"pm.environment.unset(\"programName2\");\r",
									"pm.environment.unset(\"programId2\");\r",
									"pm.environment.unset(\"UpdtprogramName\");\r",
									"pm.environment.unset(\"UpdtprogramName2\");\r",
									"pm.environment.unset(\"NewprogramName2\");\r",
									"pm.environment.unset(\"NewprogramName\");\r",
									"pm.environment.unset(\"TestprogramName\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "120c05f1-db97-4c41-bc34-ebe9f8a9a3c6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURL}}/deletebyprogname/{{NewprogramName2}}"
					},
					"response": []
				},
				{
					"name": "Delete By same Program Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "83826517-8076-4ebe-ab8e-15ed1c4aff12",
								"exec": [
									"pm.test(\"Status code is 404\",  () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.text()).to.include(\"no record found with programName\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.environment.unset(\"programName\");\r",
									"pm.environment.unset(\"programId\");\r",
									"pm.environment.unset(\"programName2\");\r",
									"pm.environment.unset(\"programId2\");\r",
									"pm.environment.unset(\"UpdtprogramName\");\r",
									"pm.environment.unset(\"UpdtprogramName2\");\r",
									"pm.environment.unset(\"NewprogramName2\");\r",
									"pm.environment.unset(\"NewprogramName\");\r",
									"pm.environment.unset(\"TestprogramName\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "9a837ab2-52bb-4ef2-9190-f7e47d35c020",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURL}}/deletebyprogname/{{NewprogramName2}}"
					},
					"response": []
				}
			],
			"id": "e1fa573a-2244-44ff-833f-b3a205f9ef0d"
		},
		{
			"name": "Batch",
			"item": [
				{
					"name": "Create New Program for Batch",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ffff8eda-f225-42b9-8b81-1012abbf264d",
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 201\", ()=>{\r",
									"pm.response.to.have.status(201);\r",
									"})\r",
									"\r",
									"pm.test(\"Check Status Text\", ()=>{\r",
									"    pm.response.to.have.status('Created');\r",
									"})\r",
									"\r",
									"//Validate Header\r",
									"pm.test(\"Content-Type header is present\", ()=>{\r",
									"pm.response.to.have.header(\"Content-Type\");\r",
									"})\r",
									"\r",
									"//Created variable to strore response\r",
									"const response = pm.response.json();\r",
									"\r",
									"console.log(response)\r",
									"\r",
									"//Setting enviornment variable \r",
									"pm.environment.set(\"programId\", response.programId);\r",
									"pm.environment.set(\"programName\", response.programName);\r",
									"\r",
									"\r",
									"//Validating Fields\r",
									"pm.test(\"Test data of the response\", ()=>{\r",
									"pm.expect(response).to.be.an(\"object\");\r",
									"pm.expect(response.programId).to.be.eql(pm.variables.get(\"programId\"));\r",
									"pm.expect(response.programName).to.eql(pm.variables.get(\"programName\"));\r",
									"pm.expect(response.programStatus).to.eql(pm.variables.get(\"programStatus\"));\r",
									"});\r",
									"\r",
									"//Validating response\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"programId\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"programStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"creationTime\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"lastModTime\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"programId\",\r",
									"    \"programName\",\r",
									"    \"programDescription\",\r",
									"    \"programStatus\",\r",
									"    \"creationTime\",\r",
									"    \"lastModTime\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Schema is valid\", ()=>{\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "15449f76-4869-4a02-811e-c007e44ed381",
								"exec": [
									"var CrprogramName = \"Jun23-APICollectors-SDET\" + pm.variables.replaceIn('{{$randomInt}}');\r",
									"pm.environment.set(\"programNamebatch\",CrprogramName);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "f70e9d8d-d58d-42fa-b924-18301b5a4b2e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\":\"{{programDescriptionbatch}}\",\r\n  \"programName\":  \"{{programNamebatch}}\",\r\n  \"programStatus\": \"{{programStatusbatch}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "Create New Batch",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bc8f931c-ed1e-4f74-8682-436f63e739a9",
								"exec": [
									"//validate status code\r",
									"pm.test(\"Status code is 201\", ()=> {\r",
									"pm.response.to.have.status(201);\r",
									"})\r",
									"\r",
									"pm.test(\"Check Status Text\", ()=>{\r",
									"    pm.response.to.have.status('Created');\r",
									"})\r",
									"\r",
									"//Validate Header\r",
									"pm.test(\"Content-Type header is present\", ()=>{\r",
									"pm.response.to.have.header(\"Content-Type\");\r",
									"})\r",
									"\r",
									"//create variable for response body\r",
									"const response = pm.response.json();\r",
									"\r",
									"console.log(response)\r",
									"\r",
									"//Create enviornment variables\r",
									"pm.environment.set(\"batchId\", response.batchId);\r",
									"pm.environment.set(\"batchName\", response.batchName);\r",
									"\r",
									"//Validating Fields\r",
									"pm.test(\"Test data of the response\", ()=>{\r",
									"pm.expect(response.programId).to.be.eql(pm.variables.get(\"programId\"));\r",
									"pm.expect(response.programName).to.be.eql(pm.variables.get(\"programName\"));\r",
									"pm.expect(response.batchStatus).to.be.eql(pm.variables.get(\"batchStatus\"));\r",
									"pm.expect(response.batchName).to.be.eql(pm.variables.get(\"batchName\"));\r",
									"pm.expect(response.batchDescription).to.be.eql(pm.variables.get(\"batchDescription\"));\r",
									"pm.expect(response.batchId).to.be.eql(pm.variables.get(\"batchId\"));\r",
									"});\r",
									"\r",
									"console.log;\r",
									"\r",
									"//Validating response\r",
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-06/schema#\",\r",
									"    \"$ref\": \"#/definitions/Welcome10\",\r",
									"    \"definitions\": {\r",
									"        \"Welcome10\": {\r",
									"            \"type\": \"object\",\r",
									"            \"additionalProperties\": false,\r",
									"            \"properties\": {\r",
									"                \"batchId\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"batchName\": {\r",
									"                    \"type\": \"string\",\r",
									"                    \"format\": \"integer\"\r",
									"                },\r",
									"                \"batchDescription\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"batchStatus\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"batchNoOfClasses\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"programId\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"programName\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"batchDescription\",\r",
									"                \"batchId\",\r",
									"                \"batchName\",\r",
									"                \"batchNoOfClasses\",\r",
									"                \"batchStatus\",\r",
									"                \"programId\",\r",
									"                \"programName\"\r",
									"            ],\r",
									"            \"title\": \"Welcome10\"\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.test(\"Schema is valid\", ()=>{\r",
									"pm.expect(tv4.validate(response,schema)).to.be.true\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c52e305e-075d-4df5-b3b2-50e4ff4f0cca",
								"exec": [
									"var CrbatchName = pm.variables.get(\"programName\")+\"-SDET-\" + pm.variables.replaceIn('{{$randomInt}}');\r",
									"pm.environment.set(\"batchName\",CrbatchName);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "2afc6240-e460-4737-a4dd-1515c75aae48",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\":{{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": \"{{programId}}\"\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Get All Batches",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dc21a871-6fab-451a-b89b-e664d12b7eb7",
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 200\", ()=>{\r",
									"pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"\r",
									"//Validate Header\r",
									"pm.test(\"Content-Type header is present\", ()=>{\r",
									"pm.response.to.have.header(\"Content-Type\");\r",
									"})\r",
									"\r",
									"\r",
									"//Validating response\r",
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-06/schema#\",\r",
									"    \"$ref\": \"#/definitions/Welcome10\",\r",
									"    \"definitions\": {\r",
									"        \"Welcome10\": {\r",
									"            \"type\": \"object\",\r",
									"            \"additionalProperties\": false,\r",
									"            \"properties\": {\r",
									"                \"batchId\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"batchName\": {\r",
									"                    \"type\": \"string\",\r",
									"                    \"format\": \"integer\"\r",
									"                },\r",
									"                \"batchDescription\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"batchStatus\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"batchNoOfClasses\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"programId\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"programName\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"batchDescription\",\r",
									"                \"batchId\",\r",
									"                \"batchName\",\r",
									"                \"batchNoOfClasses\",\r",
									"                \"batchStatus\",\r",
									"                \"programId\",\r",
									"                \"programName\"\r",
									"            ],\r",
									"            \"title\": \"Welcome10\"\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Schema is valid\", ()=>{\r",
									"pm.expect(tv4.validate(pm.response,schema))\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "d536f21c-045c-47a6-83bf-8f18063105f9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Create Duplicate Batch",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bc8f931c-ed1e-4f74-8682-436f63e739a9",
								"exec": [
									"//validate status code\r",
									"pm.test(\"Status code is 400\", ()=> {\r",
									"pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Program \" + pm.environment.get(\"programName\") + \" with Batch-\" + pm.environment.get(\"batchName\") + \" already exists: ; Please give a different batch Name or Choose a different Program\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "843fd8f1-e3f2-4bf1-bd35-bd39db80ce1e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\":{{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": \"{{programId}}\"\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Batch without BatchName",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bc8f931c-ed1e-4f74-8682-436f63e739a9",
								"exec": [
									"//validate status code\r",
									"pm.test(\"Status code is 400\", ()=> {\r",
									"pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Body matches string\", () => {\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Batch Name is mandatory\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "4d86d2ab-be8d-43bb-af0c-b4237d757b11",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchNoOfClasses\":{{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": \"{{programId}}\"\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Batch with integer BatchName",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bc8f931c-ed1e-4f74-8682-436f63e739a9",
								"exec": [
									"//validate status code\r",
									"pm.test(\"Status code is 201\", ()=> {\r",
									"pm.response.to.have.status(201);\r",
									"})\r",
									"\r",
									"//create variable for response body\r",
									"const response = pm.response.json();\r",
									"\r",
									"//Create enviornment variables\r",
									"pm.environment.set(\"batchId1\", response.batchId);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ab83dde0-6069-4e32-b44b-d3510719f9ff",
								"exec": [
									"var NumbatchName = pm.variables.replaceIn('{{$randomInt}}');\r",
									"pm.environment.set(\"IntbatchName\",NumbatchName);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "07b451f5-3224-4953-8af3-8dd644136df9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchName\":{{IntbatchName}} ,\r\n  \"batchNoOfClasses\":{{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": \"{{programId}}\"\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Delete integer Batch name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4cb75479-8e4b-4a15-9a17-b3b5851d1208",
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 200\", ()=>{\r",
									"pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.text()).to.include(\" deleted Successfully\");\r",
									"});\r",
									"\r",
									"pm.environment.unset(\"batchId1\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "2fb46813-084c-40cd-874a-f661a01575c0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURL}}/batches/{{batchId1}}"
					},
					"response": []
				},
				{
					"name": "Batch without ProgramId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bc8f931c-ed1e-4f74-8682-436f63e739a9",
								"exec": [
									"//validate status code\r",
									"pm.test(\"Status code is 400\", ()=> {\r",
									"pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.json().message).to.eql(\" ProgramId field is needed; It should be a positive number \");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "0e26e68a-8fa7-4bd7-9c60-fd09048ece25",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\":{{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\"\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Batch negative ProgramId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bc8f931c-ed1e-4f74-8682-436f63e739a9",
								"exec": [
									"//validate status code\r",
									"pm.test(\"Status code is 404\", ()=> {\r",
									"pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Program not found with Id : \" + pm.variables.get(\"NegprogramId\") + \" \");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "465da949-4ddb-40ce-a015-925410a8e191",
								"exec": [
									"pm.variables.set(\"NegprogramId\", -3);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5848ee4f-f5a3-4e40-bd5e-ca7c25938fe0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\":{{batchNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": {{NegprogramId}}\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Batch without Batch Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bc8f931c-ed1e-4f74-8682-436f63e739a9",
								"exec": [
									"//validate status code\r",
									"pm.test(\"Status code is 400\", ()=> {\r",
									"pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Batch status is needed\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "11880d81-0e8d-4874-be2a-dcf5429eb01c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\":{{batchNoOfClasses}},\r\n  \"programId\": \"{{programId}}\"\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Batch with integer Batch Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bc8f931c-ed1e-4f74-8682-436f63e739a9",
								"exec": [
									"//validate status code\r",
									"pm.test(\"Status code is 201\", ()=> {\r",
									"pm.response.to.have.status(201);\r",
									"})\r",
									"\r",
									"//create variable for response body\r",
									"const response = pm.response.json();\r",
									"\r",
									"//Create enviornment variables\r",
									"pm.environment.set(\"batchId1\", response.batchId);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "04d838e2-f428-41d7-8001-c46ef8b81672",
								"exec": [
									"var NbatchName = pm.variables.get(\"programName\")+\"-SDET-\" + pm.variables.replaceIn('{{$randomInt}}');\r",
									"pm.environment.set(\"NewbatchName\",NbatchName);\r",
									"\r",
									"var NbatchStatus = pm.variables.replaceIn('{{$randomInt}}');\r",
									"pm.environment.set(\"NewbatchStatus\",NbatchStatus);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "0f9855da-2a36-4718-81fa-a614c5cd93af",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchName\": \"{{NewbatchName}}\",\r\n  \"batchNoOfClasses\":{{batchNoOfClasses}},\r\n  \"batchStatus\": {{NewbatchStatus}},\r\n  \"programId\": \"{{programId}}\"\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Delete integer Batch status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4cb75479-8e4b-4a15-9a17-b3b5851d1208",
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 200\", ()=>{\r",
									"pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.text()).to.include(\" deleted Successfully\");\r",
									"});\r",
									"\r",
									"pm.environment.unset(\"batchId1\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b41d2d0a-8528-4228-b983-2a055c24f980",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURL}}/batches/{{batchId1}}"
					},
					"response": []
				},
				{
					"name": "Batch without NoOfClasses",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bc8f931c-ed1e-4f74-8682-436f63e739a9",
								"exec": [
									"//validate status code\r",
									"pm.test(\"Status code is 400\", ()=> {\r",
									"pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.json().message).to.eql(\" No of Classes is needed; It should be a positive number \");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "56f7e2b1-2bfe-44ab-8d19-4247cdfcd1d7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": \"{{programId}}\"\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Batch with String NoOfClasses",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bc8f931c-ed1e-4f74-8682-436f63e739a9",
								"exec": [
									"//validate status code\r",
									"pm.test(\"Status code is 400\", ()=> {\r",
									"pm.response.to.have.status(400);\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b6e55aa6-ca05-48c6-aa8a-f1670c041059",
								"exec": [
									"pm.variables.set(\"StringNoOfClasses\", \"three\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "85ea863f-c616-4437-a469-7d8af7811061",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\":\"{{StringNoOfClasses}}\",\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": \"{{programId}}\"\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Batch negative NoOfClasses",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bc8f931c-ed1e-4f74-8682-436f63e739a9",
								"exec": [
									"//validate status code\r",
									"pm.test(\"Status code is 400\", ()=> {\r",
									"pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.json().message).to.eql(\" No of Classes is needed; It should be a positive number \");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3f63e5a6-ed55-4e80-85aa-3e8511087c85",
								"exec": [
									"pm.variables.set(\"NegNoOfClasses\", -3);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "38283ec1-d97e-4655-b364-e08124d77d72",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{batchDescription}}\",\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchNoOfClasses\":{{NegNoOfClasses}},\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"programId\": \"{{programId}}\"\r\n }\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Get Batche by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dc21a871-6fab-451a-b89b-e664d12b7eb7",
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 200\", ()=>{\r",
									"pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"//Created variable to strore response\r",
									"const response = pm.response.json();\r",
									"\r",
									"//Validating Fields\r",
									"pm.test(\"Test data type of the response\", ()=>{\r",
									"pm.expect(response).to.be.an(\"object\");\r",
									"pm.expect(response.batchId).to.be.an(\"number\");\r",
									"pm.expect(response.batchName).to.be.an(\"string\");\r",
									"pm.expect(response.batchDescription).to.be.an(\"string\");\r",
									"pm.expect(response.batchNoOfClasses).to.be.an(\"number\");\r",
									"pm.expect(response.batchStatus).to.be.an(\"string\");\r",
									"pm.expect(response.programId).to.be.an(\"number\");\r",
									"pm.expect(response.programName).to.be.an(\"string\");\r",
									"});\r",
									"\r",
									"//Validating response\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchId\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"batchName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchNoOfClasses\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"programId\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"batchId\",\r",
									"    \"batchName\",\r",
									"    \"batchDescription\",\r",
									"    \"batchStatus\",\r",
									"    \"batchNoOfClasses\",\r",
									"    \"programId\",\r",
									"    \"programName\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Schema is valid\", ()=>{\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "4db7174e-1d35-4dee-9a84-ec15bbac6a50",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/batches/batchId/{{batchId}}"
					},
					"response": []
				},
				{
					"name": "Get Batche by Invalid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dc21a871-6fab-451a-b89b-e664d12b7eb7",
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 404\", ()=>{\r",
									"pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Batch not found with Id : \" +pm.variables.get(\"InvalidBatchId\") +\" \");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "47741157-7fd0-4cc1-8d4a-50b22134c063",
								"exec": [
									"pm.variables.set(\"InvalidBatchId\", 0);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "6a3e1bd2-c0e5-466f-bb4e-1ef32f14304b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/batches/batchId/:batchId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"batches",
								"batchId",
								":batchId"
							],
							"variable": [
								{
									"key": "batchId",
									"value": "{{InvalidBatchId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Batche by name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dc21a871-6fab-451a-b89b-e664d12b7eb7",
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 200\", ()=>{\r",
									"pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"//Validating response\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"batchId\": {\r",
									"        \"type\": \"number\"\r",
									"      },\r",
									"      \"batchName\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"batchDescription\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"batchStatus\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"batchNoOfClasses\": {\r",
									"        \"type\": \"number\"\r",
									"      },\r",
									"      \"programId\": {\r",
									"        \"type\": \"number\"\r",
									"      },\r",
									"      \"programName\": {\r",
									"        \"type\": \"string\"\r",
									"      }\r",
									"    },\r",
									"    \"required\": [\r",
									"      \"batchId\",\r",
									"      \"batchName\",\r",
									"      \"batchDescription\",\r",
									"      \"batchStatus\",\r",
									"      \"batchNoOfClasses\",\r",
									"      \"programId\",\r",
									"      \"programName\"\r",
									"    ]\r",
									"  }\r",
									"}\r",
									"\r",
									"pm.test(\"Schema is valid\", ()=>{\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "c393951a-cf59-451b-9f90-ae0446508813",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/batches/batchName/{{batchName}}"
					},
					"response": []
				},
				{
					"name": "Get Batche by Invalid name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dc21a871-6fab-451a-b89b-e664d12b7eb7",
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 404\", ()=>{\r",
									"pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.json().message).to.eql(\"programBatch with id \" +pm.variables.get(\"InvalidBatchName\") +\" not found\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b93a4272-5f8b-4526-89f5-c4367230e5af",
								"exec": [
									"pm.variables.set(\"InvalidBatchName\", \"RRR\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "4b3b0374-e19a-45a2-9ea0-d9c6bae502f3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/batches/batchName/:batchName",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"batches",
								"batchName",
								":batchName"
							],
							"variable": [
								{
									"key": "batchName",
									"value": "{{InvalidBatchName}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Batche by ProgramId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dc21a871-6fab-451a-b89b-e664d12b7eb7",
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 200\", ()=>{\r",
									"pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"\r",
									"//Validating response\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"batchId\": {\r",
									"        \"type\": \"number\"\r",
									"      },\r",
									"      \"batchName\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"batchDescription\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"batchStatus\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"batchNoOfClasses\": {\r",
									"        \"type\": \"number\"\r",
									"      },\r",
									"      \"programId\": {\r",
									"        \"type\": \"number\"\r",
									"      },\r",
									"      \"programName\": {\r",
									"        \"type\": \"string\"\r",
									"      }\r",
									"    },\r",
									"    \"required\": [\r",
									"      \"batchId\",\r",
									"      \"batchName\",\r",
									"      \"batchDescription\",\r",
									"      \"batchStatus\",\r",
									"      \"batchNoOfClasses\",\r",
									"      \"programId\",\r",
									"      \"programName\"\r",
									"    ]\r",
									"  }\r",
									"}\r",
									"\r",
									"pm.test(\"Schema is valid\", ()=>{\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ee89893f-0ae8-471c-b221-59075ba9bfe0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/batches/program/{{programId}}"
					},
					"response": []
				},
				{
					"name": "Get Batche by Invalid ProgramId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dc21a871-6fab-451a-b89b-e664d12b7eb7",
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 404\", ()=>{\r",
									"pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.json().message).to.eql(\"batch with programId \" +pm.variables.get(\"InvalidProgramId\") +\" not found\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "dec35b77-fb3a-47de-b1a5-e7f75e2d9c5a",
								"exec": [
									"pm.variables.set(\"InvalidProgramId\", 0);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "12852019-7574-494d-ab29-7fe7b6ca38b2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/batches/program/:programId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"batches",
								"program",
								":programId"
							],
							"variable": [
								{
									"key": "programId",
									"value": "{{InvalidProgramId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Batch",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e59380c9-206e-4f75-bd76-45b77dae9abf",
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 200\", ()=>{\r",
									"pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"console.log(response)\r",
									"\r",
									"//Validating Fields\r",
									"pm.test(\"Test data of the response\", ()=>{\r",
									"pm.expect(response.programId).to.be.eql(pm.variables.get(\"programId\"));\r",
									"pm.expect(response.programName).to.be.eql(pm.variables.get(\"programName\"));\r",
									"pm.expect(response.batchStatus).to.be.eql(pm.variables.get(\"UpdtbatchStatus\"));\r",
									"pm.expect(response.batchName).to.be.eql(pm.variables.get(\"UpdtbatchName\"));\r",
									"pm.expect(response.batchDescription).to.be.eql(pm.variables.get(\"UpdtbatchDescription\"));\r",
									"pm.expect(response.batchId).to.be.eql(pm.variables.get(\"batchId\"));\r",
									"});\r",
									"\r",
									"//Validating response\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchId\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"batchName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchDescription\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchNoOfClasses\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"programId\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"batchId\",\r",
									"    \"batchName\",\r",
									"    \"batchDescription\",\r",
									"    \"batchStatus\",\r",
									"    \"batchNoOfClasses\",\r",
									"    \"programId\",\r",
									"    \"programName\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Schema is valid\", ()=>{\r",
									"pm.expect(tv4.validate(response,schema)).to.be.true\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3211508e-c24e-4ba7-af2e-0329633f7efd",
								"exec": [
									"var UpbatchName = pm.variables.get(\"programName\")+\"-SDET-\" + pm.variables.replaceIn('{{$randomInt}}');\r",
									"pm.environment.set(\"UpdtbatchName\",UpbatchName);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "cf8159cb-48bf-43b1-8863-7164d7a3ea39",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{UpdtbatchDescription}}\",\r\n  \"batchId\": {{batchId}},\r\n  \"batchName\": \"{{UpdtbatchName}}\",\r\n  \"batchNoOfClasses\": {{UpdtbatchNoOfClasses}},\r\n  \"batchStatus\": \"{{UpdtbatchStatus}}\",\r\n  \"programId\": {{programId}},\r\n  \"programName\": \"{{programName}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches/{{batchId}}"
					},
					"response": []
				},
				{
					"name": "Update Batch without programID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e59380c9-206e-4f75-bd76-45b77dae9abf",
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 400\", ()=>{\r",
									"pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.json().message).to.eql(\" ProgramId field is needed; It should be a positive number \");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3211508e-c24e-4ba7-af2e-0329633f7efd",
								"exec": [
									"// var UpbatchName = pm.variables.get(\"programName\")+\"-SDET-\" + pm.variables.replaceIn('{{$randomInt}}');\r",
									"// pm.environment.set(\"UpdtbatchName\",UpbatchName);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "28e87bb7-c550-42dd-a3af-25b05239edc4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{UpdtbatchDescription}}\",\r\n  \"batchId\": {{batchId}},\r\n  \"batchName\": \"{{UpdtbatchName}}\",\r\n  \"batchNoOfClasses\": {{UpdtbatchNoOfClasses}},\r\n  \"batchStatus\": \"{{UpdtbatchStatus}}\",\r\n  \"programName\": \"{{programName}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches/{{batchId}}"
					},
					"response": []
				},
				{
					"name": "Update Batch without batchStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e59380c9-206e-4f75-bd76-45b77dae9abf",
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 400\", ()=>{\r",
									"pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Batch status is needed\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3211508e-c24e-4ba7-af2e-0329633f7efd",
								"exec": [
									"// var UpbatchName = pm.variables.get(\"programName\")+\"-SDET-\" + pm.variables.replaceIn('{{$randomInt}}');\r",
									"// pm.environment.set(\"UpdtbatchName\",UpbatchName);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "e6721184-908c-4ade-8ba1-99fc51641c54",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{UpdtbatchDescription}}\",\r\n  \"batchId\": {{batchId}},\r\n  \"batchName\": \"{{UpdtbatchName}}\",\r\n  \"batchNoOfClasses\": {{UpdtbatchNoOfClasses}},\r\n  \"programId\": {{programId}},\r\n  \"programName\": \"{{programName}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches/{{batchId}}"
					},
					"response": []
				},
				{
					"name": "Update Batch without NoOfClass",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e59380c9-206e-4f75-bd76-45b77dae9abf",
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 400\", ()=>{\r",
									"pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.json().message).to.eql(\" No of Classes is needed; It should be a positive number \");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3211508e-c24e-4ba7-af2e-0329633f7efd",
								"exec": [
									"// var UpbatchName = pm.variables.get(\"programName\")+\"-SDET-\" + pm.variables.replaceIn('{{$randomInt}}');\r",
									"// pm.environment.set(\"UpdtbatchName\",UpbatchName);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "c27fe5ef-0759-4568-8ff9-9ba53aa962c9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{UpdtbatchDescription}}\",\r\n  \"batchId\": {{batchId}},\r\n  \"batchName\": \"{{UpdtbatchName}}\",\r\n  \"batchStatus\": \"{{UpdtbatchStatus}}\",\r\n  \"programId\": {{programId}},\r\n  \"programName\": \"{{programName}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches/{{batchId}}"
					},
					"response": []
				},
				{
					"name": "Update Batch without BatchName",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e59380c9-206e-4f75-bd76-45b77dae9abf",
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 400\", ()=>{\r",
									"pm.response.to.have.status(400);\r",
									"})\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Batch Name is mandatory\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3211508e-c24e-4ba7-af2e-0329633f7efd",
								"exec": [
									"// var UpbatchName = pm.variables.get(\"programName\")+\"-SDET-\" + pm.variables.replaceIn('{{$randomInt}}');\r",
									"// pm.environment.set(\"UpdtbatchName\",UpbatchName);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "aa094401-9e00-48a5-8eaf-6c298bc98049",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchDescription\": \"{{UpdtbatchDescription}}\",\r\n  \"batchId\": {{batchId}},\r\n  \"batchStatus\": \"{{UpdtbatchStatus}}\",\r\n  \"batchNoOfClasses\": {{UpdtbatchNoOfClasses}},\r\n  \"programId\": {{programId}},\r\n  \"programName\": \"{{programName}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches/{{batchId}}"
					},
					"response": []
				},
				{
					"name": "Delete Batch by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4cb75479-8e4b-4a15-9a17-b3b5851d1208",
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 200\", ()=>{\r",
									"pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.text()).to.include(\"deleted Successfully\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "52d19a48-0aeb-4c4d-bdce-8e26bfda930c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURL}}/batches/{{batchId}}"
					},
					"response": []
				},
				{
					"name": "Delete Batch by same ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4cb75479-8e4b-4a15-9a17-b3b5851d1208",
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 404\", ()=>{\r",
									"pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Batch not found with Id : \" +pm.environment.get(\"batchId\") +\" \");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "d49ba001-071e-4a11-8178-bfc17c87b417",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURL}}/batches/{{batchId}}"
					},
					"response": []
				},
				{
					"name": "Delete Program",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dc06843b-fb09-4658-b927-7164423ee81c",
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 200\", ()=>{\r",
									"pm.response.to.have.status(200);\r",
									"})\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Messageg\", () => {\r",
									"    pm.expect(pm.response.text()).to.contains(\"deleted Successfully\");\r",
									"});\r",
									"\r",
									"//Delete created variable\r",
									"pm.environment.unset(\"programId\");\r",
									"pm.environment.unset(\"programName\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "69167f02-3659-4393-863a-329fbe3b90d5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURL}}/deletebyprogid/{{programId}}"
					},
					"response": []
				},
				{
					"name": "Get deleted batch Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dc21a871-6fab-451a-b89b-e664d12b7eb7",
								"exec": [
									"//Validate Status Code\r",
									"pm.test(\"Status code is 404\", ()=>{\r",
									"pm.response.to.have.status(404);\r",
									"})\r",
									"\r",
									"\r",
									"//Validate Message\r",
									"pm.test(\"Validate Message\", () => {\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Batch not found with Id : \" +pm.environment.get(\"batchId\") +\" \");\r",
									"});\r",
									"\r",
									"\r",
									"//Delete created variable\r",
									"pm.environment.unset(\"batchId\");\r",
									"pm.environment.unset(\"batchName\");\r",
									"pm.environment.unset(\"UpdtbatchName\");\r",
									"pm.environment.unset(\"NewbatchName\");\r",
									"pm.environment.unset(\"NewbatchStatus\");\r",
									"pm.environment.unset(\"IntbatchName\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5c65634a-e08e-434a-b9a5-db325c88b5f0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/batches/batchId/{{batchId}}"
					},
					"response": []
				}
			],
			"id": "592c3aa9-576b-4c8d-8572-ac357adb6214",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c8c67d46-d07e-4fa9-bb39-0611f9850e58",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "641e155e-b6f5-487a-8223-7f885e13e497",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "User",
			"item": [
				{
					"name": "Create new Admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 201 Created\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.expect(pm.response.status).to.eql('Created');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"     \"required\": [",
									"      \"userId\",",
									"      \"userFirstName\",",
									"      \"userLastName\",",
									"      \"userMiddleName\",",
									"      \"userPhoneNumber\",",
									"      \"userLocation\",",
									"      \"userTimeZone\",",
									"      \"userLinkedinUrl\",",
									"      \"userEduUg\",",
									"      \"userEduPg\",",
									"      \"userComments\",",
									"      \"userVisaStatus\"",
									"    ],",
									"    \"properties\": {",
									"        \"userId\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userFirstName\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userLastName\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userMiddleName\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userPhoneNumber\": {",
									"            \"type\": \"integer\"",
									"        },",
									"        \"userLocation\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userTimeZone\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userLinkedinUrl\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userEduUg\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userEduPg\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userComments\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userVisaStatus\": {",
									"            \"type\": \"string\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test4 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test5 - Validate userId starts with U",
									"pm.test(\"Auto-created userId should have U\", () => {",
									"    pm.expect(responseJson.userId).to.contain('U');",
									"});",
									"",
									"// Test6 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.userFirstName).to.eql(pm.variables.get(\"adminUserFirstName\"));",
									"    pm.expect(responseJson.userLastName).to.eql(pm.variables.get(\"userLastName\"));",
									"    pm.expect(responseJson.userMiddleName).to.eql(pm.variables.get(\"userMiddleName\"));",
									"    pm.expect(responseJson.userPhoneNumber).to.eql(parseInt(pm.environment.get(\"userPhoneNumber\")));",
									"    pm.expect(responseJson.userLocation).to.eql(pm.variables.get(\"userLocation\"));",
									"    pm.expect(responseJson.userTimeZone).to.eql(pm.variables.get(\"userTimeZone\"));",
									"    pm.expect(responseJson.userLinkedinUrl).to.eql(pm.variables.get(\"userLinkedinUrl\"));",
									"    pm.expect(responseJson.userEduUg).to.eql(pm.variables.get(\"userEduUg\"));",
									"    pm.expect(responseJson.userEduPg).to.eql(pm.variables.get(\"userEduPg\"));",
									"    pm.expect(responseJson.userComments).to.eql(pm.variables.get(\"userComments\"));",
									"    pm.expect(responseJson.userVisaStatus).to.eql(pm.variables.get(\"userVisaStatus\"));",
									"});",
									"",
									"// Set global variables from response, to be used by other requests",
									"if(responseJson)",
									"{",
									"    pm.environment.set(\"adminUserId\", responseJson.userId);",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "daa8cb1b-624e-4c34-a9e0-921889790bf2"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const phoneNumber = Math.floor(Math.random() * 10000000);",
									"pm.environment.set(\"userPhoneNumber\", phoneNumber);",
									"",
									"const randomNum = Math.floor(Math.random() * 100);",
									"const firstName = pm.variables.get(\"adminUserFirstName\") + randomNum;",
									"pm.variables.set(\"adminUserFirstName\", firstName);"
								],
								"type": "text/javascript",
								"id": "0ea3f4ee-73dd-4fe9-96fc-db0325964d45"
							}
						}
					],
					"id": "5588f76a-38dd-4d92-b548-c651c1ffaa1e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userComments\": \"{{userComments}}\",\n    \"userEduPg\": \"{{userEduPg}}\",\n    \"userEduUg\": \"{{userEduUg}}\",\n    \"userFirstName\": \"{{adminUserFirstName}}\",\n    \"userLastName\": \"{{userLastName}}\",\n    \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n    \"userLocation\": \"{{userLocation}}\",\n    \"userMiddleName\": \"\",\n    \"userPhoneNumber\": {{userPhoneNumber}},\n    \"userRoleMaps\": [\n        {\n            \"roleId\": \"{{roleId}}\",\n            \"userRoleStatus\": \"{{userRoleStatus}}\"\n        }\n    ],\n    \"userTimeZone\": \"{{userTimeZone}}\",\n    \"userVisaStatus\": \"{{userVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Get Admin User info by Id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "13eb35fc-88d8-4fe9-9a96-330847328ed9"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.status).to.eql('OK');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"var schema = {",
									"  \"type\": \"array\",",
									"  \"items\": {",
									"      \"type\": \"object\",",
									"      \"required\": [",
									"          \"userRoleId\",",
									"          \"user\",",
									"          \"role\",",
									"          \"batches\",",
									"          \"userRoleStatus\"",
									"      ],",
									"      \"properties\": {",
									"          \"userRoleId\": {",
									"              \"type\": \"integer\"",
									"          },",
									"          \"user\": {",
									"              \"type\": \"object\",",
									"              \"required\": [",
									"                  \"userId\",",
									"                  \"userFirstName\",",
									"                  \"userLastName\",",
									"                  \"userPhoneNumber\",",
									"                  \"userTimeZone\",",
									"                  \"userVisaStatus\"",
									"              ],",
									"              \"properties\": {",
									"                  \"userId\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"userFirstName\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"userLastName\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"userPhoneNumber\": {",
									"                      \"type\": \"integer\"",
									"                  },",
									"                  \"userTimeZone\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"userVisaStatus\": {",
									"                      \"type\": \"string\"",
									"                  }",
									"                }",
									"          },",
									"          \"role\": {",
									"              \"type\": \"object\",",
									"              \"required\": [",
									"                  \"roleId\",",
									"                  \"roleName\",",
									"                  \"roleDesc\",",
									"                  \"creationTime\",",
									"                  \"lastModTime\",",
									"                  \"hibernateLazyInitializer\"",
									"              ],",
									"              \"properties\": {",
									"                  \"roleId\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"roleName\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"roleDesc\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"creationTime\": {",
									"                      \"type\": \"null\"",
									"                  },",
									"                  \"lastModTime\": {",
									"                      \"type\": \"null\"",
									"                  },",
									"                  \"hibernateLazyInitializer\": {",
									"                      \"type\": \"object\"",
									"                  }",
									"              }",
									"           },",
									"          \"batches\": {",
									"              \"type\": \"array\",",
									"              \"items\": {}",
									"          },",
									"          \"userRoleStatus\": {",
									"              \"type\": \"string\"",
									"          }",
									"      }",
									"  }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson[0].user.userId).to.eql(pm.environment.get(\"adminUserId\"));",
									"    pm.expect(responseJson[0].user.userFirstName).to.eql(pm.variables.get(\"adminUserFirstName\"));",
									"    pm.expect(responseJson[0].user.userLastName).to.eql(pm.variables.get(\"userLastName\"));",
									"    pm.expect(responseJson[0].user.userMiddleName).to.eql(pm.variables.get(\"userMiddleName\"));",
									"    pm.expect(responseJson[0].user.userPhoneNumber).to.eql(parseInt(pm.environment.get(\"userPhoneNumber\")));",
									"    pm.expect(responseJson[0].user.userLocation).to.eql(pm.variables.get(\"userLocation\"));",
									"    pm.expect(responseJson[0].user.userTimeZone).to.eql(pm.variables.get(\"userTimeZone\"));",
									"    pm.expect(responseJson[0].user.userLinkedinUrl).to.eql(pm.variables.get(\"userLinkedinUrl\"));",
									"    pm.expect(responseJson[0].user.userEduUg).to.eql(pm.variables.get(\"userEduUg\"));",
									"    pm.expect(responseJson[0].user.userEduPg).to.eql(pm.variables.get(\"userEduPg\"));",
									"    pm.expect(responseJson[0].user.userComments).to.eql(pm.variables.get(\"userComments\"));",
									"    pm.expect(responseJson[0].user.userVisaStatus).to.eql(pm.variables.get(\"userVisaStatus\"));",
									"    pm.expect(responseJson[0].role.roleId).to.eql(pm.variables.get(\"roleId\"));",
									"    pm.expect(responseJson[0].userRoleStatus).to.eql(pm.variables.get(\"userRoleStatus\"));",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "ccbd3fbe-d5a6-409e-adcf-614367a16ba3"
							}
						}
					],
					"id": "6c73ee30-2cc7-426d-bd6c-289615035d7e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/users/users/:userId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"users",
								":userId"
							],
							"variable": [
								{
									"id": "e98c95ea-8062-4ee9-938e-d387241455b5",
									"key": "userId",
									"value": "{{adminUserId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new Staff user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 201 Created\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.expect(pm.response.status).to.eql('Created');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"      \"userId\",",
									"      \"userFirstName\",",
									"      \"userLastName\",",
									"      \"userMiddleName\",",
									"      \"userPhoneNumber\",",
									"      \"userLocation\",",
									"      \"userTimeZone\",",
									"      \"userLinkedinUrl\",",
									"      \"userEduUg\",",
									"      \"userEduPg\",",
									"      \"userComments\",",
									"      \"userVisaStatus\"",
									"    ],",
									"    \"properties\": {",
									"        \"userId\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userFirstName\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userLastName\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userMiddleName\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userPhoneNumber\": {",
									"            \"type\": \"integer\"",
									"        },",
									"        \"userLocation\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userTimeZone\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userLinkedinUrl\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userEduUg\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userEduPg\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userComments\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userVisaStatus\": {",
									"            \"type\": \"string\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test4 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test5 - Validate userId starts with U",
									"pm.test(\"Auto-created userId should have U\", () => {",
									"    pm.expect(responseJson.userId).to.contain('U');",
									"});",
									"",
									"// Test6 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.userFirstName).to.eql(pm.variables.get(\"staffUserFirstName\"));",
									"    pm.expect(responseJson.userLastName).to.eql(pm.variables.get(\"userLastName\"));",
									"    pm.expect(responseJson.userMiddleName).to.eql(pm.variables.get(\"userMiddleName\"));",
									"    pm.expect(responseJson.userPhoneNumber).to.eql(parseInt(pm.environment.get(\"userPhoneNumber\")));",
									"    pm.expect(responseJson.userLocation).to.eql(pm.variables.get(\"userLocation\"));",
									"    pm.expect(responseJson.userTimeZone).to.eql(pm.variables.get(\"userTimeZone\"));",
									"    pm.expect(responseJson.userLinkedinUrl).to.eql(pm.variables.get(\"userLinkedinUrl\"));",
									"    pm.expect(responseJson.userEduUg).to.eql(pm.variables.get(\"userEduUg\"));",
									"    pm.expect(responseJson.userEduPg).to.eql(pm.variables.get(\"userEduPg\"));",
									"    pm.expect(responseJson.userComments).to.eql(pm.variables.get(\"userComments\"));",
									"    pm.expect(responseJson.userVisaStatus).to.eql(pm.variables.get(\"userVisaStatus\"));",
									"});",
									"",
									"// Set global variables from response, to be used by other requests",
									"if(responseJson)",
									"{",
									"    pm.environment.set(\"staffUserId\", responseJson.userId);",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "d436d4c2-3442-4882-adb7-bf11fc8f3490"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const phoneNumber = Math.floor(Math.random() * 10000000);",
									"pm.environment.set(\"userPhoneNumber\", phoneNumber);",
									"",
									"const randomNum = Math.floor(Math.random() * 100);",
									"const firstName = pm.variables.get(\"staffUserFirstName\") + randomNum;",
									"pm.variables.set(\"staffUserFirstName\", firstName);"
								],
								"type": "text/javascript",
								"id": "bbbe5d26-c2a4-4993-8613-9c5850975a0a"
							}
						}
					],
					"id": "31cd6420-e5d1-4935-a4e9-c789d4b6b644",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userComments\": \"{{userComments}}\",\n    \"userEduPg\": \"{{userEduPg}}\",\n    \"userEduUg\": \"{{userEduUg}}\",\n    \"userFirstName\": \"{{staffUserFirstName}}\",\n    \"userLastName\": \"{{userLastName}}\",\n    \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n    \"userLocation\": \"{{userLocation}}\",\n    \"userMiddleName\": \"\",\n    \"userPhoneNumber\": {{userPhoneNumber}},\n    \"userRoleMaps\": [\n        {\n            \"roleId\": \"{{roleId}}\",\n            \"userRoleStatus\": \"{{userRoleStatus}}\"\n        }\n    ],\n    \"userTimeZone\": \"{{userTimeZone}}\",\n    \"userVisaStatus\": \"{{userVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Get All Staff",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.status).to.eql('OK');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"var schema = {",
									"  \"type\": \"array\",",
									"  \"items\": {",
									"      \"type\": \"object\",",
									"      \"required\": [",
									"          \"userRoleId\",",
									"          \"user\",",
									"          \"role\",",
									"          \"batches\",",
									"          \"userRoleStatus\"",
									"      ],",
									"      \"properties\": {",
									"          \"userRoleId\": {",
									"              \"type\": \"integer\"",
									"          },",
									"          \"user\": {",
									"              \"type\": \"object\",",
									"              \"required\": [",
									"                  \"userId\",",
									"                  \"userFirstName\",",
									"                  \"userLastName\",",
									"                  \"userPhoneNumber\",",
									"                  \"userTimeZone\",",
									"                  \"userVisaStatus\",",
									"                  \"hibernateLazyInitializer\"",
									"              ],",
									"              \"properties\": {",
									"                  \"userId\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"userFirstName\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"userLastName\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"userPhoneNumber\": {",
									"                      \"type\": \"integer\"",
									"                  },",
									"                  \"userTimeZone\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"userVisaStatus\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"hibernateLazyInitializer\": {",
									"                      \"type\": \"object\"",
									"                  }",
									"                }",
									"          },",
									"          \"role\": {",
									"              \"type\": \"object\",",
									"              \"required\": [",
									"                  \"roleId\",",
									"                  \"roleName\",",
									"                  \"roleDesc\",",
									"                  \"creationTime\",",
									"                  \"lastModTime\",",
									"                  \"hibernateLazyInitializer\"",
									"              ],",
									"              \"properties\": {",
									"                  \"roleId\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"roleName\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"roleDesc\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"creationTime\": {",
									"                      \"type\": \"null\"",
									"                  },",
									"                  \"lastModTime\": {",
									"                      \"type\": \"null\"",
									"                  },",
									"                  \"hibernateLazyInitializer\": {",
									"                      \"type\": \"object\"",
									"                  }",
									"              }",
									"           },",
									"          \"batches\": {",
									"              \"type\": \"array\",",
									"              \"items\": {}",
									"          },",
									"          \"userRoleStatus\": {",
									"              \"type\": \"string\"",
									"          }",
									"      }",
									"  }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Filter staff user created earlier",
									"if(responseJson.user)",
									"{",
									"    const staffUser = responseJson.filter((user) => user.user.userId === pm.environment.get(\"staffUserId\"));",
									"",
									"    // Test5 - Validate Staff user",
									"    pm.test(\"Staff user created should be in All users\", () => {",
									"        pm.expect(staffUser.length).to.eql(1);",
									"        pm.expect(staffUser[0]).to.be.an('object');",
									"    });",
									"}",
									"else",
									"{",
									"    pm.test(\"Staff user found\", () => {",
									"        pm.expect(responseJson.user).to.be.true;",
									"    });",
									"}"
								],
								"type": "text/javascript",
								"id": "99080a00-9205-486c-a349-6f50c8e12871"
							}
						}
					],
					"id": "6a107539-1983-472f-b32c-eabc794fedd9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/users/users/getAllStaff"
					},
					"response": []
				},
				{
					"name": "Get Staff User info by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.status).to.eql('OK');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"var schema = {",
									"  \"type\": \"array\",",
									"  \"items\": {",
									"      \"type\": \"object\",",
									"      \"required\": [",
									"          \"userRoleId\",",
									"          \"user\",",
									"          \"role\",",
									"          \"batches\",",
									"          \"userRoleStatus\"",
									"      ],",
									"      \"properties\": {",
									"          \"userRoleId\": {",
									"              \"type\": \"integer\"",
									"          },",
									"          \"user\": {",
									"              \"type\": \"object\",",
									"              \"required\": [",
									"                  \"userId\",",
									"                  \"userFirstName\",",
									"                  \"userLastName\",",
									"                  \"userPhoneNumber\",",
									"                  \"userTimeZone\",",
									"                  \"userVisaStatus\"",
									"              ],",
									"              \"properties\": {",
									"                  \"userId\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"userFirstName\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"userLastName\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"userPhoneNumber\": {",
									"                      \"type\": \"integer\"",
									"                  },",
									"                  \"userTimeZone\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"userVisaStatus\": {",
									"                      \"type\": \"string\"",
									"                  }",
									"                }",
									"          },",
									"          \"role\": {",
									"              \"type\": \"object\",",
									"              \"required\": [",
									"                  \"roleId\",",
									"                  \"roleName\",",
									"                  \"roleDesc\",",
									"                  \"creationTime\",",
									"                  \"lastModTime\",",
									"                  \"hibernateLazyInitializer\"",
									"              ],",
									"              \"properties\": {",
									"                  \"roleId\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"roleName\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"roleDesc\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"creationTime\": {",
									"                      \"type\": \"null\"",
									"                  },",
									"                  \"lastModTime\": {",
									"                      \"type\": \"null\"",
									"                  },",
									"                  \"hibernateLazyInitializer\": {",
									"                      \"type\": \"object\"",
									"                  }",
									"              }",
									"           },",
									"          \"batches\": {",
									"              \"type\": \"array\",",
									"              \"items\": {}",
									"          },",
									"          \"userRoleStatus\": {",
									"              \"type\": \"string\"",
									"          }",
									"      }",
									"  }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson[0].user.userId).to.eql(pm.environment.get(\"staffUserId\"));",
									"    pm.expect(responseJson[0].user.userFirstName).to.eql(pm.variables.get(\"staffUserFirstName\"));",
									"    pm.expect(responseJson[0].user.userLastName).to.eql(pm.variables.get(\"userLastName\"));",
									"    pm.expect(responseJson[0].user.userMiddleName).to.eql(pm.variables.get(\"userMiddleName\"));",
									"    pm.expect(responseJson[0].user.userPhoneNumber).to.eql(parseInt(pm.environment.get(\"userPhoneNumber\")));",
									"    pm.expect(responseJson[0].user.userLocation).to.eql(pm.variables.get(\"userLocation\"));",
									"    pm.expect(responseJson[0].user.userTimeZone).to.eql(pm.variables.get(\"userTimeZone\"));",
									"    pm.expect(responseJson[0].user.userLinkedinUrl).to.eql(pm.variables.get(\"userLinkedinUrl\"));",
									"    pm.expect(responseJson[0].user.userEduUg).to.eql(pm.variables.get(\"userEduUg\"));",
									"    pm.expect(responseJson[0].user.userEduPg).to.eql(pm.variables.get(\"userEduPg\"));",
									"    pm.expect(responseJson[0].user.userComments).to.eql(pm.variables.get(\"userComments\"));",
									"    pm.expect(responseJson[0].user.userVisaStatus).to.eql(pm.variables.get(\"userVisaStatus\"));",
									"    pm.expect(responseJson[0].role.roleId).to.eql(pm.variables.get(\"roleId\"));",
									"    pm.expect(responseJson[0].userRoleStatus).to.eql(pm.variables.get(\"userRoleStatus\"));",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "89641fc0-679e-4bc9-b730-c71ad7f9ba16"
							}
						}
					],
					"id": "8f4bb2e0-e50f-4a6f-a07d-2a22d14cdec5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/users/users/:userId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"users",
								":userId"
							],
							"variable": [
								{
									"id": "01dfce8c-ab8f-470b-ba26-586bc648dbc5",
									"key": "userId",
									"value": "{{staffUserId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new Student user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 201 Created\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.expect(pm.response.status).to.eql('Created');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"      \"userId\",",
									"      \"userFirstName\",",
									"      \"userLastName\",",
									"      \"userMiddleName\",",
									"      \"userPhoneNumber\",",
									"      \"userLocation\",",
									"      \"userTimeZone\",",
									"      \"userLinkedinUrl\",",
									"      \"userEduUg\",",
									"      \"userEduPg\",",
									"      \"userComments\",",
									"      \"userVisaStatus\"",
									"    ],",
									"    \"properties\": {",
									"        \"userId\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userFirstName\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userLastName\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userMiddleName\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userPhoneNumber\": {",
									"            \"type\": \"integer\"",
									"        },",
									"        \"userLocation\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userTimeZone\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userLinkedinUrl\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userEduUg\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userEduPg\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userComments\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userVisaStatus\": {",
									"            \"type\": \"string\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test4 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test5 - Validate userId starts with U",
									"pm.test(\"Auto-created userId should have U\", () => {",
									"    pm.expect(responseJson.userId).to.contain('U');",
									"});",
									"",
									"// Test6 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.userFirstName).to.eql(pm.variables.get(\"studentUserFirstName\"));",
									"    pm.expect(responseJson.userLastName).to.eql(pm.variables.get(\"userLastName\"));",
									"    pm.expect(responseJson.userMiddleName).to.eql(pm.variables.get(\"userMiddleName\"));",
									"    pm.expect(responseJson.userPhoneNumber).to.eql(parseInt(pm.environment.get(\"userPhoneNumber\")));",
									"    pm.expect(responseJson.userLocation).to.eql(pm.variables.get(\"userLocation\"));",
									"    pm.expect(responseJson.userTimeZone).to.eql(pm.variables.get(\"userTimeZone\"));",
									"    pm.expect(responseJson.userLinkedinUrl).to.eql(pm.variables.get(\"userLinkedinUrl\"));",
									"    pm.expect(responseJson.userEduUg).to.eql(pm.variables.get(\"userEduUg\"));",
									"    pm.expect(responseJson.userEduPg).to.eql(pm.variables.get(\"userEduPg\"));",
									"    pm.expect(responseJson.userComments).to.eql(pm.variables.get(\"userComments\"));",
									"    pm.expect(responseJson.userVisaStatus).to.eql(pm.variables.get(\"userVisaStatus\"));",
									"});",
									"",
									"// Set global variables from response, to be used by other requests",
									"if(responseJson)",
									"{",
									"    pm.environment.set(\"studentUserId\", responseJson.userId);",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "0ce74ceb-9573-4a69-98b4-51f5fd3100ef"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const phoneNumber = Math.floor(Math.random() * 10000000);",
									"pm.environment.set(\"userPhoneNumber\", phoneNumber);",
									"",
									"const randomNum = Math.floor(Math.random() * 100);",
									"const firstName = pm.variables.get(\"studentUserFirstName\") + randomNum;",
									"pm.variables.set(\"studentUserFirstName\", firstName);"
								],
								"type": "text/javascript",
								"id": "77e702b3-decd-4486-b3cd-b46f25369e1a"
							}
						}
					],
					"id": "45bf2876-e4ef-47c2-87a5-d1e5c3d979a0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userComments\": \"{{userComments}}\",\n    \"userEduPg\": \"{{userEduPg}}\",\n    \"userEduUg\": \"{{userEduUg}}\",\n    \"userFirstName\": \"{{studentUserFirstName}}\",\n    \"userLastName\": \"{{userLastName}}\",\n    \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n    \"userLocation\": \"{{userLocation}}\",\n    \"userMiddleName\": \"\",\n    \"userPhoneNumber\": {{userPhoneNumber}},\n    \"userRoleMaps\": [\n        {\n            \"roleId\": \"{{roleId}}\",\n            \"userRoleStatus\": \"{{userRoleStatus}}\"\n        }\n    ],\n    \"userTimeZone\": \"{{userTimeZone}}\",\n    \"userVisaStatus\": \"{{userVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Get Student User info by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.status).to.eql('OK');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"var schema = {",
									"  \"type\": \"array\",",
									"  \"items\": {",
									"      \"type\": \"object\",",
									"      \"required\": [",
									"          \"userRoleId\",",
									"          \"user\",",
									"          \"role\",",
									"          \"batches\",",
									"          \"userRoleStatus\"",
									"      ],",
									"      \"properties\": {",
									"          \"userRoleId\": {",
									"              \"type\": \"integer\"",
									"          },",
									"          \"user\": {",
									"              \"type\": \"object\",",
									"              \"required\": [",
									"                  \"userId\",",
									"                  \"userFirstName\",",
									"                  \"userLastName\",",
									"                  \"userPhoneNumber\",",
									"                  \"userTimeZone\",",
									"                  \"userVisaStatus\"",
									"              ],",
									"              \"properties\": {",
									"                  \"userId\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"userFirstName\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"userLastName\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"userPhoneNumber\": {",
									"                      \"type\": \"integer\"",
									"                  },",
									"                  \"userTimeZone\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"userVisaStatus\": {",
									"                      \"type\": \"string\"",
									"                  }",
									"                }",
									"          },",
									"          \"role\": {",
									"              \"type\": \"object\",",
									"              \"required\": [",
									"                  \"roleId\",",
									"                  \"roleName\",",
									"                  \"roleDesc\",",
									"                  \"creationTime\",",
									"                  \"lastModTime\",",
									"                  \"hibernateLazyInitializer\"",
									"              ],",
									"              \"properties\": {",
									"                  \"roleId\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"roleName\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"roleDesc\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"creationTime\": {",
									"                      \"type\": \"null\"",
									"                  },",
									"                  \"lastModTime\": {",
									"                      \"type\": \"null\"",
									"                  },",
									"                  \"hibernateLazyInitializer\": {",
									"                      \"type\": \"object\"",
									"                  }",
									"              }",
									"           },",
									"          \"batches\": {",
									"              \"type\": \"array\",",
									"              \"items\": {}",
									"          },",
									"          \"userRoleStatus\": {",
									"              \"type\": \"string\"",
									"          }",
									"      }",
									"  }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson[0].user.userId).to.eql(pm.environment.get(\"studentUserId\"));",
									"    pm.expect(responseJson[0].user.userFirstName).to.eql(pm.variables.get(\"studentUserFirstName\"));",
									"    pm.expect(responseJson[0].user.userLastName).to.eql(pm.variables.get(\"userLastName\"));",
									"    pm.expect(responseJson[0].user.userMiddleName).to.eql(pm.variables.get(\"userMiddleName\"));",
									"    pm.expect(responseJson[0].user.userPhoneNumber).to.eql(parseInt(pm.environment.get(\"userPhoneNumber\")));",
									"    pm.expect(responseJson[0].user.userLocation).to.eql(pm.variables.get(\"userLocation\"));",
									"    pm.expect(responseJson[0].user.userTimeZone).to.eql(pm.variables.get(\"userTimeZone\"));",
									"    pm.expect(responseJson[0].user.userLinkedinUrl).to.eql(pm.variables.get(\"userLinkedinUrl\"));",
									"    pm.expect(responseJson[0].user.userEduUg).to.eql(pm.variables.get(\"userEduUg\"));",
									"    pm.expect(responseJson[0].user.userEduPg).to.eql(pm.variables.get(\"userEduPg\"));",
									"    pm.expect(responseJson[0].user.userComments).to.eql(pm.variables.get(\"userComments\"));",
									"    pm.expect(responseJson[0].user.userVisaStatus).to.eql(pm.variables.get(\"userVisaStatus\"));",
									"    pm.expect(responseJson[0].role.roleId).to.eql(pm.variables.get(\"roleId\"));",
									"    pm.expect(responseJson[0].userRoleStatus).to.eql(pm.variables.get(\"userRoleStatus\"));",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "253203a7-7e5c-4433-8d89-9ca1705845eb"
							}
						}
					],
					"id": "5235d270-9428-4310-b31e-3f6a2e99682f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/users/users/:userId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"users",
								":userId"
							],
							"variable": [
								{
									"id": "673c5afe-e5af-444b-b66c-b1067373a9e1",
									"key": "userId",
									"value": "{{studentUserId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Users with Roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.status).to.eql('OK');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"var schema = {",
									"  \"type\": \"array\",",
									"  \"items\": {",
									"      \"type\": \"object\",",
									"      \"required\": [",
									"          \"userRoleId\",",
									"          \"user\",",
									"          \"role\",",
									"          \"batches\",",
									"          \"userRoleStatus\"",
									"      ],",
									"      \"properties\": {",
									"          \"userRoleId\": {",
									"              \"type\": \"integer\"",
									"          },",
									"          \"user\": {",
									"              \"type\": \"object\",",
									"              \"required\": [",
									"                  \"userId\",",
									"                  \"userFirstName\",",
									"                  \"userLastName\",",
									"                  \"userPhoneNumber\",",
									"                  \"userTimeZone\",",
									"                  \"userVisaStatus\",",
									"                  \"hibernateLazyInitializer\"",
									"              ],",
									"              \"properties\": {",
									"                  \"userId\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"userFirstName\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"userLastName\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"userPhoneNumber\": {",
									"                      \"type\": \"integer\"",
									"                  },",
									"                  \"userTimeZone\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"userVisaStatus\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"hibernateLazyInitializer\": {",
									"                      \"type\": \"object\"",
									"                  }",
									"                }",
									"          },",
									"          \"role\": {",
									"              \"type\": \"object\",",
									"              \"required\": [",
									"                  \"roleId\",",
									"                  \"roleName\",",
									"                  \"roleDesc\",",
									"                  \"creationTime\",",
									"                  \"lastModTime\",",
									"                  \"hibernateLazyInitializer\"",
									"              ],",
									"              \"properties\": {",
									"                  \"roleId\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"roleName\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"roleDesc\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"creationTime\": {",
									"                      \"type\": \"null\"",
									"                  },",
									"                  \"lastModTime\": {",
									"                      \"type\": \"null\"",
									"                  },",
									"                  \"hibernateLazyInitializer\": {",
									"                      \"type\": \"object\"",
									"                  }",
									"              }",
									"           },",
									"          \"batches\": {",
									"              \"type\": \"array\",",
									"              \"items\": {}",
									"          },",
									"          \"userRoleStatus\": {",
									"              \"type\": \"string\"",
									"          }",
									"      }",
									"  }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Filter admin user created earlier",
									"const adminUser = responseJson.filter((user) => user.user.userId === pm.environment.get(\"adminUserId\"));",
									"",
									"// Test4 - Validate Admin user",
									"pm.test(\"Admin user created should be in All users\", () => {",
									"    pm.expect(adminUser.length).to.eql(1);",
									"    pm.expect(adminUser[0]).to.be.an('object');",
									"});",
									"",
									"// Filter staff user created earlier",
									"const staffUser = responseJson.filter((user) => user.user.userId === pm.environment.get(\"staffUserId\"));",
									"",
									"// Test5 - Validate Staff user",
									"pm.test(\"Staff user created should be in All users\", () => {",
									"    pm.expect(staffUser.length).to.eql(1);",
									"    pm.expect(staffUser[0]).to.be.an('object');",
									"});",
									"",
									"// Filter student user created earlier",
									"const studentUser = responseJson.filter((user) => user.user.userId === pm.environment.get(\"studentUserId\"));",
									"",
									"// Test6 - Validate Student user",
									"pm.test(\"Student user created should be in All users\", () => {",
									"    pm.expect(studentUser.length).to.eql(1);",
									"    pm.expect(studentUser[0]).to.be.an('object');",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "37c362e7-01c3-4b0a-b3d7-b227b72bb4ae"
							}
						}
					],
					"id": "c7ad9641-b0bb-48ed-ad48-5f234ddf7092",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/users/users/roles"
					},
					"response": []
				},
				{
					"name": "Get All Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.status).to.eql('OK');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"array\",",
									"    \"items\": {",
									"        \"type\": \"object\",",
									"        \"required\": [",
									"            \"userId\",",
									"            \"userFirstName\",",
									"            \"userLastName\",",
									"            \"userPhoneNumber\",",
									"            \"userTimeZone\",",
									"            \"userVisaStatus\"",
									"        ],",
									"        \"properties\": {",
									"            \"userId\": {",
									"                \"type\": \"string\"",
									"            },",
									"            \"userFirstName\": {",
									"                \"type\": \"string\"",
									"            },",
									"            \"userLastName\": {",
									"                \"type\": \"string\"",
									"            },",
									"            \"userPhoneNumber\": {",
									"                \"type\": \"integer\"",
									"            },",
									"            \"userTimeZone\": {",
									"                \"type\": \"string\"",
									"            },",
									"            \"userVisaStatus\": {",
									"                \"type\": \"string\"",
									"            }",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Filter admin user created earlier",
									"const adminUser = responseJson.filter((user) => user.userId === pm.environment.get(\"adminUserId\"));",
									"",
									"// Test4 - Validate Admin user",
									"pm.test(\"Admin user created should be in All users\", () => {",
									"    pm.expect(adminUser.length).to.eql(1);",
									"    pm.expect(adminUser[0]).to.be.an('object');",
									"});",
									"",
									"// Filter staff user created earlier",
									"const staffUser = responseJson.filter((user) => user.userId === pm.environment.get(\"staffUserId\"));",
									"",
									"// Test5 - Validate Staff user",
									"pm.test(\"Staff user created should be in All users\", () => {",
									"    pm.expect(staffUser.length).to.eql(1);",
									"    pm.expect(staffUser[0]).to.be.an('object');",
									"});",
									"",
									"// Filter student user created earlier",
									"const studentUser = responseJson.filter((user) => user.userId === pm.environment.get(\"studentUserId\"));",
									"",
									"// Test6 - Validate Student user",
									"pm.test(\"Student user created should be in All users\", () => {",
									"    pm.expect(studentUser.length).to.eql(1);",
									"    pm.expect(studentUser[0]).to.be.an('object');",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "b062defa-b049-4575-a7af-09feeb7b7f1f"
							}
						}
					],
					"id": "1422538a-5f38-48bf-8a7f-b0292bd9763c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/users/users"
					},
					"response": []
				},
				{
					"name": "Update Admin user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.status).to.eql('OK');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"     \"required\": [",
									"      \"userId\",",
									"      \"userFirstName\",",
									"      \"userLastName\",",
									"      \"userMiddleName\",",
									"      \"userPhoneNumber\",",
									"      \"userLocation\",",
									"      \"userTimeZone\",",
									"      \"userLinkedinUrl\",",
									"      \"userEduUg\",",
									"      \"userEduPg\",",
									"      \"userComments\",",
									"      \"userVisaStatus\"",
									"    ],",
									"    \"properties\": {",
									"        \"userId\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userFirstName\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userLastName\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userMiddleName\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userPhoneNumber\": {",
									"            \"type\": \"integer\"",
									"        },",
									"        \"userLocation\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userTimeZone\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userLinkedinUrl\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userEduUg\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userEduPg\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userComments\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userVisaStatus\": {",
									"            \"type\": \"string\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.userFirstName).to.eql(pm.variables.get(\"putUserFirstName\"));",
									"    pm.expect(responseJson.userLastName).to.eql(pm.variables.get(\"putUserLastName\"));",
									"    pm.expect(responseJson.userPhoneNumber).to.eql(parseInt(pm.variables.get(\"putUserPhoneNumber\")));",
									"    pm.expect(responseJson.userLocation).to.eql(pm.variables.get(\"putUserLocation\"));",
									"    pm.expect(responseJson.userTimeZone).to.eql(pm.variables.get(\"putUserTimeZone\"));",
									"    pm.expect(responseJson.userLinkedinUrl).to.eql(pm.variables.get(\"putUserLinkedinUrl\"));",
									"    pm.expect(responseJson.userEduUg).to.eql(pm.variables.get(\"putUserEduUg\"));",
									"    pm.expect(responseJson.userEduPg).to.eql(pm.variables.get(\"putUserEduPg\"));",
									"    pm.expect(responseJson.userComments).to.eql(pm.variables.get(\"putUserComments\"));",
									"    pm.expect(responseJson.userVisaStatus).to.eql(pm.variables.get(\"putUserVisaStatus\"));",
									"});",
									"",
									"// Set global variables from response, to be used by other requests",
									"if(responseJson)",
									"{",
									"    pm.environment.set(\"adminUserId\", responseJson.userId);",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "82f9c349-9da4-4b58-a433-77d1b4f0a3e4"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const phoneNumber = Math.floor(Math.random() * 10000000);",
									"pm.variables.set(\"putUserPhoneNumber\", phoneNumber);",
									"",
									"const randomNum = Math.floor(Math.random() * 100);",
									"const firstName = pm.variables.get(\"putUserFirstName\") + randomNum;",
									"pm.variables.set(\"putUserFirstName\", firstName);"
								],
								"type": "text/javascript",
								"id": "dfa2dd34-16cb-492a-8ca6-ed39c904c7a4"
							}
						}
					],
					"id": "90f8ef32-dad4-450f-a293-d818793707a7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userComments\": \"{{putUserComments}}\",\n    \"userEduPg\": \"{{putUserEduPg}}\",\n    \"userEduUg\": \"{{putUserEduUg}}\",\n    \"userFirstName\": \"{{putUserFirstName}}\",\n    \"userLastName\": \"{{putUserLastName}}\",\n    \"userLinkedinUrl\": \"{{putUserLinkedinUrl}}\",\n    \"userLocation\": \"{{putUserLocation}}\",\n    \"userPhoneNumber\": {{putUserPhoneNumber}},\n    \"userTimeZone\": \"{{putUserTimeZone}}\",\n    \"userVisaStatus\": \"{{putUserVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/users/:userId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"users",
								":userId"
							],
							"variable": [
								{
									"id": "cea1a227-cbf3-48b4-bd9a-02d75d641d49",
									"key": "userId",
									"value": "{{adminUserId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user first name as null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(pm.variables.get(\"messagePutMandatoryFirstName\"));",
									"    pm.expect(responseJson.success).to.be.false;",
									"});"
								],
								"type": "text/javascript",
								"id": "0754a183-e0f4-42a1-816e-c035c767d301"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const phoneNumber = Math.floor(Math.random() * 10000000);",
									"pm.variables.set(\"putUserPhoneNumber\", phoneNumber);"
								],
								"type": "text/javascript",
								"id": "78498cbb-e776-4211-b4ac-aecd47d6f088"
							}
						}
					],
					"id": "64c8f5b5-3dd8-4519-9762-af1ba5805534",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userFirstName\": null,\n    \"userLastName\": \"{{putUserLastName}}\",\n    \"userPhoneNumber\": {{putUserPhoneNumber}},\n    \"userTimeZone\": \"{{putUserTimeZone}}\",\n    \"userVisaStatus\": \"{{putUserVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/users/:userId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"users",
								":userId"
							],
							"variable": [
								{
									"id": "93d28ed5-50e3-44cb-82c1-09cae53f9bb6",
									"key": "userId",
									"value": "{{adminUserId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user last name as null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(pm.variables.get(\"messagePutMandatoryLastName\"));",
									"    pm.expect(responseJson.success).to.be.false;",
									"});"
								],
								"type": "text/javascript",
								"id": "def27c50-da4a-467a-9ae0-09d78a7920ea"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const phoneNumber = Math.floor(Math.random() * 10000000);",
									"pm.variables.set(\"putUserPhoneNumber\", phoneNumber);",
									"",
									"const randomNum = Math.floor(Math.random() * 100);",
									"const firstName = pm.variables.get(\"putUserFirstName\") + randomNum;",
									"pm.variables.set(\"putUserFirstName\", firstName);"
								],
								"type": "text/javascript",
								"id": "959d9c8a-0a03-41fe-8d32-afd4e05baacd"
							}
						}
					],
					"id": "43d8cced-75a6-47a6-8b51-4117fb8d1ca4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userFirstName\": \"{{putUserFirstName}}\",\n    \"userLastName\": null,\n    \"userPhoneNumber\": {{putUserPhoneNumber}},\n    \"userTimeZone\": \"{{putUserTimeZone}}\",\n    \"userVisaStatus\": \"{{putUserVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/users/:userId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"users",
								":userId"
							],
							"variable": [
								{
									"id": "d8d1e0ca-b33d-4dc4-b3e7-1be8d74982e5",
									"key": "userId",
									"value": "{{adminUserId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user time zone as null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(pm.variables.get(\"messagePutMandatoryTimeZone\"));",
									"    pm.expect(responseJson.success).to.be.false;",
									"});"
								],
								"type": "text/javascript",
								"id": "04cede9d-f8bb-4f12-8b0c-0ebd7fc1aaf1"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const phoneNumber = Math.floor(Math.random() * 10000000);",
									"pm.variables.set(\"putUserPhoneNumber\", phoneNumber);",
									"",
									"const randomNum = Math.floor(Math.random() * 100);",
									"const firstName = pm.variables.get(\"putUserFirstName\") + randomNum;",
									"pm.variables.set(\"putUserFirstName\", firstName);"
								],
								"type": "text/javascript",
								"id": "8aeb4a26-b24f-4365-92e4-fd4d81835d6b"
							}
						}
					],
					"id": "2551971b-39ad-4d34-883e-7d8563c6da9f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userFirstName\": \"{{putUserFirstName}}\",\n    \"userLastName\": \"{{putUserLastName}}\",\n    \"userPhoneNumber\": {{putUserPhoneNumber}},\n    \"userTimeZone\": null,\n    \"userVisaStatus\": \"{{putUserVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/users/:userId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"users",
								":userId"
							],
							"variable": [
								{
									"id": "e3b56471-dea2-479d-b5e2-dd15f01ed7ff",
									"key": "userId",
									"value": "{{adminUserId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user visa status as null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(pm.variables.get(\"messagePutMandatoryVisaStatus\"));",
									"    pm.expect(responseJson.success).to.be.false;",
									"});"
								],
								"type": "text/javascript",
								"id": "9e8de6a4-7b40-4c9b-b6fd-4fde06e336a0"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const phoneNumber = Math.floor(Math.random() * 10000000);",
									"pm.variables.set(\"putUserPhoneNumber\", phoneNumber);",
									"",
									"const randomNum = Math.floor(Math.random() * 100);",
									"const firstName = pm.variables.get(\"putUserFirstName\") + randomNum;",
									"pm.variables.set(\"putUserFirstName\", firstName);"
								],
								"type": "text/javascript",
								"id": "8b332368-2f11-436a-8882-1db0e6631389"
							}
						}
					],
					"id": "9b0464b4-aebf-4683-b478-37f06d1fa9fc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userFirstName\": \"{{putUserFirstName}}\",\n    \"userLastName\": \"{{putUserLastName}}\",\n    \"userPhoneNumber\": {{putUserPhoneNumber}},\n    \"userTimeZone\": \"{{putUserTimeZone}}\",\n    \"userVisaStatus\": null\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/users/:userId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"users",
								":userId"
							],
							"variable": [
								{
									"id": "b75b9055-57aa-4d0a-a149-8dbde36aeb62",
									"key": "userId",
									"value": "{{adminUserId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user phone number as undefined",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});"
								],
								"type": "text/javascript",
								"id": "d4e2a9ba-17e9-4970-9533-301320f5add1"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.variables.set(\"putUserPhoneNumber\", undefined);",
									"",
									"const randomNum = Math.floor(Math.random() * 100);",
									"const firstName = pm.variables.get(\"putUserFirstName\") + randomNum;",
									"pm.variables.set(\"putUserFirstName\", firstName);"
								],
								"type": "text/javascript",
								"id": "853ef5c2-7c54-40c1-9fd5-05360920ec83"
							}
						}
					],
					"id": "71c20cd4-bcae-46d3-960d-4453cf32b220",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userFirstName\": \"{{putUserFirstName}}\",\n    \"userLastName\": \"{{putUserLastName}}\",\n    \"userPhoneNumber\": {{putUserPhoneNumber}},\n    \"userTimeZone\": \"{{putUserTimeZone}}\",\n    \"userVisaStatus\": \"{{putUserVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/users/:userId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"users",
								":userId"
							],
							"variable": [
								{
									"id": "af1514ae-1081-46ab-8215-298025d7a8b6",
									"key": "userId",
									"value": "{{adminUserId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Admin user by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.status).to.eql('OK');",
									"});",
									"",
									"// Test2- Validate the response body",
									"pm.test(\"Body is correct\", function () {",
									"    pm.response.to.have.body(\"Deleted User ID:  \" + pm.environment.get(\"adminUserId\"));",
									"});",
									"",
									"// unset env variable",
									"pm.environment.unset(\"adminUserId\");"
								],
								"type": "text/javascript",
								"id": "a8ed51a2-88d7-4f5f-b133-5241224d8d76"
							}
						}
					],
					"id": "dbe5aa11-5d9c-4888-9e22-3f976e33e0ec",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/users/users/:userID",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"users",
								":userID"
							],
							"variable": [
								{
									"id": "198b14ca-d3f6-4cb3-8066-56324c58979e",
									"key": "userID",
									"value": "{{adminUserId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create program",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"userProgramId\", pm.response.json().programId);"
								],
								"type": "text/javascript",
								"id": "226ff69d-5d8f-427e-9ca7-ae4edf91a2be"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomNum = Math.floor(Math.random() * 1000);",
									"const firstName = pm.variables.get(\"userProgramName\") + randomNum;",
									"pm.variables.set(\"userProgramName\", firstName);"
								],
								"type": "text/javascript",
								"id": "6d2c38c5-f1b6-4628-8811-b1153282730b"
							}
						}
					],
					"id": "737463d1-f3b8-41c5-888b-268fdad2759c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programDescription\": \"{{userProgramDescription}}\",\n  \"programName\": \"{{userProgramName}}\",\n  \"programStatus\": \"{{userProgramStatus}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "Create program batch",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"userBatchId\", pm.response.json().batchId);"
								],
								"type": "text/javascript",
								"id": "1e89a7b3-2884-40c6-855d-b24c457f20d5"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomNum = Math.floor(Math.random() * 1000);",
									"const firstName = pm.variables.get(\"userBatchName\") + randomNum;",
									"pm.variables.set(\"userBatchName\", firstName);"
								],
								"type": "text/javascript",
								"id": "9f1ba141-0cd8-4f74-ad45-54725b33b0cd"
							}
						}
					],
					"id": "ccdac5ee-62fe-48dd-91bd-a9b345929b67",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"batchDescription\": \"{{userBatchDescription}}\",\n  \"batchName\": \"{{userBatchName}}\",\n  \"batchNoOfClasses\": {{userBatchNoOfClasses}},\n  \"batchStatus\": \"{{userBatchStatus}}\",\n  \"programId\": {{userProgramId}}\n }\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Update batch Status with missing ProgramId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(\"Program Id is mandatory\");",
									"    pm.expect(responseJson.success).to.be.false;",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "ff643726-b2ce-4aa1-ab82-d2b385df3692"
							}
						}
					],
					"id": "8eb24089-4145-44b5-9489-b858bc12d5c2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"roleId\": \"{{roleId}}\",\n  \"userRoleProgramBatches\": [\n    {\n      \"batchId\": {{userBatchId}},\n      \"userRoleProgramBatchStatus\": \"{{userBatchStatus}}\"\n    }\n  ]\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/users/roleProgramBatchStatus/:userId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"users",
								"roleProgramBatchStatus",
								":userId"
							],
							"variable": [
								{
									"id": "da5a91c1-fa11-4916-ac76-2b8d3f0b5c24",
									"key": "userId",
									"value": "{{staffUserId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update batch Status with missing Roleid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(\"Role Id is mandatory\");",
									"    pm.expect(responseJson.success).to.be.false;",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "f58735a0-74ce-4f85-8296-18c05971407e"
							}
						}
					],
					"id": "9e2cf5b1-5ef4-400f-833a-88dd21d9c487",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"programId\": {{userProgramId}},\n    \"userRoleProgramBatches\": [\n    {\n      \"batchId\": {{userBatchId}},\n      \"userRoleProgramBatchStatus\": \"{{userBatchStatus}}\"\n    }\n  ]\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/users/roleProgramBatchStatus/:userId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"users",
								"roleProgramBatchStatus",
								":userId"
							],
							"variable": [
								{
									"id": "2a2f8ade-d1c8-4eca-be64-faf1bf7e24cf",
									"key": "userId",
									"value": "{{staffUserId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update batch Status with missing Batch id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(\"Batch Id is mandatory\");",
									"    pm.expect(responseJson.success).to.be.false;",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "e6692115-6c51-4702-914f-7fdac03fd9da"
							}
						}
					],
					"id": "4a527e61-f4ba-462e-8ba2-c925e030f61e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"programId\": {{userProgramId}},\n    \"roleId\": \"{{roleId}}\",\n    \"userRoleProgramBatches\": [\n    {\n      \"userRoleProgramBatchStatus\": \"{{userBatchStatus}}\"\n    }\n  ]\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/users/roleProgramBatchStatus/:userId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"users",
								"roleProgramBatchStatus",
								":userId"
							],
							"variable": [
								{
									"id": "2d377dea-5c58-4598-b2e5-03b0c718cec7",
									"key": "userId",
									"value": "{{staffUserId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update batch Status with missing Batch status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(\"User-Role-Program-Batch Status is Mandatory\");",
									"    pm.expect(responseJson.success).to.be.false;",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "e60d0fbc-f149-452a-8469-cb891e4d7e5c"
							}
						}
					],
					"id": "3b736f23-ed53-4cb2-8715-5a672da3c299",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"programId\": {{userProgramId}},\n    \"roleId\": \"{{roleId}}\",\n    \"userRoleProgramBatches\": [\n    {\n        \"batchId\": {{userBatchId}}\n    }\n  ]\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/users/roleProgramBatchStatus/:userId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"users",
								"roleProgramBatchStatus",
								":userId"
							],
							"variable": [
								{
									"id": "93f782d6-3712-4392-afbe-ae59410e436c",
									"key": "userId",
									"value": "{{staffUserId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update batch status with invalid programid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 404 Not Found\", function () {",
									"    pm.response.to.have.status(404);",
									"    pm.expect(pm.response.status).to.eql('Not Found');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(\"Program \" + pm.variables.get(\"invalidProgramid\") + \" not found with Program Status : \" + pm.variables.get(\"userBatchStatus\") + \" \");",
									"    pm.expect(responseJson.success).to.be.false;",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "0546850a-df37-40fa-a2ba-ce3a11a89682"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomNum = Math.floor(Math.random() * 10000000);",
									"pm.variables.set(\"invalidProgramid\", randomNum);"
								],
								"type": "text/javascript",
								"id": "b96b03f1-d8bd-472e-b89b-5ddbe0c4dadd"
							}
						}
					],
					"id": "12fb560a-8832-49a3-87fa-839718824886",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programId\": {{invalidProgramid}},\n  \"roleId\": \"{{roleId}}\",\n  \"userRoleProgramBatches\": [\n    {\n      \"batchId\": {{userBatchId}},\n      \"userRoleProgramBatchStatus\": \"{{userBatchStatus}}\"\n    }\n  ]\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/users/roleProgramBatchStatus/:userId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"users",
								"roleProgramBatchStatus",
								":userId"
							],
							"variable": [
								{
									"id": "04c594fb-139d-40a1-8b3e-b9345558f5a2",
									"key": "userId",
									"value": "{{staffUserId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update batch status with invalid batchid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(\"Batch \" + pm.variables.get(\"batchId\") + \"not found with Status as Active for Program \" + pm.variables.get(\"programId\"));",
									"    pm.expect(responseJson.success).to.be.false;",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "90741a61-badf-4ed4-9b4e-b17aad5bdc0a"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomNum = Math.floor(Math.random() * 10000000);",
									"pm.variables.set(\"invalidBatchid\", randomNum);"
								],
								"type": "text/javascript",
								"id": "b80028a7-7b82-4ca4-a243-86be0d5fb764"
							}
						}
					],
					"id": "02e31db2-43d4-4a43-8ab8-0094ac01450d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programId\": {{userProgramId}},\n  \"roleId\": \"{{roleId}}\",\n  \"userRoleProgramBatches\": [\n    {\n      \"batchId\": {{invalidBatchid}},\n      \"userRoleProgramBatchStatus\": \"{{userBatchStatus}}\"\n    }\n  ]\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/users/roleProgramBatchStatus/:userId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"users",
								"roleProgramBatchStatus",
								":userId"
							],
							"variable": [
								{
									"id": "05e4ed28-7b8d-4f35-a3d0-b1c233b4ef2b",
									"key": "userId",
									"value": "{{staffUserId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user role program batch status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.status).to.eql('OK');",
									"});",
									"",
									"// Test2- Validate the response body",
									"pm.test(\"Body is correct\", function () {",
									"    pm.response.to.have.body(\"User \" + pm.environment.get(\"staffUserId\") + \" has been successfully assigned to Program/Batch(es)\");",
									"});"
								],
								"type": "text/javascript",
								"id": "5093cef1-eb9b-4efb-a8e1-245a4700abf9"
							}
						}
					],
					"id": "55415624-bf80-4e59-9113-750713a455f6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programId\": {{userProgramId}},\n  \"roleId\": \"{{roleId}}\",\n  \"userRoleProgramBatches\": [\n    {\n      \"batchId\": {{userBatchId}},\n      \"userRoleProgramBatchStatus\": \"{{userBatchStatus}}\"\n    }\n  ]\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/users/roleProgramBatchStatus/:userId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"users",
								"roleProgramBatchStatus",
								":userId"
							],
							"variable": [
								{
									"id": "509d7522-360a-44e3-8f0d-c2bdea1458f1",
									"key": "userId",
									"value": "{{staffUserId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Staff user by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.status).to.eql('OK');",
									"});",
									"",
									"// Test2- Validate the response body",
									"pm.test(\"Body is correct\", function () {",
									"    pm.response.to.have.body(\"Deleted User ID:  \" + pm.environment.get(\"staffUserId\"));",
									"});",
									"",
									"// unset env variable",
									"pm.environment.unset(\"staffUserId\");"
								],
								"type": "text/javascript",
								"id": "f51c0102-b7ab-4d93-a657-d5dad8f4a83a"
							}
						}
					],
					"id": "aac7c54c-a9ef-4336-ade2-a2e0046ba99d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/users/users/:userID",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"users",
								":userID"
							],
							"variable": [
								{
									"id": "45bd27d2-40dc-41f8-8bd5-ae95dd63d1e5",
									"key": "userID",
									"value": "{{staffUserId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Student user by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.status).to.eql('OK');",
									"});",
									"",
									"// Test2- Validate the response body",
									"pm.test(\"Body is correct\", function () {",
									"    pm.response.to.have.body(\"Deleted User ID:  \" + pm.environment.get(\"studentUserId\"));",
									"});",
									"",
									"pm.environment.unset(\"studentUserId\");"
								],
								"type": "text/javascript",
								"id": "4c5c4480-b868-4ab0-8a11-e3f20b235a4c"
							}
						}
					],
					"id": "e09d4689-504a-4bdf-8513-42951b9f707e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/users/users/:userID",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"users",
								":userID"
							],
							"variable": [
								{
									"id": "c2c31769-29d7-47ac-88ac-a96eba7bc61b",
									"key": "userID",
									"value": "{{studentUserId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Program Batch by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "84086ca1-904c-4629-bc30-a68abdbdc248",
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.status).to.eql('OK');",
									"});",
									"",
									"pm.environment.unset(\"userBatchId\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "860ca4a4-f58d-4afa-be9a-8f518998d280",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURL}}/batches/{{userBatchId}}"
					},
					"response": []
				},
				{
					"name": "Delete program by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1f2fba6a-2cb2-4182-bac8-10634d2b9062",
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.status).to.eql('OK');",
									"});",
									"",
									"pm.environment.unset(\"userProgramId\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "f809f492-e48e-4e68-9b12-1423c3605d27",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/deletebyprogid/:programId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"deletebyprogid",
								":programId"
							],
							"variable": [
								{
									"key": "programId",
									"value": "{{userProgramId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new user only mandatory fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 201 Created\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.expect(pm.response.status).to.eql('Created');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"      \"userId\",",
									"      \"userFirstName\",",
									"      \"userLastName\",",
									"      \"userPhoneNumber\",",
									"      \"userTimeZone\",",
									"      \"userLinkedinUrl\",",
									"      \"userEduUg\",",
									"      \"userEduPg\",",
									"      \"userVisaStatus\"",
									"    ],",
									"    \"properties\": {",
									"        \"userId\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userFirstName\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userLastName\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userPhoneNumber\": {",
									"            \"type\": \"integer\"",
									"        },",
									"        \"userTimeZone\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userVisaStatus\": {",
									"            \"type\": \"string\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test4 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test5 - Validate userId starts with U",
									"pm.test(\"Auto-created userId should have U\", () => {",
									"    pm.expect(responseJson.userId).to.contain('U');",
									"});",
									"",
									"// Test6 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.userFirstName).to.eql(pm.variables.get(\"userFirstName\"));",
									"    pm.expect(responseJson.userLastName).to.eql(pm.variables.get(\"userLastName\"));",
									"    pm.expect(responseJson.userMiddleName).to.be.undefined;",
									"    pm.expect(responseJson.userPhoneNumber).to.eql(parseInt(pm.variables.get(\"userPhoneNumber\")));",
									"    pm.expect(responseJson.userLocation).to.be.null;",
									"    pm.expect(responseJson.userTimeZone).to.eql(pm.variables.get(\"userTimeZone\"));",
									"    pm.expect(responseJson.userLinkedinUrl).to.be.null;",
									"    pm.expect(responseJson.userEduUg).to.be.null;",
									"    pm.expect(responseJson.userEduPg).to.be.null;",
									"    pm.expect(responseJson.userComments).to.be.undefined;",
									"    pm.expect(responseJson.userVisaStatus).to.eql(pm.variables.get(\"userVisaStatus\"));",
									"});",
									"",
									"// Set global variables from response, to be used by other requests",
									"if(responseJson)",
									"{",
									"    pm.environment.set(\"userId\", responseJson.userId);",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "26fb00e6-f55b-4314-b3a0-5ae6f3baf8cd"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const phoneNumber = Math.floor(Math.random() * 10000000);",
									"pm.environment.set(\"userPhoneNumber\", phoneNumber);",
									"",
									"const randomNum = Math.floor(Math.random() * 100);",
									"const firstName = pm.variables.get(\"userFirstName\") + randomNum;",
									"pm.variables.set(\"userFirstName\", firstName);"
								],
								"type": "text/javascript",
								"id": "790edd37-4c51-4da9-ae5e-8e00a3029bac"
							}
						}
					],
					"id": "d4f480e9-e5d7-46bf-90bf-e717d58d671a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userFirstName\": \"{{userFirstName}}\",\n    \"userLastName\": \"{{userLastName}}\",\n    \"userPhoneNumber\": {{userPhoneNumber}},\n    \"userRoleMaps\": [\n        {\n            \"roleId\": \"{{roleId}}\",\n            \"userRoleStatus\": \"{{userRoleStatus}}\"\n        }\n    ],\n    \"userTimeZone\": \"{{userTimeZone}}\",\n    \"userVisaStatus\": \"{{userVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create new user with duplicate phone number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(\"Failed to create new User as phone number \" + pm.environment.get(\"userPhoneNumber\") + \" already exists !!\");",
									"    pm.expect(responseJson.success).to.be.false;",
									"});",
									"",
									"pm.environment.unset(\"userPhoneNumber\");"
								],
								"type": "text/javascript",
								"id": "6033a87c-5e02-4dc3-bedc-879015cbe45f"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomNum = Math.floor(Math.random() * 100);",
									"const firstName = pm.variables.get(\"userFirstName\") + randomNum;",
									"pm.variables.set(\"userFirstName\", firstName);"
								],
								"type": "text/javascript",
								"id": "ec1ff88f-0421-467d-882a-c724b6f90346"
							}
						}
					],
					"id": "6d39cdbc-0a1e-4360-88b1-933e77fc8f6d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userComments\": \"{{userComments}}\",\n    \"userEduPg\": \"{{userEduPg}}\",\n    \"userEduUg\": \"{{userEduUg}}\",\n    \"userFirstName\": \"{{userFirstName}}\",\n    \"userLastName\": \"{{userLastName}}\",\n    \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n    \"userLocation\": \"{{userLocation}}\",\n    \"userPhoneNumber\": {{userPhoneNumber}},\n    \"userMiddleName\": \"\",\n    \"userRoleMaps\": [\n        {\n            \"roleId\": \"{{roleId}}\",\n            \"userRoleStatus\": \"{{userRoleStatus}}\"\n        }\n    ],\n    \"userTimeZone\": \"{{userTimeZone}}\",\n    \"userVisaStatus\": \"{{userVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Update User role status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.status).to.eql('OK');",
									"});",
									"",
									"// Test2- Validate the response body",
									"pm.test(\"Body is correct\", function () {",
									"    pm.response.to.have.body(pm.variables.get(\"messageUpdateStatusSuccess\") +  pm.environment.get(\"userId\"));",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "a2cd36a1-dd08-4d9b-ac7f-8e7a2703f09c"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "24c9a1ea-5e85-4f84-8f7d-7bce8af44d22"
							}
						}
					],
					"id": "a803c74a-01d3-45e9-bdf0-e76c99775563",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"roleId\": \"{{roleId}}\",\n    \"userRoleStatus\": \"{{userRoleStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/users/roleStatus/:userID",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"users",
								"roleStatus",
								":userID"
							],
							"variable": [
								{
									"id": "88c9d3c8-6013-4d81-877f-4339eac5b5aa",
									"key": "userID",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User role roleStatus as integer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.status).to.eql('OK');",
									"});",
									"",
									"// Test2- Validate the response body",
									"pm.test(\"Body is correct\", function () {",
									"    pm.response.to.have.body(pm.variables.get(\"messageUpdateStatusSuccess\") +  pm.environment.get(\"userId\"));",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "89f79d22-f0b2-4043-a58b-bdfcd68501f0"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "8e42e585-e2ef-466b-ba8a-0ece158a2dbe"
							}
						}
					],
					"id": "70bc0f70-083d-49bf-a4be-ff0ab3263263",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"roleId\": \"{{roleId}}\",\n    \"userRoleStatus\": {{integerRoleStatus}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/users/roleStatus/:userID",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"users",
								"roleStatus",
								":userID"
							],
							"variable": [
								{
									"id": "37b4e912-01ee-42be-812f-4835ff06e0e7",
									"key": "userID",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User role roleId as integer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 404 Not Found\", function () {",
									"    pm.response.to.have.status(404);",
									"    pm.expect(pm.response.status).to.eql('Not Found');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(pm.variables.get(\"message1UpdateStatusRoleid\") + pm.variables.get(\"integerUserRoleId\") + pm.variables.get(\"message2UpdateStatusRoleid\") + pm.variables.get(\"userId\"));",
									"    pm.expect(responseJson.success).to.be.false;",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "e374117e-31a5-47b2-97e7-317348056a5d"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "a3bf7bb4-03f2-4fc0-9c8c-c7c29a1209f5"
							}
						}
					],
					"id": "9493b5b5-94b8-442c-a16e-101060bbca3a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"roleId\": {{integerUserRoleId}},\n    \"userRoleStatus\": \"{{userRoleStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/users/roleStatus/:userID",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"users",
								"roleStatus",
								":userID"
							],
							"variable": [
								{
									"id": "a4ab5e05-302b-436d-a334-98891ec1a4fb",
									"key": "userID",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User role status with blank roleStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(pm.variables.get(\"messageMandatoryRoleStatus\"));",
									"    pm.expect(responseJson.success).to.be.false;",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "2688973e-d421-41ca-a033-045a9ad276a3"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "93cd948f-e01d-4f9e-9301-070d74cb8000"
							}
						}
					],
					"id": "647a2172-2e53-4b34-bdf5-e6f60b705e0c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"roleId\": \"{{roleId}}\",\n    \"userRoleStatus\": \"{{blankUserRoleStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/users/roleStatus/:userID",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"users",
								"roleStatus",
								":userID"
							],
							"variable": [
								{
									"id": "b536a997-c2f6-4482-a8db-414d9699a2bb",
									"key": "userID",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User role status with blank roleId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(pm.variables.get(\"messageMandatoryRoleid\"));",
									"    pm.expect(responseJson.success).to.be.false;",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "d9ebd938-19b3-4849-a37b-62486ae795b2"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "b91348ad-7477-4385-9f98-a7f246d1550e"
							}
						}
					],
					"id": "c00bf112-b0aa-4601-91a4-70ccf211093a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"roleId\": \"{{blankRoleId}}\",\n    \"userRoleStatus\": \"{{userRoleStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/users/roleStatus/:userID",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"users",
								"roleStatus",
								":userID"
							],
							"variable": [
								{
									"id": "7215afbb-2bf6-4901-ab12-f0481fb8417b",
									"key": "userID",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User role missing roleId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(pm.variables.get(\"messageMandatoryRoleid\"));",
									"    pm.expect(responseJson.success).to.be.false;",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "642901d3-c2bb-49b7-94bc-d60639e28e8a"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "4c1feb14-cd7b-4253-8cab-20c9144ade1e"
							}
						}
					],
					"id": "d3d8bb82-7813-402c-8f2d-fcd4039fd05b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userRoleStatus\": \"{{userRoleStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/users/roleStatus/:userID",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"users",
								"roleStatus",
								":userID"
							],
							"variable": [
								{
									"id": "853a9af7-77fe-406e-a712-9d160ba1d012",
									"key": "userID",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User role missing role status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(pm.variables.get(\"messageMandatoryRoleStatus\"));",
									"    pm.expect(responseJson.success).to.be.false;",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "9a713270-0e45-4316-be79-d86ef3b24ba9"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "e1e92b22-754e-4af6-a83f-bff6db30df42"
							}
						}
					],
					"id": "6603bb6c-2c57-4074-a18b-8a7eb7fa304f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"roleId\": \"{{roleId}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/users/roleStatus/:userID",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"users",
								"roleStatus",
								":userID"
							],
							"variable": [
								{
									"id": "e2b8c740-c501-4cbf-aae8-3a2d9723cd0f",
									"key": "userID",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Use Update userRole API to update roleId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 404 Not Found\", function () {",
									"    pm.response.to.have.status(404);",
									"    pm.expect(pm.response.status).to.eql('Not Found');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(pm.variables.get(\"messageUpdateRoleStatusInvalidroleid\") + pm.variables.get(\"userId\"));",
									"    pm.expect(responseJson.success).to.be.false;",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "c5b52934-1f5e-4e88-956c-d035dcaadb64"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "919e2aa6-4858-4c19-a5de-5c8ff0bbb3dd"
							}
						}
					],
					"id": "a143f3b0-2c81-446e-85e2-53a81bd8a75c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"roleId\": \"{{invalidUserRoleId}}\",\n    \"userRoleStatus\": \"{{userRoleStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}/users/users/roleStatus/:userID",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"users",
								"roleStatus",
								":userID"
							],
							"variable": [
								{
									"id": "bff34707-0274-4c52-87e3-1388215f5b83",
									"key": "userID",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Users with Roles to verify role updates",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.status).to.eql('OK');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"var schema = {",
									"  \"type\": \"array\",",
									"  \"items\": {",
									"      \"type\": \"object\",",
									"      \"required\": [",
									"          \"userRoleId\",",
									"          \"user\",",
									"          \"role\",",
									"          \"batches\",",
									"          \"userRoleStatus\"",
									"      ],",
									"      \"properties\": {",
									"          \"userRoleId\": {",
									"              \"type\": \"integer\"",
									"          },",
									"          \"user\": {",
									"              \"type\": \"object\",",
									"              \"required\": [",
									"                  \"userId\",",
									"                  \"userFirstName\",",
									"                  \"userLastName\",",
									"                  \"userPhoneNumber\",",
									"                  \"userTimeZone\",",
									"                  \"userVisaStatus\",",
									"                  \"hibernateLazyInitializer\"",
									"              ],",
									"              \"properties\": {",
									"                  \"userId\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"userFirstName\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"userLastName\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"userPhoneNumber\": {",
									"                      \"type\": \"integer\"",
									"                  },",
									"                  \"userTimeZone\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"userVisaStatus\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"hibernateLazyInitializer\": {",
									"                      \"type\": \"object\"",
									"                  }",
									"                }",
									"          },",
									"          \"role\": {",
									"              \"type\": \"object\",",
									"              \"required\": [",
									"                  \"roleId\",",
									"                  \"roleName\",",
									"                  \"roleDesc\",",
									"                  \"creationTime\",",
									"                  \"lastModTime\",",
									"                  \"hibernateLazyInitializer\"",
									"              ],",
									"              \"properties\": {",
									"                  \"roleId\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"roleName\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"roleDesc\": {",
									"                      \"type\": \"string\"",
									"                  },",
									"                  \"creationTime\": {",
									"                      \"type\": \"null\"",
									"                  },",
									"                  \"lastModTime\": {",
									"                      \"type\": \"null\"",
									"                  },",
									"                  \"hibernateLazyInitializer\": {",
									"                      \"type\": \"object\"",
									"                  }",
									"              }",
									"           },",
									"          \"batches\": {",
									"              \"type\": \"array\",",
									"              \"items\": {}",
									"          },",
									"          \"userRoleStatus\": {",
									"              \"type\": \"string\"",
									"          }",
									"      }",
									"  }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Filter user updated earlier",
									"var filteredUser = responseJson.filter((user) => user.user.userId === pm.environment.get(\"userId\"));",
									"",
									"// Test4 - Validate the user",
									"pm.test(\"user created should be in All users\", () => {",
									"    pm.expect(filteredUser.length).to.eql(1);",
									"    pm.expect(filteredUser[0]).to.be.an('object');",
									"});",
									"",
									"// Test5 - Validate the updated details",
									"pm.test(\"Details updated\", () => {",
									"    pm.expect(filteredUser[0].role.roleId).to.eql(pm.variables.get(\"roleId\"));",
									"    pm.expect(parseInt(filteredUser[0].userRoleStatus)).to.eql(parseInt(pm.variables.get(\"integerRoleStatus\")));",
									"});"
								],
								"type": "text/javascript",
								"id": "0766de56-eeaa-4a3c-85df-879df6a01f1e"
							}
						}
					],
					"id": "77e74811-7e04-45ad-b724-5a7536964bcc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/users/users/roles"
					},
					"response": []
				},
				{
					"name": "Delete User by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.status).to.eql('OK');",
									"});",
									"",
									"// Test2- Validate the response body",
									"pm.test(\"Body is correct\", function () {",
									"    pm.response.to.have.body(\"Deleted User ID:  \" + pm.environment.get(\"userId\"));",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "aea01159-b242-4f04-ac5c-af52f782d78a"
							}
						}
					],
					"id": "c268bb19-88ff-4a71-a512-93328271f35a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/users/users/:userID",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"users",
								":userID"
							],
							"variable": [
								{
									"id": "4f7ad0f2-826f-4627-8130-0089c49b36b3",
									"key": "userID",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get deleted user by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 404 Not Found\", function () {",
									"    pm.response.to.have.status(404);",
									"    pm.expect(pm.response.status).to.eql('Not Found');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(\"User Id \" + pm.environment.get(\"userId\") + \" not found\");",
									"    pm.expect(responseJson.success).to.be.false;",
									"});",
									"",
									"pm.environment.unset(\"userId\");"
								],
								"type": "text/javascript",
								"id": "a6b4502d-3174-4833-8831-97f6610f1b31"
							}
						}
					],
					"id": "5158b4dc-cfe6-4621-9f1d-5e732eaff17f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/users/users/:userId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"users",
								":userId"
							],
							"variable": [
								{
									"id": "11e03b6b-bfc8-4421-a673-7dabd2a6df9b",
									"key": "userId",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user by id using id without U",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 404 Not Found\", function () {",
									"    pm.response.to.have.status(404);",
									"    pm.expect(pm.response.status).to.eql('Not Found');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(\"User Id \" + pm.variables.get(\"userId\") + \" not found\");",
									"    pm.expect(responseJson.success).to.be.false;",
									"});",
									"",
									"pm.variables.unset(\"userId\");"
								],
								"type": "text/javascript",
								"id": "25504722-daed-4be6-851a-2993c26eded8"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomNum = Math.floor(Math.random() * 10000000);",
									"pm.variables.set(\"userId\", randomNum);"
								],
								"type": "text/javascript",
								"id": "49ffa193-3fb4-46c7-b08f-a3b75efdfdab"
							}
						}
					],
					"id": "66ba6912-b66f-45c5-a640-1ebbef1680fc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/users/users/:userId",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"users",
								":userId"
							],
							"variable": [
								{
									"id": "ab17acaf-229e-489d-8f9a-ddb04a5ca55e",
									"key": "userId",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new user with string values as integers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 201 Created\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.expect(pm.response.status).to.eql('Created');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"     \"required\": [",
									"      \"userId\",",
									"      \"userFirstName\",",
									"      \"userLastName\",",
									"      \"userMiddleName\",",
									"      \"userPhoneNumber\",",
									"      \"userLocation\",",
									"      \"userTimeZone\",",
									"      \"userLinkedinUrl\",",
									"      \"userEduUg\",",
									"      \"userEduPg\",",
									"      \"userComments\",",
									"      \"userVisaStatus\"",
									"    ],",
									"    \"properties\": {",
									"        \"userId\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userFirstName\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userLastName\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userMiddleName\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userPhoneNumber\": {",
									"            \"type\": \"integer\"",
									"        },",
									"        \"userLocation\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userTimeZone\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userLinkedinUrl\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userEduUg\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userEduPg\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userComments\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"userVisaStatus\": {",
									"            \"type\": \"string\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test4 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test5 - Validate userId starts with U",
									"pm.test(\"Auto-created userId should have U\", () => {",
									"    pm.expect(responseJson.userId).to.contain('U');",
									"});",
									"",
									"// Test6 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.userFirstName).to.be.string;",
									"    pm.expect(responseJson.userLastName).to.be.string;",
									"    pm.expect(responseJson.userMiddleName).to.be.string;",
									"    pm.expect(responseJson.userEduUg).to.be.string;",
									"    pm.expect(responseJson.userEduPg).to.be.string;",
									"    pm.expect(responseJson.userComments).to.be.string;",
									"    pm.expect(responseJson.userLinkedinUrl).to.be.string;",
									"    pm.expect(responseJson.userLocation).to.be.string;",
									"    pm.expect(responseJson.userVisaStatus).to.be.string;",
									"    pm.expect(parseInt(responseJson.userFirstName)).to.eql(pm.variables.get(\"userFirstName\"));",
									"    pm.expect(parseInt(responseJson.userLastName)).to.eql(pm.variables.get(\"userLastName\"));",
									"    pm.expect(parseInt(responseJson.userMiddleName)).to.eql(pm.variables.get(\"userMiddleName\"));",
									"    pm.expect(responseJson.userPhoneNumber).to.eql(parseInt(pm.environment.get(\"userPhoneNumber\")));",
									"    pm.expect(parseInt(responseJson.userLocation)).to.eql(pm.variables.get(\"userLocation\"));",
									"    pm.expect(responseJson.userTimeZone).to.eql(pm.variables.get(\"userTimeZone\"));",
									"    pm.expect(parseInt(responseJson.userLinkedinUrl)).to.eql(pm.variables.get(\"userLinkedinUrl\"));",
									"    pm.expect(parseInt(responseJson.userEduUg)).to.eql(pm.variables.get(\"userEduUg\"));",
									"    pm.expect(parseInt(responseJson.userEduPg)).to.eql(pm.variables.get(\"userEduPg\"));",
									"    pm.expect(parseInt(responseJson.userComments)).to.eql(pm.variables.get(\"userComments\"));",
									"    pm.expect(responseJson.userVisaStatus).to.eql(pm.variables.get(\"userVisaStatus\"));",
									"});",
									"",
									"// Set global variables from response, to be used by other requests",
									"pm.environment.set(\"userId\", responseJson.userId);",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "7d0bc8b5-d6c5-4077-b6e2-e7d0694b253e"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const phoneNumber = Math.floor(Math.random() * 10000000);",
									"pm.environment.set(\"userPhoneNumber\", phoneNumber);",
									"",
									"pm.variables.set(\"userFirstName\", phoneNumber);",
									"pm.variables.set(\"userLastName\", phoneNumber);",
									"pm.variables.set(\"userMiddleName\", phoneNumber);",
									"pm.variables.set(\"userComments\", phoneNumber);",
									"pm.variables.set(\"userEduPg\", phoneNumber);",
									"pm.variables.set(\"userEduUg\", phoneNumber);",
									"pm.variables.set(\"userLinkedinUrl\", phoneNumber);",
									"pm.variables.set(\"userLocation\", phoneNumber);",
									"pm.variables.set(\"userRoleStatus\", phoneNumber);"
								],
								"type": "text/javascript",
								"id": "c2fe092d-4a72-4d1b-9a59-10f4368b3427"
							}
						}
					],
					"id": "b86d79b9-3ce7-4857-84d8-2aee93a5e994",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userComments\": {{userComments}},\n    \"userEduPg\": {{userEduPg}},\n    \"userEduUg\": {{userEduUg}},\n    \"userFirstName\": {{userFirstName}},\n    \"userLastName\": {{userLastName}},\n    \"userLinkedinUrl\": {{userLinkedinUrl}},\n    \"userLocation\": {{userLocation}},\n    \"userMiddleName\": {{userMiddleName}},\n    \"userPhoneNumber\": {{userPhoneNumber}},\n    \"userRoleMaps\": [\n        {\n            \"roleId\": \"{{roleId}}\",\n            \"userRoleStatus\": {{userRoleStatus}}\n        }\n    ],\n    \"userTimeZone\": \"{{userTimeZone}}\",\n    \"userVisaStatus\": \"{{userVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Delete User by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.status).to.eql('OK');",
									"});",
									"",
									"// Test2- Validate the response body",
									"pm.test(\"Body is correct\", function () {",
									"    pm.response.to.have.body(\"Deleted User ID:  \" + pm.environment.get(\"userId\"));",
									"});",
									"",
									"pm.environment.unset(\"userId\");"
								],
								"type": "text/javascript",
								"id": "f8526a36-c415-46f5-8215-f38cabee77ab"
							}
						}
					],
					"id": "1dfc2b5b-8249-4fad-a935-a6c2a4f3e20a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}/users/users/:userID",
							"host": [
								"{{BaseURL}}"
							],
							"path": [
								"users",
								"users",
								":userID"
							],
							"variable": [
								{
									"id": "673acc09-fd51-481f-b7b9-dd68a44c4bde",
									"key": "userID",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new user with missing phone number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(pm.variables.get(\"messageMissingPhone\"));",
									"    pm.expect(responseJson.success).to.be.false;",
									"});"
								],
								"type": "text/javascript",
								"id": "ef03e682-7320-4c1b-b946-33e6c81cff3a"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomNum = Math.floor(Math.random() * 100);",
									"const firstName = pm.variables.get(\"userFirstName\") + randomNum;",
									"pm.variables.set(\"userFirstName\", firstName);"
								],
								"type": "text/javascript",
								"id": "23be93ca-53d3-425c-9736-89f192ceefdb"
							}
						}
					],
					"id": "7c9d6e0b-b78d-4357-afe6-725bcbd491de",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userComments\": \"{{userComments}}\",\n    \"userEduPg\": \"{{userEduPg}}\",\n    \"userEduUg\": \"{{userEduUg}}\",\n    \"userFirstName\": \"{{userFirstName}}\",\n    \"userLastName\": \"{{userLastName}}\",\n    \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n    \"userLocation\": \"{{userLocation}}\",\n    \"userMiddleName\": \"\",\n    \"userRoleMaps\": [\n        {\n            \"roleId\": \"{{roleId}}\",\n            \"userRoleStatus\": \"{{userRoleStatus}}\"\n        }\n    ],\n    \"userTimeZone\": \"{{userTimeZone}}\",\n    \"userVisaStatus\": \"{{userVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create new user with blank phone number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(pm.variables.get(\"messageMissingPhone\"));",
									"    pm.expect(responseJson.success).to.be.false;",
									"});"
								],
								"type": "text/javascript",
								"id": "337252b1-9f67-42d6-b4f2-c37f7564ee1b"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userPhoneNumber\", undefined);",
									"",
									"const randomNum = Math.floor(Math.random() * 100);",
									"const firstName = pm.variables.get(\"userFirstName\") + randomNum;",
									"pm.variables.set(\"userFirstName\", firstName);"
								],
								"type": "text/javascript",
								"id": "c52ce4f9-f51e-449f-a50b-010afe550fff"
							}
						}
					],
					"id": "e03aa25d-0ad4-4759-aacb-e3b72d3088fe",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userComments\": \"{{userComments}}\",\n    \"userEduPg\": \"{{userEduPg}}\",\n    \"userEduUg\": \"{{userEduUg}}\",\n    \"userFirstName\": \"{{userFirstName}}\",\n    \"userLastName\": \"{{userLastName}}\",\n    \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n    \"userLocation\": \"{{userLocation}}\",\n    \"userPhoneNumber\": {{userPhoneNumber}},\n    \"userMiddleName\": \"\",\n    \"userRoleMaps\": [\n        {\n            \"roleId\": \"{{roleId}}\",\n            \"userRoleStatus\": \"{{userRoleStatus}}\"\n        }\n    ],\n    \"userTimeZone\": \"{{userTimeZone}}\",\n    \"userVisaStatus\": \"{{userVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create new user with string phone number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(pm.variables.get(\"messageStringPhone\"));",
									"    pm.expect(responseJson.success).to.be.false;",
									"});"
								],
								"type": "text/javascript",
								"id": "994b1e64-22db-47c4-a630-67c14bec4aea"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const randomNum = Math.floor(Math.random() * 100);",
									"const firstName = pm.variables.get(\"userFirstName\") + randomNum;",
									"pm.variables.set(\"userFirstName\", firstName);"
								],
								"type": "text/javascript",
								"id": "bb2e5d52-4f54-4708-bf6b-49b1702b1708"
							}
						}
					],
					"id": "8a9a1b57-d5e5-4c90-af7f-a404a963f531",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userComments\": \"{{userComments}}\",\n    \"userEduPg\": \"{{userEduPg}}\",\n    \"userEduUg\": \"{{userEduUg}}\",\n    \"userFirstName\": \"{{userFirstName}}\",\n    \"userLastName\": \"{{userLastName}}\",\n    \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n    \"userLocation\": \"{{userLocation}}\",\n    \"stringUserPhoneNumber\": \"{{stringUserPhoneNumber}}\",\n    \"userMiddleName\": \"\",\n    \"userRoleMaps\": [\n        {\n            \"roleId\": \"{{roleId}}\",\n            \"userRoleStatus\": \"{{userRoleStatus}}\"\n        }\n    ],\n    \"userTimeZone\": \"{{userTimeZone}}\",\n    \"userVisaStatus\": \"{{userVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create new user with missing role id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(pm.variables.get(\"messageMandatoryRoleid\"));",
									"    pm.expect(responseJson.success).to.be.false;",
									"});"
								],
								"type": "text/javascript",
								"id": "5b04e4cd-f853-46b4-bd41-90835a610071"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const phoneNumber = Math.floor(Math.random() * 10000000);",
									"pm.environment.set(\"userPhoneNumber\", phoneNumber);",
									"",
									"const randomNum = Math.floor(Math.random() * 100);",
									"const firstName = pm.variables.get(\"userFirstName\") + randomNum;",
									"pm.variables.set(\"userFirstName\", firstName);"
								],
								"type": "text/javascript",
								"id": "69010f15-cda0-421d-951c-5a03a64c03a3"
							}
						}
					],
					"id": "706b5d0e-7ce8-4812-a1bd-57c93ce258ba",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userComments\": \"{{userComments}}\",\n    \"userEduPg\": \"{{userEduPg}}\",\n    \"userEduUg\": \"{{userEduUg}}\",\n    \"userFirstName\": \"{{userFirstName}}\",\n    \"userLastName\": \"{{userLastName}}\",\n    \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n    \"userLocation\": \"{{userLocation}}\",\n    \"userMiddleName\": \"\",\n    \"userPhoneNumber\": {{userPhoneNumber}},\n    \"userRoleMaps\": [\n        {\n            \"userRoleStatus\": \"{{userRoleStatus}}\"\n        }\n    ],\n    \"userTimeZone\": \"{{userTimeZone}}\",\n    \"userVisaStatus\": \"{{userVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create new user with blank role id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(pm.variables.get(\"messageMandatoryRoleid\"));",
									"    pm.expect(responseJson.success).to.be.false;",
									"});"
								],
								"type": "text/javascript",
								"id": "93dfca25-5fba-4b7d-a371-36ab821864d6"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const phoneNumber = Math.floor(Math.random() * 10000000);",
									"pm.environment.set(\"userPhoneNumber\", phoneNumber);",
									"",
									"const randomNum = Math.floor(Math.random() * 100);",
									"const firstName = pm.variables.get(\"userFirstName\") + randomNum;",
									"pm.variables.set(\"userFirstName\", firstName);",
									""
								],
								"type": "text/javascript",
								"id": "9c8b692c-175a-42df-a1de-4bb4c47e6744"
							}
						}
					],
					"id": "0e1a1c7f-df74-4f84-802a-9524ba88d5be",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userComments\": \"{{userComments}}\",\n    \"userEduPg\": \"{{userEduPg}}\",\n    \"userEduUg\": \"{{userEduUg}}\",\n    \"userFirstName\": \"{{userFirstName}}\",\n    \"userLastName\": \"{{userLastName}}\",\n    \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n    \"userLocation\": \"{{userLocation}}\",\n    \"userMiddleName\": \"\",\n    \"userPhoneNumber\": {{userPhoneNumber}},\n    \"userRoleMaps\": [\n        {\n            \"roleId\": \"{{blankRoleId}}\",\n            \"userRoleStatus\": \"{{userRoleStatus}}\"\n        }\n    ],\n    \"userTimeZone\": \"{{userTimeZone}}\",\n    \"userVisaStatus\": \"{{userVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create new user with invalid role id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(pm.variables.get(\"messageInvalidRoleid\"));",
									"    pm.expect(responseJson.success).to.be.false;",
									"});"
								],
								"type": "text/javascript",
								"id": "5ca7c75d-91c1-4b15-8e40-7d09ca2e4fb0"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const phoneNumber = Math.floor(Math.random() * 10000000);",
									"pm.environment.set(\"userPhoneNumber\", phoneNumber);",
									"",
									"const randomNum = Math.floor(Math.random() * 100);",
									"const firstName = pm.variables.get(\"userFirstName\") + randomNum;",
									"pm.variables.set(\"userFirstName\", firstName);"
								],
								"type": "text/javascript",
								"id": "72be2ba8-f830-4f69-95dd-96d4670f51e5"
							}
						}
					],
					"id": "4f5d9b81-2bbc-4887-96cb-f50970c90dc7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userComments\": \"{{userComments}}\",\n    \"userEduPg\": \"{{userEduPg}}\",\n    \"userEduUg\": \"{{userEduUg}}\",\n    \"userFirstName\": \"{{userFirstName}}\",\n    \"userLastName\": \"{{userLastName}}\",\n    \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n    \"userLocation\": \"{{userLocation}}\",\n    \"userMiddleName\": \"\",\n    \"userPhoneNumber\": {{userPhoneNumber}},\n    \"userRoleMaps\": [\n        {\n            \"roleId\": \"{{invalidRoleId}}\",\n            \"userRoleStatus\": \"{{userRoleStatus}}\"\n        }\n    ],\n    \"userTimeZone\": \"{{userTimeZone}}\",\n    \"userVisaStatus\": \"{{userVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create new user with integer role id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(pm.variables.get(\"memessageInvalidRoleidsage\"));",
									"    pm.expect(responseJson.success).to.be.false;",
									"});"
								],
								"type": "text/javascript",
								"id": "35cf592c-a061-45a6-90cd-c26eb919efed"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const phoneNumber = Math.floor(Math.random() * 10000000);",
									"pm.environment.set(\"userPhoneNumber\", phoneNumber);",
									"",
									"const randomNum = Math.floor(Math.random() * 100);",
									"const firstName = pm.variables.get(\"userFirstName\") + randomNum;",
									"pm.variables.set(\"userFirstName\", firstName);"
								],
								"type": "text/javascript",
								"id": "4ad12b54-a1ab-419f-9ab2-c2b3de4634de"
							}
						}
					],
					"id": "364a9663-d9bb-4bad-95a8-0eb27d8cefa3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userComments\": \"{{userComments}}\",\n    \"userEduPg\": \"{{userEduPg}}\",\n    \"userEduUg\": \"{{userEduUg}}\",\n    \"userFirstName\": \"{{userFirstName}}\",\n    \"userLastName\": \"{{userLastName}}\",\n    \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n    \"userLocation\": \"{{userLocation}}\",\n    \"userMiddleName\": \"\",\n    \"userPhoneNumber\": {{userPhoneNumber}},\n    \"userRoleMaps\": [\n        {\n            \"roleId\": {{integerUserRoleId}},\n            \"userRoleStatus\": \"{{userRoleStatus}}\"\n        }\n    ],\n    \"userTimeZone\": \"{{userTimeZone}}\",\n    \"userVisaStatus\": \"{{userVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create new user with missing role status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(pm.variables.get(\"messageMandatoryRoleStatus\"));",
									"    pm.expect(responseJson.success).to.be.false;",
									"});"
								],
								"type": "text/javascript",
								"id": "adb73bfc-cb8e-40da-b36d-3848b15bbdaa"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const phoneNumber = Math.floor(Math.random() * 10000000);",
									"pm.environment.set(\"userPhoneNumber\", phoneNumber);",
									"",
									"const randomNum = Math.floor(Math.random() * 100);",
									"const firstName = pm.variables.get(\"userFirstName\") + randomNum;",
									"pm.variables.set(\"userFirstName\", firstName);"
								],
								"type": "text/javascript",
								"id": "a6a9f29a-6046-4dab-acb3-770ea790f37c"
							}
						}
					],
					"id": "bd296d7d-86dc-4958-aeb1-1a859733fad4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userComments\": \"{{userComments}}\",\n    \"userEduPg\": \"{{userEduPg}}\",\n    \"userEduUg\": \"{{userEduUg}}\",\n    \"userFirstName\": \"{{userFirstName}}\",\n    \"userLastName\": \"{{userLastName}}\",\n    \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n    \"userLocation\": \"{{userLocation}}\",\n    \"userMiddleName\": \"\",\n    \"userPhoneNumber\": {{userPhoneNumber}},\n    \"userRoleMaps\": [\n        {\n            \"roleId\": \"{{roleId}}\"\n        }\n    ],\n    \"userTimeZone\": \"{{userTimeZone}}\",\n    \"userVisaStatus\": \"{{userVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create new user with blank role status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(pm.variables.get(\"messageMandatoryRoleStatus\"));",
									"    pm.expect(responseJson.success).to.be.false;",
									"});"
								],
								"type": "text/javascript",
								"id": "08996461-d620-480b-8875-532756a5519c"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const phoneNumber = Math.floor(Math.random() * 10000000);",
									"pm.environment.set(\"userPhoneNumber\", phoneNumber);",
									"",
									"const randomNum = Math.floor(Math.random() * 100);",
									"const firstName = pm.variables.get(\"userFirstName\") + randomNum;",
									"pm.variables.set(\"userFirstName\", firstName);"
								],
								"type": "text/javascript",
								"id": "a7fa1c8c-e947-4305-9c82-81533e16757f"
							}
						}
					],
					"id": "813a0316-75b0-4608-934b-e394570e0463",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userComments\": \"{{userComments}}\",\n    \"userEduPg\": \"{{userEduPg}}\",\n    \"userEduUg\": \"{{userEduUg}}\",\n    \"userFirstName\": \"{{userFirstName}}\",\n    \"userLastName\": \"{{userLastName}}\",\n    \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n    \"userLocation\": \"{{userLocation}}\",\n    \"userMiddleName\": \"\",\n    \"userPhoneNumber\": {{userPhoneNumber}},\n    \"userRoleMaps\": [\n        {\n            \"roleId\": \"{{roleId}}\",\n            \"userRoleStatus\": \"{{blankUserRoleStatus}}\"\n        }\n    ],\n    \"userTimeZone\": \"{{userTimeZone}}\",\n    \"userVisaStatus\": \"{{userVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create new user with missing first name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(pm.variables.get(\"messageMandatoryFirstName\"));",
									"    pm.expect(responseJson.success).to.be.false;",
									"});"
								],
								"type": "text/javascript",
								"id": "34eddef6-3cd1-4397-93b5-1083ca4401c2"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const phoneNumber = Math.floor(Math.random() * 10000000);",
									"pm.environment.set(\"userPhoneNumber\", phoneNumber);"
								],
								"type": "text/javascript",
								"id": "e9ff00ab-f50b-4ab7-8426-281c36d48e18"
							}
						}
					],
					"id": "bbea2c65-3f9e-44e7-9c51-a899a5891fc5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userComments\": \"{{userComments}}\",\n    \"userEduPg\": \"{{userEduPg}}\",\n    \"userEduUg\": \"{{userEduUg}}\",\n    \"userLastName\": \"{{userLastName}}\",\n    \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n    \"userLocation\": \"{{userLocation}}\",\n    \"userMiddleName\": \"\",\n    \"userPhoneNumber\": {{userPhoneNumber}},\n    \"userRoleMaps\": [\n        {\n            \"roleId\": \"{{roleId}}\",\n            \"userRoleStatus\": \"{{userRoleStatus}}\"\n        }\n    ],\n    \"userTimeZone\": \"{{userTimeZone}}\",\n    \"userVisaStatus\": \"{{userVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create new user with blank first name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(pm.variables.get(\"messageMandatoryFirstName\"));",
									"    pm.expect(responseJson.success).to.be.false;",
									"});"
								],
								"type": "text/javascript",
								"id": "2e2dda54-fbe9-4fe9-843d-b20973afaacf"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const phoneNumber = Math.floor(Math.random() * 10000000);",
									"pm.environment.set(\"userPhoneNumber\", phoneNumber);"
								],
								"type": "text/javascript",
								"id": "e7669d91-5493-4e22-b013-36dda56b3db3"
							}
						}
					],
					"id": "c891b3d8-814c-486f-92d0-f2cd3c34fd81",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userComments\": \"{{userComments}}\",\n    \"userEduPg\": \"{{userEduPg}}\",\n    \"userEduUg\": \"{{userEduUg}}\",\n    \"userLastName\": \"{{userLastName}}\",\n    \"userFirstName\": \"{{blankUserFirstName}}\",\n    \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n    \"userLocation\": \"{{userLocation}}\",\n    \"userMiddleName\": \"\",\n    \"userPhoneNumber\": {{userPhoneNumber}},\n    \"userRoleMaps\": [\n        {\n            \"roleId\": \"{{roleId}}\",\n            \"userRoleStatus\": \"{{userRoleStatus}}\"\n        }\n    ],\n    \"userTimeZone\": \"{{userTimeZone}}\",\n    \"userVisaStatus\": \"{{userVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create new user with missing last name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(pm.variables.get(\"messageMandatoryLastName\"));",
									"    pm.expect(responseJson.success).to.be.false;",
									"});"
								],
								"type": "text/javascript",
								"id": "de6a250b-d565-445f-a7c9-a52c526f7f38"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const phoneNumber = Math.floor(Math.random() * 10000000);",
									"pm.environment.set(\"userPhoneNumber\", phoneNumber);",
									"",
									"const randomNum = Math.floor(Math.random() * 100);",
									"const firstName = pm.variables.get(\"userFirstName\") + randomNum;",
									"pm.variables.set(\"userFirstName\", firstName);"
								],
								"type": "text/javascript",
								"id": "73bf7a52-3214-4bf4-a8f6-97439a3c3c49"
							}
						}
					],
					"id": "4d14d534-7a31-4724-b69f-0bcd85bbf8e7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userComments\": \"{{userComments}}\",\n    \"userEduPg\": \"{{userEduPg}}\",\n    \"userEduUg\": \"{{userEduUg}}\",\n    \"userFirstName\": \"{{userFirstName}}\",\n    \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n    \"userLocation\": \"{{userLocation}}\",\n    \"userMiddleName\": \"\",\n    \"userPhoneNumber\": {{userPhoneNumber}},\n    \"userRoleMaps\": [\n        {\n            \"roleId\": \"{{roleId}}\",\n            \"userRoleStatus\": \"{{userRoleStatus}}\"\n        }\n    ],\n    \"userTimeZone\": \"{{userTimeZone}}\",\n    \"userVisaStatus\": \"{{userVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create new user with blank last name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(pm.variables.get(\"messageMandatoryLastName\"));",
									"    pm.expect(responseJson.success).to.be.false;",
									"});"
								],
								"type": "text/javascript",
								"id": "240fa472-f163-4d44-af8a-90ebcf56cf19"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const phoneNumber = Math.floor(Math.random() * 10000000);",
									"pm.environment.set(\"userPhoneNumber\", phoneNumber);",
									"",
									"const randomNum = Math.floor(Math.random() * 100);",
									"const firstName = pm.variables.get(\"userFirstName\") + randomNum;",
									"pm.variables.set(\"userFirstName\", firstName);"
								],
								"type": "text/javascript",
								"id": "02120b56-d870-4615-a937-d39039f6887d"
							}
						}
					],
					"id": "dc2a1695-2005-4773-a1b0-324ab3656d5a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userComments\": \"{{userComments}}\",\n    \"userEduPg\": \"{{userEduPg}}\",\n    \"userEduUg\": \"{{userEduUg}}\",\n    \"userFirstName\": \"{{userFirstName}}\",\n    \"userLastName\": \"{{blankUserLastName}}\",\n    \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n    \"userLocation\": \"{{userLocation}}\",\n    \"userMiddleName\": \"\",\n    \"userPhoneNumber\": {{userPhoneNumber}},\n    \"userRoleMaps\": [\n        {\n            \"roleId\": \"{{roleId}}\",\n            \"userRoleStatus\": \"{{userRoleStatus}}\"\n        }\n    ],\n    \"userTimeZone\": \"{{userTimeZone}}\",\n    \"userVisaStatus\": \"{{userVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create new user with missing time zone",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(pm.variables.get(\"messageMandatoryTimeZone\"));",
									"    pm.expect(responseJson.success).to.be.false;",
									"});"
								],
								"type": "text/javascript",
								"id": "571fdc8c-240b-47b7-bf13-fae9432382b0"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const phoneNumber = Math.floor(Math.random() * 10000000);",
									"pm.environment.set(\"userPhoneNumber\", phoneNumber);",
									"",
									"const randomNum = Math.floor(Math.random() * 100);",
									"const firstName = pm.variables.get(\"userFirstName\") + randomNum;",
									"pm.variables.set(\"userFirstName\", firstName);"
								],
								"type": "text/javascript",
								"id": "2ca7d825-9bdd-4687-af62-76bcceafdc5a"
							}
						}
					],
					"id": "3ac88431-6a85-4a71-9eb7-7a7058282181",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userComments\": \"{{userComments}}\",\n    \"userEduPg\": \"{{userEduPg}}\",\n    \"userEduUg\": \"{{userEduUg}}\",\n    \"userFirstName\": \"{{userFirstName}}\",\n    \"userLastName\": \"{{userLastName}}\",\n    \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n    \"userLocation\": \"{{userLocation}}\",\n    \"userMiddleName\": \"\",\n    \"userPhoneNumber\": {{userPhoneNumber}},\n    \"userRoleMaps\": [\n        {\n            \"roleId\": \"{{roleId}}\",\n            \"userRoleStatus\": \"{{userRoleStatus}}\"\n        }\n    ],\n    \"userVisaStatus\": \"{{userVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create new user with blank time zone",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(pm.variables.get(\"messageMandatoryTimeZone\"));",
									"    pm.expect(responseJson.success).to.be.false;",
									"});"
								],
								"type": "text/javascript",
								"id": "1a17d854-25f0-4ad0-819a-2b1e87db6221"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const phoneNumber = Math.floor(Math.random() * 10000000);",
									"pm.environment.set(\"userPhoneNumber\", phoneNumber);",
									"",
									"const randomNum = Math.floor(Math.random() * 100);",
									"const firstName = pm.variables.get(\"userFirstName\") + randomNum;",
									"pm.variables.set(\"userFirstName\", firstName);"
								],
								"type": "text/javascript",
								"id": "ea68ea95-f2cd-4e6f-9c1a-c46248401e45"
							}
						}
					],
					"id": "7e52eb8e-9ccc-4af4-83c4-2dfe0069e3e8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userComments\": \"{{userComments}}\",\n    \"userEduPg\": \"{{userEduPg}}\",\n    \"userEduUg\": \"{{userEduUg}}\",\n    \"userFirstName\": \"{{userFirstName}}\",\n    \"userLastName\": \"{{userLastName}}\",\n    \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n    \"userLocation\": \"{{userLocation}}\",\n    \"userMiddleName\": \"\",\n    \"userPhoneNumber\": {{userPhoneNumber}},\n    \"userRoleMaps\": [\n        {\n            \"roleId\": \"{{roleId}}\",\n            \"userRoleStatus\": \"{{userRoleStatus}}\"\n        }\n    ],\n    \"userTimeZone\": \"{{blankUserTimeZone}}\",\n    \"userVisaStatus\": \"{{userVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create new user with invalid time zone",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(pm.variables.get(\"messageMandatoryTimeZone\"));",
									"    pm.expect(responseJson.success).to.be.false;",
									"});"
								],
								"type": "text/javascript",
								"id": "efcbaaf2-93f6-4ad1-85e3-88b4d0d81cb4"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const phoneNumber = Math.floor(Math.random() * 10000000);",
									"pm.environment.set(\"userPhoneNumber\", phoneNumber);",
									"",
									"const randomNum = Math.floor(Math.random() * 100);",
									"const firstName = pm.variables.get(\"userFirstName\") + randomNum;",
									"pm.variables.set(\"userFirstName\", firstName);"
								],
								"type": "text/javascript",
								"id": "d0d575fe-9f22-4e54-abc2-da9e39de477f"
							}
						}
					],
					"id": "3ff13d08-20bc-4ee0-abef-eceb19e104a1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userComments\": \"{{userComments}}\",\n    \"userEduPg\": \"{{userEduPg}}\",\n    \"userEduUg\": \"{{userEduUg}}\",\n    \"userFirstName\": \"{{userFirstName}}\",\n    \"userLastName\": \"{{userLastName}}\",\n    \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n    \"userLocation\": \"{{userLocation}}\",\n    \"userMiddleName\": \"\",\n    \"userPhoneNumber\": {{userPhoneNumber}},\n    \"userRoleMaps\": [\n        {\n            \"roleId\": \"{{roleId}}\",\n            \"userRoleStatus\": \"{{userRoleStatus}}\"\n        }\n    ],\n    \"userTimeZone\": \"{{invalidUserTimeZone}}\",\n    \"userVisaStatus\": \"{{userVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create new user with missing visa status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(pm.variables.get(\"messageMandatoryVisaStatus\"));",
									"    pm.expect(responseJson.success).to.be.false;",
									"});"
								],
								"type": "text/javascript",
								"id": "00ce5624-4ce0-473b-96a5-a4a5f811659a"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const phoneNumber = Math.floor(Math.random() * 10000000);",
									"pm.environment.set(\"userPhoneNumber\", phoneNumber);",
									"",
									"const randomNum = Math.floor(Math.random() * 100);",
									"const firstName = pm.variables.get(\"userFirstName\") + randomNum;",
									"pm.variables.set(\"userFirstName\", firstName);",
									""
								],
								"type": "text/javascript",
								"id": "f00300d6-6339-4b53-91f4-d586f1e013cf"
							}
						}
					],
					"id": "421eae7d-34e3-443a-84c1-62c309fb5354",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userComments\": \"{{userComments}}\",\n    \"userEduPg\": \"{{userEduPg}}\",\n    \"userEduUg\": \"{{userEduUg}}\",\n    \"userFirstName\": \"{{userFirstName}}\",\n    \"userLastName\": \"{{userLastName}}\",\n    \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n    \"userLocation\": \"{{userLocation}}\",\n    \"userMiddleName\": \"\",\n    \"userPhoneNumber\": {{userPhoneNumber}},\n    \"userRoleMaps\": [\n        {\n            \"roleId\": \"{{roleId}}\",\n            \"userRoleStatus\": \"{{userRoleStatus}}\"\n        }\n    ],\n    \"userTimeZone\": \"{{userTimeZone}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create new user with blank visa status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(pm.variables.get(\"messageMandatoryVisaStatus\"));",
									"    pm.expect(responseJson.success).to.be.false;",
									"});"
								],
								"type": "text/javascript",
								"id": "dbef8454-ab5d-47b8-802e-3e45cc71280f"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const phoneNumber = Math.floor(Math.random() * 10000000);",
									"pm.environment.set(\"userPhoneNumber\", phoneNumber);",
									"",
									"const randomNum = Math.floor(Math.random() * 100);",
									"const firstName = pm.variables.get(\"userFirstName\") + randomNum;",
									"pm.variables.set(\"userFirstName\", firstName);"
								],
								"type": "text/javascript",
								"id": "eddfc032-dd6d-43ed-a62a-93e9c494e0e4"
							}
						}
					],
					"id": "0d3ec247-c00d-4b67-968e-9eae2a852c3f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userComments\": \"{{userComments}}\",\n    \"userEduPg\": \"{{userEduPg}}\",\n    \"userEduUg\": \"{{userEduUg}}\",\n    \"userFirstName\": \"{{userFirstName}}\",\n    \"userLastName\": \"{{userLastName}}\",\n    \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n    \"userLocation\": \"{{userLocation}}\",\n    \"userMiddleName\": \"\",\n    \"userPhoneNumber\": {{userPhoneNumber}},\n    \"userRoleMaps\": [\n        {\n            \"roleId\": \"{{roleId}}\",\n            \"userRoleStatus\": \"{{userRoleStatus}}\"\n        }\n    ],\n    \"userTimeZone\": \"{{userTimeZone}}\",\n    \"userVisaStatus\": \"{{blankUserVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create new user with invalid visa status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(pm.variables.get(\"messageMandatoryVisaStatus\"));",
									"    pm.expect(responseJson.success).to.be.false;",
									"});"
								],
								"type": "text/javascript",
								"id": "889dfe1f-516a-4f5a-9077-9065bf575e15"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const phoneNumber = Math.floor(Math.random() * 10000000);",
									"pm.environment.set(\"userPhoneNumber\", phoneNumber);",
									"",
									"const randomNum = Math.floor(Math.random() * 100);",
									"const firstName = pm.variables.get(\"userFirstName\") + randomNum;",
									"pm.variables.set(\"userFirstName\", firstName);"
								],
								"type": "text/javascript",
								"id": "e512e516-bf71-4320-b978-6e4b0d2d4519"
							}
						}
					],
					"id": "692cac2d-1952-40e9-9af9-3ee16c43385b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userComments\": \"{{userComments}}\",\n    \"userEduPg\": \"{{userEduPg}}\",\n    \"userEduUg\": \"{{userEduUg}}\",\n    \"userFirstName\": \"{{userFirstName}}\",\n    \"userLastName\": \"{{userLastName}}\",\n    \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n    \"userLocation\": \"{{userLocation}}\",\n    \"userMiddleName\": \"\",\n    \"userPhoneNumber\": {{userPhoneNumber}},\n    \"userRoleMaps\": [\n        {\n            \"roleId\": \"{{roleId}}\",\n            \"userRoleStatus\": \"{{userRoleStatus}}\"\n        }\n    ],\n    \"userTimeZone\": \"{{userTimeZone}}\",\n    \"userVisaStatus\": \"{{invalidUserVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create new user with integer visa status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(pm.variables.get(\"messageMandatoryVisaStatus\"));",
									"    pm.expect(responseJson.success).to.be.false;",
									"});"
								],
								"type": "text/javascript",
								"id": "8a67f438-3c52-467b-b859-51bc58b02bb8"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const phoneNumber = Math.floor(Math.random() * 10000000);",
									"pm.environment.set(\"userPhoneNumber\", phoneNumber);",
									"",
									"pm.variables.set(\"userVisaStatus\", phoneNumber);",
									"",
									"const randomNum = Math.floor(Math.random() * 100);",
									"const firstName = pm.variables.get(\"userFirstName\") + randomNum;",
									"pm.variables.set(\"userFirstName\", firstName);"
								],
								"type": "text/javascript",
								"id": "8cea3047-9270-4862-b4f4-1ad6307a709a"
							}
						}
					],
					"id": "6a3948c7-5071-4870-b39f-92188fabfefa",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userComments\": \"{{userComments}}\",\n    \"userEduPg\": \"{{userEduPg}}\",\n    \"userEduUg\": \"{{userEduUg}}\",\n    \"userFirstName\": \"{{userFirstName}}\",\n    \"userLastName\": \"{{userLastName}}\",\n    \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n    \"userLocation\": \"{{userLocation}}\",\n    \"userMiddleName\": \"\",\n    \"userPhoneNumber\": {{userPhoneNumber}},\n    \"userRoleMaps\": [\n        {\n            \"roleId\": \"{{roleId}}\",\n            \"userRoleStatus\": \"{{userRoleStatus}}\"\n        }\n    ],\n    \"userTimeZone\": \"{{userTimeZone}}\",\n    \"userVisaStatus\": {{userVisaStatus}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create new user with integer time zone",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1 - Validate status code",
									"pm.test(\"Status code should be 400 Bad Request\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.expect(pm.response.status).to.eql('Bad Request');",
									"});",
									"",
									"// Test2 - Validate Response body type",
									"pm.test(\"Response body should be JSON\", function () {",
									"  pm.response.to.be.json;",
									"});",
									"",
									"// Expected schema",
									"var schema = {",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"message\",",
									"        \"success\",",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"};",
									"",
									"// Test3 - Validate schema of the response",
									"pm.test('Schema validation', () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"// Get json from response",
									"const responseJson = pm.response.json();",
									"",
									"// Test4 - Validate all values",
									"pm.test(\"Validate values in response\", function () {",
									"    pm.expect(responseJson.message).to.eql(pm.variables.get(\"messageMandatoryTimeZone\"));",
									"    pm.expect(responseJson.success).to.be.false;",
									"});",
									"",
									"pm.environment.unset(\"userPhoneNumber\");"
								],
								"type": "text/javascript",
								"id": "9498b822-911c-4427-9c7d-8dee62457d3c"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const phoneNumber = Math.floor(Math.random() * 10000000);",
									"pm.environment.set(\"userPhoneNumber\", phoneNumber);",
									"",
									"pm.variables.set(\"userTimeZone\", phoneNumber);",
									"",
									"const randomNum = Math.floor(Math.random() * 100);",
									"const firstName = pm.variables.get(\"userFirstName\") + randomNum;",
									"pm.variables.set(\"userFirstName\", firstName);",
									"",
									""
								],
								"type": "text/javascript",
								"id": "f819f0c1-6b03-48bc-a66e-a739d13dba42"
							}
						}
					],
					"id": "b45d1c8c-cfad-4d9e-8ea9-f1d48adf2454",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userComments\": \"{{userComments}}\",\n    \"userEduPg\": \"{{userEduPg}}\",\n    \"userEduUg\": \"{{userEduUg}}\",\n    \"userFirstName\": \"{{userFirstName}}\",\n    \"userLastName\": \"{{userLastName}}\",\n    \"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n    \"userLocation\": \"{{userLocation}}\",\n    \"userMiddleName\": \"\",\n    \"userPhoneNumber\": {{userPhoneNumber}},\n    \"userRoleMaps\": [\n        {\n            \"roleId\": \"{{roleId}}\",\n            \"userRoleStatus\": \"{{userRoleStatus}}\"\n        }\n    ],\n    \"userTimeZone\": {{userTimeZone}},\n    \"userVisaStatus\": \"{{userVisaStatus}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				}
			],
			"id": "0092f7a9-20a6-465f-8e32-ab3c994f3448"
		},
		{
			"name": "Assignment",
			"item": [
				{
					"name": "Precondition: Create new program",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9abfc7c5-b6e3-4adb-8a45-5bc840b7ec75",
								"exec": [
									"pm.test(\"Status code is 201 : Program successfully created \", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"//Setting environment variable",
									"var responseObject = pm.response.json();",
									"pm.environment.set(\"programId\",responseObject.programId);",
									"console.log(responseObject.programId);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "05d82ec4-3a4b-4e5c-8edd-dd0ca48d10a6",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "36d53cc6-13e0-4174-ae91-778bb7070384",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programDescription\": \"{{programDescriptionAssign}}\",\n  \"programName\": \"{{programNameAssign}}\",\n  \"programStatus\": \"{{programStatusAssign}}\"\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "Precondition: Create new batch",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "53cb9233-7e57-4d58-8492-ad62b950dec0",
								"exec": [
									"pm.test(\"Status code is 201 : Batch successfully created \", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"//Setting environment variable",
									"//pm.environment.set( \"batchId\", response.batchId);",
									"",
									"var responseObject = pm.response.json();",
									"pm.environment.set( \"batchId\", responseObject.batchId);",
									"console.log(responseObject.batchId);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "e8d3782f-8bbd-4ea8-8997-6edcf907138f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"batchDescription\": \"{{batchDescriptionAssign}}\",\n  \"batchName\": \"{{batchNameAssign}}\",\n  \"batchNoOfClasses\": {{batchNoOfClassesAssign}},\n  \"batchStatus\": \"{{batchStatusAssign}}\",\n  \"programId\": {{programId}}\n }\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/batches"
					},
					"response": []
				},
				{
					"name": "Precondition: Create inactive user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c97a6d36-8981-4985-8e39-2ac984b9f536",
								"exec": [
									"pm.test(\"Status code is 201 : User successfully created \", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"//Setting environment variable",
									"var responseObject = pm.response.json();",
									"pm.environment.set( \"InactiveuserId\", responseObject.userId);",
									"console.log(responseObject.InactiveuserId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "f894e1df-6f39-45e2-ac4d-ad007d461283",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\"userComments\": \"{{userComments}}\",\n\"userEduPg\": \"{{userEduPg}}\",\n\"userEduUg\": \"{{userEduUg}}\",\n\"userFirstName\": \"{{userFirstName}}\",\n\"userLastName\": \"{{userLastName}}\",\n\"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n\"userLocation\": \"{{userLocation}}\",\n\"userMiddleName\": \"{{userMiddleName}}\",\n\"userPhoneNumber\": {{phoneNumber}},\n\"userRoleMaps\": [\n{\n\"roleId\": \"{{roleId}}\",\n\"userRoleStatus\": \"{{userRoleStatusInactive}}\"\n}\n],\n\"userTimeZone\": \"{{userTimeZone}}\",\n\"userVisaStatus\": \"{{userVisaStatus}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Precondition: Create new user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "24b939f2-89b4-470a-ae16-5d23b18e92d3",
								"exec": [
									"pm.test(\"Status code is 201 : User successfully created \", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"//Setting environment variable",
									"//Setting environment variable",
									"var responseObject = pm.response.json();",
									"pm.environment.set( \"userId\", responseObject.userId);",
									"console.log(responseObject.userId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "d6f9b14c-59da-4463-8f6c-4b751f867d78",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\"userComments\": \"{{userComments}}\",\n\"userEduPg\": \"{{userEduPg}}\",\n\"userEduUg\": \"{{userEduUg}}\",\n\"userFirstName\": \"{{userFirstName}}\",\n\"userLastName\": \"{{userLastName}}\",\n\"userLinkedinUrl\": \"{{userLinkedinUrl}}\",\n\"userLocation\": \"{{userLocation}}\",\n\"userMiddleName\": \"{{userMiddleName}}\",\n\"userPhoneNumber\": {{userPhoneNumber}},\n\"userRoleMaps\": [\n{\n\"roleId\": \"{{roleId}}\",\n\"userRoleStatus\": \"{{userRoleStatus}}\"\n}\n],\n\"userTimeZone\": \"{{userTimeZone}}\",\n\"userVisaStatus\": \"{{userVisaStatus}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/users/users/roleStatus"
					},
					"response": []
				},
				{
					"name": "Create New Assignment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d77ef0e9-9263-4a64-9a82-fabad46f6709",
								"exec": [
									"//Setting environment variable",
									"var responseObject = pm.response.json();",
									"pm.environment.set( \"assignmentId\", responseObject.assignmentId);",
									"console.log(responseObject.assignmentId);",
									"",
									"",
									"//validate Status",
									"pm.test(\"Status code is 201 : Assignment created successfully\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"//Validate content header",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"//Validate Schema",
									"const schema = {",
									"\"type\": \"object\",",
									"",
									"",
									"",
									"",
									"   //\"$schema\": \"https://json-schema.org/draft/2019-09/schema\",",
									"   // \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    //\"default\": {},",
									"    \"title\": \"Root Schema\",",
									"    \"required\": [",
									"        \"assignmentId\",",
									"        \"assignmentName\",",
									"        \"assignmentDescription\",",
									"        \"comments\",",
									"        \"dueDate\",",
									"        \"pathAttachment1\",",
									"        \"pathAttachment2\",",
									"        \"pathAttachment3\",",
									"        \"pathAttachment4\",",
									"        \"pathAttachment5\",",
									"        \"batchId\",",
									"        \"createdBy\",",
									"        \"graderId\"",
									"    ], ",
									"    \"properties\": {",
									"        \"assignmentId\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The assignmentId Schema\",",
									"            \"examples\": [",
									"                870",
									"            ]",
									"        },",
									"        \"assignmentName\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The assignmentName Schema\",",
									"            \"examples\": [",
									"                \"Postman intro part : 4\"",
									"            ]",
									"        },",
									"        \"assignmentDescription\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The assignmentDescription Schema\",",
									"            \"examples\": [",
									"                \"API basics - phase1\"",
									"            ]",
									"        },",
									"        \"comments\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The comments Schema\",",
									"            \"examples\": [",
									"                \"Practive this assignment\"",
									"            ]",
									"        },",
									"        \"dueDate\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The dueDate Schema\",",
									"            \"examples\": [",
									"                \"2023-06-29T23:44:31.377+00:00\"",
									"            ]",
									"        },",
									"        \"pathAttachment1\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment1 Schema\",",
									"            \"examples\": [",
									"                \"pathfile1.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment2\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment2 Schema\",",
									"            \"examples\": [",
									"                \"pathfile2.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment3\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment3 Schema\",",
									"            \"examples\": [",
									"                \"pathfile3.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment4\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment4 Schema\",",
									"            \"examples\": [",
									"                \"pathfile4.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment5\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment5 Schema\",",
									"            \"examples\": [",
									"                \"pathfile5.json\"",
									"            ]",
									"        },",
									"        \"batchId\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The batchId Schema\",",
									"            \"examples\": [",
									"                463",
									"            ]",
									"        },",
									"        \"createdBy\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The createdBy Schema\",",
									"            \"examples\": [",
									"                \"U696\"",
									"            ]",
									"        },",
									"        \"graderId\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The graderId Schema\",",
									"            \"examples\": [",
									"                \"U696\"",
									"            ]",
									"        }",
									"    },",
									"    ",
									"}",
									";",
									"",
									"pm.test(\"Schema is valid\", () => {",
									"pm.response.to.have.jsonSchema(schema);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b6fd05e4-9e18-45e2-913e-da19d88a00ca",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b62a7679-cbce-4b18-a536-56412c937ac7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\n     \"assignmentDescription\": \"{{assignmentDescription}}\",\n  \n  \"assignmentName\": \"{{assignmentName}}\",\n  \"batchId\": \"{{batchId}}\",\n  \"comments\": \"{{comments}}\",\n  \"createdBy\": \"{{createdBy}}\",\n  \"dueDate\": \"{{dueDate}}\",\n  \"graderId\": \"{{graderId}}\",\n  \"pathAttachment1\": \"{{pathAttachment1}}\",\n  \"pathAttachment2\": \"{{pathAttachment2}}\",\n  \"pathAttachment3\": \"{{pathAttachment3}}\",\n  \"pathAttachment4\": \"{{pathAttachment4}}\",\n  \"pathAttachment5\": \"{{pathAttachment5}}\"\n }\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/assignments"
					},
					"response": []
				},
				{
					"name": "Create without mandatory field : created by",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "678890aa-157d-4c8c-ad31-238d645beed3",
								"exec": [
									"pm.test(\"Status code is 400: Missing created by\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.json().message).to.eql(\"Created By is mandatory\");",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "74620184-6bd2-497e-b74d-ee52ce289630",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\n     \"assignmentDescription\": \"{{assignmentDescription}}\",\n  \n  \"assignmentName\": \"{{assignmentName}}\",\n  \"batchId\": \"{{batchId}}\",\n  \"comments\": \"{{comments}}\",\n  \"createdBy\": \"\",\n  \"dueDate\": \"{{dueDate}}\",\n  \"graderId\": \"{{graderId}}\",\n  \"pathAttachment1\": \"{{pathAttachment1}}\",\n  \"pathAttachment2\": \"{{pathAttachment2}}\",\n  \"pathAttachment3\": \"{{pathAttachment3}}\",\n  \"pathAttachment4\": \"{{pathAttachment4}}\",\n  \"pathAttachment5\": \"{{pathAttachment5}}\"\n }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/assignments"
					},
					"response": []
				},
				{
					"name": "Create without mandatory field : Assignment Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ca451c80-1581-42e9-a9a4-105744d113f2",
								"exec": [
									"pm.test(\"Status code is 400: Missing Assignment Name\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.json().message).to.eql(\"Assignment Name is mandatory\");",
									"",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "edfabd4c-45b6-4a94-b862-1e8dca397456",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\n     \"assignmentDescription\": \"{{assignmentDescription}}\",\n  \n  \"assignmentName\": \"\",\n  \"batchId\": \"{{batchId}}\",\n  \"comments\": \"{{comments}}\",\n  \"createdBy\": \"{{createdBy}}\",\n  \"dueDate\": \"{{dueDate}}\",\n  \"graderId\": \"{{graderId}}\",\n  \"pathAttachment1\": \"{{pathAttachment1}}\",\n  \"pathAttachment2\": \"{{pathAttachment2}}\",\n  \"pathAttachment3\": \"{{pathAttachment3}}\",\n  \"pathAttachment4\": \"{{pathAttachment4}}\",\n  \"pathAttachment5\": \"{{pathAttachment5}}\"\n }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/assignments"
					},
					"response": []
				},
				{
					"name": "Create without mandatory field : Batch ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e7f8d5c5-9cfc-4ef4-ace1-dd786de1c785",
								"exec": [
									"pm.test(\"Status code is 400: Missing batch ID\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.json().message).to.eql(\"Batch ID is mandatory\");",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "e6ebbf47-c58b-4333-bb2d-862610bc8316",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\n     \"assignmentDescription\": \"{{assignmentDescription}}\",\n  \n  \"assignmentName\": \"{{assignmentName}}\",\n  \"batchId\": \"\",\n  \"comments\": \"{{comments}}\",\n  \"createdBy\": \"{{createdBy}}\",\n  \"dueDate\": \"{{dueDate}}\",\n  \"graderId\": \"{{graderId}}\",\n  \"pathAttachment1\": \"{{pathAttachment1}}\",\n  \"pathAttachment2\": \"{{pathAttachment2}}\",\n  \"pathAttachment3\": \"{{pathAttachment3}}\",\n  \"pathAttachment4\": \"{{pathAttachment4}}\",\n  \"pathAttachment5\": \"{{pathAttachment5}}\"\n }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/assignments"
					},
					"response": []
				},
				{
					"name": "Create without mandatory field : Due date",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "92b4e6db-96cf-4884-98a4-5f7cbc787932",
								"exec": [
									"pm.test(\"Status code is 400: Missing Due Date\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.json().message).to.eql(\"Due Date is mandatory\");",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "6d224906-fa4a-484c-83f4-82ecb7a75d20",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\n     \"assignmentDescription\": \"{{assignmentDescription}}\",\n  \n  \"assignmentName\": \"{{assignmentName}}\",\n  \"batchId\": \"{{batchId}}\",\n  \"comments\": \"{{comments}}\",\n  \"createdBy\": \"{{createdBy}}\",\n  \"dueDate\": \"\",\n  \"graderId\": \"{{graderId}}\",\n  \"pathAttachment1\": \"{{pathAttachment1}}\",\n  \"pathAttachment2\": \"{{pathAttachment2}}\",\n  \"pathAttachment3\": \"{{pathAttachment3}}\",\n  \"pathAttachment4\": \"{{pathAttachment4}}\",\n  \"pathAttachment5\": \"{{pathAttachment5}}\"\n }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/assignments"
					},
					"response": []
				},
				{
					"name": "Create without mandatory field : Assignment description",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8cf11869-30b6-4478-8237-480b4fa3a5d7",
								"exec": [
									"pm.test(\"Status code is 400: Missing Assignment Description\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.json().message).to.eql(\"Assignment Description is mandatory\");",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "04dcd0f6-703a-432a-ace6-9203108085f8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\n     \"assignmentDescription\": \"\",\n  \n  \"assignmentName\": \"{{assignmentName}}\",\n  \"batchId\": \"{{batchId}}\",\n  \"comments\": \"{{comments}}\",\n  \"createdBy\": \"{{createdBy}}\",\n  \"dueDate\": \"{{dueDate}}\",\n  \"graderId\": \"{{graderId}}\",\n  \"pathAttachment1\": \"{{pathAttachment1}}\",\n  \"pathAttachment2\": \"{{pathAttachment2}}\",\n  \"pathAttachment3\": \"{{pathAttachment3}}\",\n  \"pathAttachment4\": \"{{pathAttachment4}}\",\n  \"pathAttachment5\": \"{{pathAttachment5}}\"\n }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/assignments"
					},
					"response": []
				},
				{
					"name": "Precondition: Create new program",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c0cf72bc-6fd4-41b1-882e-3cd0699c42ca",
								"exec": [
									"pm.test(\"Status code is 201 : Program successfully created \", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"//Setting environment variable",
									"var responseObject = pm.response.json();",
									"pm.environment.set(\"programId\",responseObject.programId);",
									"console.log(responseObject.programId);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2270bd95-95e1-4dbc-8118-9d6ec800e209",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "bb2909d5-5cf7-492c-b42c-3df29f3d20ff",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"programDescription\": \"{{programDescription}}\",\n  \"programName\": \"{{programName}}\",\n  \"programStatus\": \"{{programStatus}}\"\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/saveprogram"
					},
					"response": []
				},
				{
					"name": "Create without mandatory field : GraderID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "18d34e89-b6be-4030-8551-d995c514be37",
								"exec": [
									"pm.test(\"Status code is 400: Missing Assignment Description\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.json().message).to.eql(\"Grader ID is mandatory\");",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "13bcb872-4041-489a-a42a-8bdceac936d8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\n     \"assignmentDescription\": \"{{assignmentDescription}}\",\n  \n  \"assignmentName\": \"{{assignmentName}}\",\n  \"batchId\": \"{{batchId}}\",\n  \"comments\": \"{{comments}}\",\n  \"createdBy\": \"{{createdBy}}\",\n  \"dueDate\": \"{{dueDate}}\",\n  \"graderId\": \"\",\n  \"pathAttachment1\": \"{{pathAttachment1}}\",\n  \"pathAttachment2\": \"{{pathAttachment2}}\",\n  \"pathAttachment3\": \"{{pathAttachment3}}\",\n  \"pathAttachment4\": \"{{pathAttachment4}}\",\n  \"pathAttachment5\": \"{{pathAttachment5}}\"\n }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/assignments"
					},
					"response": []
				},
				{
					"name": "Create with invalid due date format",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2607de61-6fb7-4df2-9dc8-eed223571bbf",
								"exec": [
									"pm.test(\"Status code is 400: Invalid date format\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.json().message).to.eql(\"Invalid date format\");",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "94ebc732-b5e9-472e-bfcb-4c2ef6b5c5b4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\n     \"assignmentDescription\": \"{{assignmentDescription}}\",\n  \n  \"assignmentName\": \"{{assignmentName}}\",\n  \"batchId\": \"{{batchId}}\",\n  \"comments\": \"{{comments}}\",\n  \"createdBy\": \"{{createdBy}}\",\n  \"dueDate\": \"{{invalidDate}}\",\n  \"graderId\": \"{{graderId}}\",\n  \"pathAttachment1\": \"{{pathAttachment1}}\",\n  \"pathAttachment2\": \"{{pathAttachment2}}\",\n  \"pathAttachment3\": \"{{pathAttachment3}}\",\n  \"pathAttachment4\": \"{{pathAttachment4}}\",\n  \"pathAttachment5\": \"{{pathAttachment5}}\"\n }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/assignments"
					},
					"response": []
				},
				{
					"name": "Create with inactive user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "da3374d0-0b56-4f18-9402-8fb614a83c29",
								"exec": [
									"pm.test(\"Status code is 400: Created by is inactive user\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"",
									"/*",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.json().message).to.eql(\"Assignment Description is mandatory\");",
									"",
									"}); */"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b040e8bf-022f-47bf-bed5-e1c18f431699",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\n     \"assignmentDescription\": \"{{assignmentDescription}}\",\n  \n  \"assignmentName\": \"{{assignmentName}}\",\n  \"batchId\": \"{{batchId}}\",\n  \"comments\": \"{{comments}}\",\n  \"createdBy\": \"{{InactiveuserId}}\",\n  \"dueDate\": \"{{dueDate}}\",\n  \"graderId\": \"{{graderId}}\",\n  \"pathAttachment1\": \"{{pathAttachment1}}\",\n  \"pathAttachment2\": \"{{pathAttachment2}}\",\n  \"pathAttachment3\": \"{{pathAttachment3}}\",\n  \"pathAttachment4\": \"{{pathAttachment4}}\",\n  \"pathAttachment5\": \"{{pathAttachment5}}\"\n }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/assignments"
					},
					"response": []
				},
				{
					"name": "Get All Assignments",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7d15b8e4-1d25-47da-ac77-5a312f75c3cc",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"",
									"const schema = {",
									"\"type\": \"array\",",
									"",
									"    \"title\": \"Root Schema\",",
									"    \"required\": [",
									"        \"assignmentId\",",
									"        \"assignmentName\",",
									"        \"assignmentDescription\",",
									"        \"comments\",",
									"        \"dueDate\",",
									"        \"pathAttachment1\",",
									"        \"pathAttachment2\",",
									"        \"pathAttachment3\",",
									"        \"pathAttachment4\",",
									"        \"pathAttachment5\",",
									"        \"batchId\",",
									"        \"createdBy\",",
									"        \"graderId\"",
									"    ], ",
									"    \"properties\": {",
									"        \"assignmentId\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The assignmentId Schema\",",
									"            \"examples\": [",
									"                870",
									"            ]",
									"        },",
									"        \"assignmentName\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The assignmentName Schema\",",
									"            \"examples\": [",
									"                \"Postman intro part : 4\"",
									"            ]",
									"        },",
									"        \"assignmentDescription\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The assignmentDescription Schema\",",
									"            \"examples\": [",
									"                \"API basics - phase1\"",
									"            ]",
									"        },",
									"        \"comments\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The comments Schema\",",
									"            \"examples\": [",
									"                \"Practive this assignment\"",
									"            ]",
									"        },",
									"        \"dueDate\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The dueDate Schema\",",
									"            \"examples\": [",
									"                \"2023-06-29T23:44:31.377+00:00\"",
									"            ]",
									"        },",
									"        \"pathAttachment1\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment1 Schema\",",
									"            \"examples\": [",
									"                \"pathfile1.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment2\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment2 Schema\",",
									"            \"examples\": [",
									"                \"pathfile2.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment3\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment3 Schema\",",
									"            \"examples\": [",
									"                \"pathfile3.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment4\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment4 Schema\",",
									"            \"examples\": [",
									"                \"pathfile4.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment5\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment5 Schema\",",
									"            \"examples\": [",
									"                \"pathfile5.json\"",
									"            ]",
									"        },",
									"        \"batchId\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The batchId Schema\",",
									"            \"examples\": [",
									"                463",
									"            ]",
									"        },",
									"        \"createdBy\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The createdBy Schema\",",
									"            \"examples\": [",
									"                \"U696\"",
									"            ]",
									"        },",
									"        \"graderId\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The graderId Schema\",",
									"            \"examples\": [",
									"                \"U696\"",
									"            ]",
									"        }",
									"    },",
									"    ",
									"}",
									";",
									"",
									"pm.test(\"Schema is valid\", () => {",
									"pm.response.to.have.jsonSchema(schema);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "59da2e75-3507-4621-997e-13a44afd6cb8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/assignments/"
					},
					"response": []
				},
				{
					"name": "Get Assignment by batch ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ea1746fa-216d-448e-b8ce-dd6fe5315d4d",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"",
									"const schema = {",
									"\"type\": \"array\",",
									"",
									"    \"title\": \"Root Schema\",",
									"    \"required\": [",
									"        \"assignmentId\",",
									"        \"assignmentName\",",
									"        \"assignmentDescription\",",
									"        \"comments\",",
									"        \"dueDate\",",
									"        \"pathAttachment1\",",
									"        \"pathAttachment2\",",
									"        \"pathAttachment3\",",
									"        \"pathAttachment4\",",
									"        \"pathAttachment5\",",
									"        \"batchId\",",
									"        \"createdBy\",",
									"        \"graderId\"",
									"    ], ",
									"    \"properties\": {",
									"        \"assignmentId\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The assignmentId Schema\",",
									"            \"examples\": [",
									"                870",
									"            ]",
									"        },",
									"        \"assignmentName\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The assignmentName Schema\",",
									"            \"examples\": [",
									"                \"Postman intro part : 4\"",
									"            ]",
									"        },",
									"        \"assignmentDescription\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The assignmentDescription Schema\",",
									"            \"examples\": [",
									"                \"API basics - phase1\"",
									"            ]",
									"        },",
									"        \"comments\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The comments Schema\",",
									"            \"examples\": [",
									"                \"Practive this assignment\"",
									"            ]",
									"        },",
									"        \"dueDate\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The dueDate Schema\",",
									"            \"examples\": [",
									"                \"2023-06-29T23:44:31.377+00:00\"",
									"            ]",
									"        },",
									"        \"pathAttachment1\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment1 Schema\",",
									"            \"examples\": [",
									"                \"pathfile1.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment2\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment2 Schema\",",
									"            \"examples\": [",
									"                \"pathfile2.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment3\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment3 Schema\",",
									"            \"examples\": [",
									"                \"pathfile3.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment4\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment4 Schema\",",
									"            \"examples\": [",
									"                \"pathfile4.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment5\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment5 Schema\",",
									"            \"examples\": [",
									"                \"pathfile5.json\"",
									"            ]",
									"        },",
									"        \"batchId\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The batchId Schema\",",
									"            \"examples\": [",
									"                463",
									"            ]",
									"        },",
									"        \"createdBy\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The createdBy Schema\",",
									"            \"examples\": [",
									"                \"U696\"",
									"            ]",
									"        },",
									"        \"graderId\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The graderId Schema\",",
									"            \"examples\": [",
									"                \"U696\"",
									"            ]",
									"        }",
									"    },",
									"    ",
									"}",
									";",
									"",
									"pm.test(\"Schema is valid\", () => {",
									"pm.response.to.have.jsonSchema(schema);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "e538fc8d-ca46-4949-af15-503e7eff5cde",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/assignments/batch/{{batchId}}"
					},
					"response": []
				},
				{
					"name": "Get Assignment By Assignment ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9ef03820-40ce-470e-b801-a5c28c43a2a4",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"",
									"const schema = {",
									"\"type\": \"object\",",
									"",
									"    \"title\": \"Root Schema\",",
									"    \"required\": [",
									"        \"assignmentId\",",
									"        \"assignmentName\",",
									"        \"assignmentDescription\",",
									"        \"comments\",",
									"        \"dueDate\",",
									"        \"pathAttachment1\",",
									"        \"pathAttachment2\",",
									"        \"pathAttachment3\",",
									"        \"pathAttachment4\",",
									"        \"pathAttachment5\",",
									"        \"batchId\",",
									"        \"createdBy\",",
									"        \"graderId\"",
									"    ], ",
									"    \"properties\": {",
									"        \"assignmentId\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The assignmentId Schema\",",
									"            \"examples\": [",
									"                870",
									"            ]",
									"        },",
									"        \"assignmentName\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The assignmentName Schema\",",
									"            \"examples\": [",
									"                \"Postman intro part : 4\"",
									"            ]",
									"        },",
									"        \"assignmentDescription\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The assignmentDescription Schema\",",
									"            \"examples\": [",
									"                \"API basics - phase1\"",
									"            ]",
									"        },",
									"        \"comments\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The comments Schema\",",
									"            \"examples\": [",
									"                \"Practive this assignment\"",
									"            ]",
									"        },",
									"        \"dueDate\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The dueDate Schema\",",
									"            \"examples\": [",
									"                \"2023-06-29T23:44:31.377+00:00\"",
									"            ]",
									"        },",
									"        \"pathAttachment1\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment1 Schema\",",
									"            \"examples\": [",
									"                \"pathfile1.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment2\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment2 Schema\",",
									"            \"examples\": [",
									"                \"pathfile2.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment3\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment3 Schema\",",
									"            \"examples\": [",
									"                \"pathfile3.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment4\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment4 Schema\",",
									"            \"examples\": [",
									"                \"pathfile4.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment5\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment5 Schema\",",
									"            \"examples\": [",
									"                \"pathfile5.json\"",
									"            ]",
									"        },",
									"        \"batchId\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The batchId Schema\",",
									"            \"examples\": [",
									"                463",
									"            ]",
									"        },",
									"        \"createdBy\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The createdBy Schema\",",
									"            \"examples\": [",
									"                \"U696\"",
									"            ]",
									"        },",
									"        \"graderId\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The graderId Schema\",",
									"            \"examples\": [",
									"                \"U696\"",
									"            ]",
									"        }",
									"    },",
									"    ",
									"}",
									";",
									"",
									"pm.test(\"Schema is valid\", () => {",
									"pm.response.to.have.jsonSchema(schema);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "985ba9a1-d82a-4a86-8871-743452d06a15",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/assignments/{{updateId}}"
					},
					"response": []
				},
				{
					"name": "Get assignment by non existant ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b1030b90-5407-459e-9e62-9648cf6dc3b5",
								"exec": [
									"pm.test(\"Status code is 404: Assignement does not exist\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.json().message).to.eql(\"Assignment not found with Id : \" +pm.collectionVariables.get(\"nonexistantassignmentId\") + \" \" );",
									"",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"",
									"const schema = {",
									"\"type\": \"object\",",
									"",
									"    \"title\": \"Root Schema\",",
									"    ",
									"    \"properties\": {",
									"        \"assignmentId\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The assignmentId Schema\",",
									"            \"examples\": [",
									"                870",
									"            ]",
									"        },",
									"        \"assignmentName\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The assignmentName Schema\",",
									"            \"examples\": [",
									"                \"Postman intro part : 4\"",
									"            ]",
									"        },",
									"        \"assignmentDescription\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The assignmentDescription Schema\",",
									"            \"examples\": [",
									"                \"API basics - phase1\"",
									"            ]",
									"        },",
									"        \"comments\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The comments Schema\",",
									"            \"examples\": [",
									"                \"Practive this assignment\"",
									"            ]",
									"        },",
									"        \"dueDate\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The dueDate Schema\",",
									"            \"examples\": [",
									"                \"2023-06-29T23:44:31.377+00:00\"",
									"            ]",
									"        },",
									"        \"pathAttachment1\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment1 Schema\",",
									"            \"examples\": [",
									"                \"pathfile1.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment2\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment2 Schema\",",
									"            \"examples\": [",
									"                \"pathfile2.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment3\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment3 Schema\",",
									"            \"examples\": [",
									"                \"pathfile3.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment4\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment4 Schema\",",
									"            \"examples\": [",
									"                \"pathfile4.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment5\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment5 Schema\",",
									"            \"examples\": [",
									"                \"pathfile5.json\"",
									"            ]",
									"        },",
									"        \"batchId\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The batchId Schema\",",
									"            \"examples\": [",
									"                463",
									"            ]",
									"        },",
									"        \"createdBy\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The createdBy Schema\",",
									"            \"examples\": [",
									"                \"U696\"",
									"            ]",
									"        },",
									"        \"graderId\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The graderId Schema\",",
									"            \"examples\": [",
									"                \"U696\"",
									"            ]",
									"        }",
									"    },",
									"    ",
									"}",
									";",
									"",
									"pm.test(\"Schema is valid\", () => {",
									"pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "a03d5926-1394-412c-b370-10a470877fc8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/assignments/{{nonexistantassignmentId}}"
					},
					"response": []
				},
				{
					"name": "Get assignment by invalid non integer assignment ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "22e92ac8-635e-43ea-ace7-c22f29faad2f",
								"exec": [
									"pm.test(\"Status code is 400: Invalid Assignment ID\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.json().error).to.eql(\"Bad Request\");",
									"",
									"});",
									"",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"",
									"const schema = {",
									"\"type\": \"object\",",
									"",
									"    \"title\": \"Root Schema\",",
									"    ",
									"    \"properties\": {",
									"        \"assignmentId\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The assignmentId Schema\",",
									"            \"examples\": [",
									"                870",
									"            ]",
									"        },",
									"        \"assignmentName\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The assignmentName Schema\",",
									"            \"examples\": [",
									"                \"Postman intro part : 4\"",
									"            ]",
									"        },",
									"        \"assignmentDescription\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The assignmentDescription Schema\",",
									"            \"examples\": [",
									"                \"API basics - phase1\"",
									"            ]",
									"        },",
									"        \"comments\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The comments Schema\",",
									"            \"examples\": [",
									"                \"Practive this assignment\"",
									"            ]",
									"        },",
									"        \"dueDate\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The dueDate Schema\",",
									"            \"examples\": [",
									"                \"2023-06-29T23:44:31.377+00:00\"",
									"            ]",
									"        },",
									"        \"pathAttachment1\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment1 Schema\",",
									"            \"examples\": [",
									"                \"pathfile1.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment2\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment2 Schema\",",
									"            \"examples\": [",
									"                \"pathfile2.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment3\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment3 Schema\",",
									"            \"examples\": [",
									"                \"pathfile3.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment4\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment4 Schema\",",
									"            \"examples\": [",
									"                \"pathfile4.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment5\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment5 Schema\",",
									"            \"examples\": [",
									"                \"pathfile5.json\"",
									"            ]",
									"        },",
									"        \"batchId\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The batchId Schema\",",
									"            \"examples\": [",
									"                463",
									"            ]",
									"        },",
									"        \"createdBy\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The createdBy Schema\",",
									"            \"examples\": [",
									"                \"U696\"",
									"            ]",
									"        },",
									"        \"graderId\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The graderId Schema\",",
									"            \"examples\": [",
									"                \"U696\"",
									"            ]",
									"        }",
									"    },",
									"    ",
									"}",
									";",
									"",
									"pm.test(\"Schema is valid\", () => {",
									"pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "8c86e458-9f1e-46e6-a904-21016514a1ce",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/assignments/{{invalidId}}"
					},
					"response": []
				},
				{
					"name": "Get assignment by non existant batch ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a73bd0f6-36c7-4792-867a-aeb27d87bcfa",
								"exec": [
									"pm.test(\"Status code is 404: Batch does not exist\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.sendRequest(\"https://postman-echo.com/get\", function (err, response) {",
									"    console.log(response.json());",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.json().message).to.eql(\"Batch not found with Id : \" +pm.collectionVariables.get(\"batchNA\") + \" \" );",
									"",
									"});",
									"",
									"const schema = {",
									"\"type\": \"object\",",
									"",
									"    \"title\": \"Root Schema\",",
									"   ",
									"    \"properties\": {",
									"        \"assignmentId\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The assignmentId Schema\",",
									"            \"examples\": [",
									"                870",
									"            ]",
									"        },",
									"        \"assignmentName\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The assignmentName Schema\",",
									"            \"examples\": [",
									"                \"Postman intro part : 4\"",
									"            ]",
									"        },",
									"        \"assignmentDescription\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The assignmentDescription Schema\",",
									"            \"examples\": [",
									"                \"API basics - phase1\"",
									"            ]",
									"        },",
									"        \"comments\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The comments Schema\",",
									"            \"examples\": [",
									"                \"Practive this assignment\"",
									"            ]",
									"        },",
									"        \"dueDate\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The dueDate Schema\",",
									"            \"examples\": [",
									"                \"2023-06-29T23:44:31.377+00:00\"",
									"            ]",
									"        },",
									"        \"pathAttachment1\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment1 Schema\",",
									"            \"examples\": [",
									"                \"pathfile1.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment2\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment2 Schema\",",
									"            \"examples\": [",
									"                \"pathfile2.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment3\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment3 Schema\",",
									"            \"examples\": [",
									"                \"pathfile3.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment4\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment4 Schema\",",
									"            \"examples\": [",
									"                \"pathfile4.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment5\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment5 Schema\",",
									"            \"examples\": [",
									"                \"pathfile5.json\"",
									"            ]",
									"        },",
									"        \"batchId\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The batchId Schema\",",
									"            \"examples\": [",
									"                463",
									"            ]",
									"        },",
									"        \"createdBy\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The createdBy Schema\",",
									"            \"examples\": [",
									"                \"U696\"",
									"            ]",
									"        },",
									"        \"graderId\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The graderId Schema\",",
									"            \"examples\": [",
									"                \"U696\"",
									"            ]",
									"        }",
									"    },",
									"    ",
									"}",
									";",
									"",
									"pm.test(\"Schema is valid\", () => {",
									"pm.response.to.have.jsonSchema(schema);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "babbab0b-d6e0-41b8-9137-ec608a2c24cc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/assignments/batch/{{batchNA}}"
					},
					"response": []
				},
				{
					"name": "Get assignment by invalid batch ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a873df6a-4876-42b3-8893-eb8ebd875b9d",
								"exec": [
									"pm.test(\"Status code is 400: Invalid batch ID\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.sendRequest(\"https://postman-echo.com/get\", function (err, response) {",
									"    console.log(response.json());",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.json().error).to.eql(\"Bad Request\");",
									"",
									"});",
									"",
									"const schema = {",
									"\"type\": \"object\",",
									"",
									"    \"title\": \"Root Schema\",",
									"   ",
									"    \"properties\": {",
									"        \"assignmentId\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The assignmentId Schema\",",
									"            \"examples\": [",
									"                870",
									"            ]",
									"        },",
									"        \"assignmentName\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The assignmentName Schema\",",
									"            \"examples\": [",
									"                \"Postman intro part : 4\"",
									"            ]",
									"        },",
									"        \"assignmentDescription\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The assignmentDescription Schema\",",
									"            \"examples\": [",
									"                \"API basics - phase1\"",
									"            ]",
									"        },",
									"        \"comments\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The comments Schema\",",
									"            \"examples\": [",
									"                \"Practive this assignment\"",
									"            ]",
									"        },",
									"        \"dueDate\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The dueDate Schema\",",
									"            \"examples\": [",
									"                \"2023-06-29T23:44:31.377+00:00\"",
									"            ]",
									"        },",
									"        \"pathAttachment1\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment1 Schema\",",
									"            \"examples\": [",
									"                \"pathfile1.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment2\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment2 Schema\",",
									"            \"examples\": [",
									"                \"pathfile2.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment3\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment3 Schema\",",
									"            \"examples\": [",
									"                \"pathfile3.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment4\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment4 Schema\",",
									"            \"examples\": [",
									"                \"pathfile4.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment5\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment5 Schema\",",
									"            \"examples\": [",
									"                \"pathfile5.json\"",
									"            ]",
									"        },",
									"        \"batchId\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The batchId Schema\",",
									"            \"examples\": [",
									"                463",
									"            ]",
									"        },",
									"        \"createdBy\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The createdBy Schema\",",
									"            \"examples\": [",
									"                \"U696\"",
									"            ]",
									"        },",
									"        \"graderId\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The graderId Schema\",",
									"            \"examples\": [",
									"                \"U696\"",
									"            ]",
									"        }",
									"    },",
									"    ",
									"}",
									";",
									"",
									"pm.test(\"Schema is valid\", () => {",
									"pm.response.to.have.jsonSchema(schema);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "513bcf3e-f25d-4626-8ab7-d013cbe2526b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/assignments/batch/{{batchInvalid}}"
					},
					"response": []
				},
				{
					"name": "Get assignment If batch id present and no assignment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b61bd9ed-04bf-4605-8b49-6a93cccce4b1",
								"exec": [
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.json().message).to.eql(\"Batch not found with Id : \" +pm.collectionVariables.get(\"batchwithnoassignment\") + \" \" );",
									"",
									"});",
									"pm.test(\"Status code is 404 : Batch with no assignment\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "74b6a4c0-518b-4e17-b491-bbf4c7cd730f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{BaseURL}}/assignments/batch/{{batchwithnoassignment}}"
					},
					"response": []
				},
				{
					"name": "Update existing assignment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f04cf929-b818-4a55-a858-3e325336f1a7",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"const schema = {",
									"\"type\": \"object\",",
									"",
									"",
									"",
									"",
									"   //\"$schema\": \"https://json-schema.org/draft/2019-09/schema\",",
									"   // \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    //\"default\": {},",
									"    \"title\": \"Root Schema\",",
									"    \"required\": [",
									"        \"assignmentId\",",
									"        \"assignmentName\",",
									"        \"assignmentDescription\",",
									"        \"comments\",",
									"        \"dueDate\",",
									"        \"pathAttachment1\",",
									"        \"pathAttachment2\",",
									"        \"pathAttachment3\",",
									"        \"pathAttachment4\",",
									"        \"pathAttachment5\",",
									"        \"batchId\",",
									"        \"createdBy\",",
									"        \"graderId\"",
									"    ], ",
									"    \"properties\": {",
									"        \"assignmentId\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The assignmentId Schema\",",
									"            \"examples\": [",
									"                870",
									"            ]",
									"        },",
									"        \"assignmentName\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The assignmentName Schema\",",
									"            \"examples\": [",
									"                \"Postman intro part : 4\"",
									"            ]",
									"        },",
									"        \"assignmentDescription\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The assignmentDescription Schema\",",
									"            \"examples\": [",
									"                \"API basics - phase1\"",
									"            ]",
									"        },",
									"        \"comments\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The comments Schema\",",
									"            \"examples\": [",
									"                \"Practive this assignment\"",
									"            ]",
									"        },",
									"        \"dueDate\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The dueDate Schema\",",
									"            \"examples\": [",
									"                \"2023-06-29T23:44:31.377+00:00\"",
									"            ]",
									"        },",
									"        \"pathAttachment1\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment1 Schema\",",
									"            \"examples\": [",
									"                \"pathfile1.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment2\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment2 Schema\",",
									"            \"examples\": [",
									"                \"pathfile2.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment3\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment3 Schema\",",
									"            \"examples\": [",
									"                \"pathfile3.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment4\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment4 Schema\",",
									"            \"examples\": [",
									"                \"pathfile4.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment5\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment5 Schema\",",
									"            \"examples\": [",
									"                \"pathfile5.json\"",
									"            ]",
									"        },",
									"        \"batchId\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The batchId Schema\",",
									"            \"examples\": [",
									"                463",
									"            ]",
									"        },",
									"        \"createdBy\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The createdBy Schema\",",
									"            \"examples\": [",
									"                \"U696\"",
									"            ]",
									"        },",
									"        \"graderId\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The graderId Schema\",",
									"            \"examples\": [",
									"                \"U696\"",
									"            ]",
									"        }",
									"    },",
									"    ",
									"}",
									";",
									"",
									"pm.test(\"Schema is valid\", () => {",
									"pm.response.to.have.jsonSchema(schema);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "0ac81e55-ba96-4e64-96e0-90c1857ece06",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"assignmentDescription\": \"{{assignmentDescription}}\",\n  \"assignmentId\": \"{{updateId}}\",\n  \"assignmentName\": \"{{assignmentName}}\",\n  \"batchId\": \"{{batchId}}\",\n  \"comments\": \"{{updatecomments}}\",\n  \"createdBy\": \"{{createdBy}}\",\n  \"dueDate\": \"{{dueDate}}\",\n  \"graderId\": \"{{graderId}}\",\n  \"pathAttachment1\": \"{{pathAttachment1}}\",\n  \"pathAttachment2\": \"{{pathAttachment2}}\",\n  \"pathAttachment3\": \"{{pathAttachment3}}\",\n  \"pathAttachment4\": \"{{pathAttachment4}}\",\n  \"pathAttachment5\": \"{{pathAttachment5}}\"\n }\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/assignments/{{updateId}}"
					},
					"response": []
				},
				{
					"name": "Update non existing assignment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "266b5c0e-5cfd-4d5a-800c-fb5e49c52cba",
								"exec": [
									"",
									"const schema = {",
									"\"type\": \"object\",",
									"",
									"",
									"",
									"",
									"   //\"$schema\": \"https://json-schema.org/draft/2019-09/schema\",",
									"   // \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    //\"default\": {},",
									"    \"title\": \"Root Schema\",",
									"   ",
									"    \"properties\": {",
									"        \"assignmentId\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The assignmentId Schema\",",
									"            \"examples\": [",
									"                870",
									"            ]",
									"        },",
									"        \"assignmentName\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The assignmentName Schema\",",
									"            \"examples\": [",
									"                \"Postman intro part : 4\"",
									"            ]",
									"        },",
									"        \"assignmentDescription\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The assignmentDescription Schema\",",
									"            \"examples\": [",
									"                \"API basics - phase1\"",
									"            ]",
									"        },",
									"        \"comments\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The comments Schema\",",
									"            \"examples\": [",
									"                \"Practive this assignment\"",
									"            ]",
									"        },",
									"        \"dueDate\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The dueDate Schema\",",
									"            \"examples\": [",
									"                \"2023-06-29T23:44:31.377+00:00\"",
									"            ]",
									"        },",
									"        \"pathAttachment1\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment1 Schema\",",
									"            \"examples\": [",
									"                \"pathfile1.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment2\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment2 Schema\",",
									"            \"examples\": [",
									"                \"pathfile2.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment3\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment3 Schema\",",
									"            \"examples\": [",
									"                \"pathfile3.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment4\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment4 Schema\",",
									"            \"examples\": [",
									"                \"pathfile4.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment5\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment5 Schema\",",
									"            \"examples\": [",
									"                \"pathfile5.json\"",
									"            ]",
									"        },",
									"        \"batchId\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The batchId Schema\",",
									"            \"examples\": [",
									"                463",
									"            ]",
									"        },",
									"        \"createdBy\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The createdBy Schema\",",
									"            \"examples\": [",
									"                \"U696\"",
									"            ]",
									"        },",
									"        \"graderId\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The graderId Schema\",",
									"            \"examples\": [",
									"                \"U696\"",
									"            ]",
									"        }",
									"    },",
									"    ",
									"}",
									";",
									"",
									"pm.test(\"Schema is valid\", () => {",
									"pm.response.to.have.jsonSchema(schema);",
									"});",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5c8e5ad8-3097-4a5f-8792-5edd45b913ff",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"assignmentDescription\": \"{{assignmentDescription}}\",\n  \"assignmentId\": \"{{nonexistantassignmentId}}\",\n  \"assignmentName\": \"{{assignmentName}}\",\n  \"batchId\": \"{{batchId}}\",\n  \"comments\": \"{{comments}}\",\n  \"createdBy\": \"{{createdBy}}\",\n  \"dueDate\": \"{{dueDate}}\",\n  \"graderId\": \"{{graderId}}\",\n  \"pathAttachment1\": \"{{pathAttachment1}}\",\n  \"pathAttachment2\": \"{{pathAttachment2}}\",\n  \"pathAttachment3\": \"{{pathAttachment3}}\",\n  \"pathAttachment4\": \"{{pathAttachment4}}\",\n  \"pathAttachment5\": \"{{pathAttachment5}}\"\n }\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/assignments/{{nonexistantassignmentId}}"
					},
					"response": []
				},
				{
					"name": "Update without mandatory field : Assignment Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5d8123ea-b4ec-4aae-a57b-8a8758ef43be",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"",
									"});",
									"",
									"pm.test(\"Body matches string : Assignment Name is mandatory\", function () {",
									"    pm.expect(pm.response.json().message).to.eql(\"Assignment Name is mandatory\");",
									"",
									"});",
									"",
									"const schema = {",
									"\"type\": \"object\",",
									"",
									"",
									"",
									"",
									"   //\"$schema\": \"https://json-schema.org/draft/2019-09/schema\",",
									"   // \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    //\"default\": {},",
									"    \"title\": \"Root Schema\",",
									"    ",
									"    \"properties\": {",
									"        \"assignmentId\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The assignmentId Schema\",",
									"            \"examples\": [",
									"                870",
									"            ]",
									"        },",
									"        \"assignmentName\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The assignmentName Schema\",",
									"            \"examples\": [",
									"                \"Postman intro part : 4\"",
									"            ]",
									"        },",
									"        \"assignmentDescription\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The assignmentDescription Schema\",",
									"            \"examples\": [",
									"                \"API basics - phase1\"",
									"            ]",
									"        },",
									"        \"comments\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The comments Schema\",",
									"            \"examples\": [",
									"                \"Practive this assignment\"",
									"            ]",
									"        },",
									"        \"dueDate\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The dueDate Schema\",",
									"            \"examples\": [",
									"                \"2023-06-29T23:44:31.377+00:00\"",
									"            ]",
									"        },",
									"        \"pathAttachment1\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment1 Schema\",",
									"            \"examples\": [",
									"                \"pathfile1.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment2\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment2 Schema\",",
									"            \"examples\": [",
									"                \"pathfile2.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment3\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment3 Schema\",",
									"            \"examples\": [",
									"                \"pathfile3.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment4\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment4 Schema\",",
									"            \"examples\": [",
									"                \"pathfile4.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment5\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment5 Schema\",",
									"            \"examples\": [",
									"                \"pathfile5.json\"",
									"            ]",
									"        },",
									"        \"batchId\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The batchId Schema\",",
									"            \"examples\": [",
									"                463",
									"            ]",
									"        },",
									"        \"createdBy\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The createdBy Schema\",",
									"            \"examples\": [",
									"                \"U696\"",
									"            ]",
									"        },",
									"        \"graderId\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The graderId Schema\",",
									"            \"examples\": [",
									"                \"U696\"",
									"            ]",
									"        }",
									"    },",
									"    ",
									"}",
									";",
									"",
									"pm.test(\"Schema is valid\", () => {",
									"pm.response.to.have.jsonSchema(schema);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "2f001e78-9ae4-4764-9c49-ca46f8651c47",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"assignmentDescription\": \"{{assignmentDescription}}\",\n  \"assignmentId\": \"{{updateId}}\",\n  \"assignmentName\": \"\",\n  \"batchId\": \"{{batchId}}\",\n  \"comments\": \"{{comments}}\",\n  \"createdBy\": \"{{createdBy}}\",\n  \"dueDate\": \"{{dueDate}}\",\n  \"graderId\": \"{{graderId}}\",\n  \"pathAttachment1\": \"{{pathAttachment1}}\",\n  \"pathAttachment2\": \"{{pathAttachment2}}\",\n  \"pathAttachment3\": \"{{pathAttachment3}}\",\n  \"pathAttachment4\": \"{{pathAttachment4}}\",\n  \"pathAttachment5\": \"{{pathAttachment5}}\"\n }\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/assignments/{{updateId}}"
					},
					"response": []
				},
				{
					"name": "Update without mandatory field : Created By",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "955ab688-7423-4b40-ace3-338dbac91544",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"",
									"});",
									"",
									"",
									"pm.test(\"Body matches string : Created By is mandatory\", function () {",
									"    pm.expect(pm.response.json().message).to.eql(\"Created By is mandatory\");",
									"",
									"});",
									"",
									"const schema = {",
									"\"type\": \"object\",",
									"",
									"",
									"",
									"",
									"   //\"$schema\": \"https://json-schema.org/draft/2019-09/schema\",",
									"   // \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    //\"default\": {},",
									"    \"title\": \"Root Schema\",",
									"    ",
									"    \"properties\": {",
									"        \"assignmentId\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The assignmentId Schema\",",
									"            \"examples\": [",
									"                870",
									"            ]",
									"        },",
									"        \"assignmentName\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The assignmentName Schema\",",
									"            \"examples\": [",
									"                \"Postman intro part : 4\"",
									"            ]",
									"        },",
									"        \"assignmentDescription\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The assignmentDescription Schema\",",
									"            \"examples\": [",
									"                \"API basics - phase1\"",
									"            ]",
									"        },",
									"        \"comments\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The comments Schema\",",
									"            \"examples\": [",
									"                \"Practive this assignment\"",
									"            ]",
									"        },",
									"        \"dueDate\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The dueDate Schema\",",
									"            \"examples\": [",
									"                \"2023-06-29T23:44:31.377+00:00\"",
									"            ]",
									"        },",
									"        \"pathAttachment1\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment1 Schema\",",
									"            \"examples\": [",
									"                \"pathfile1.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment2\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment2 Schema\",",
									"            \"examples\": [",
									"                \"pathfile2.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment3\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment3 Schema\",",
									"            \"examples\": [",
									"                \"pathfile3.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment4\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment4 Schema\",",
									"            \"examples\": [",
									"                \"pathfile4.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment5\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment5 Schema\",",
									"            \"examples\": [",
									"                \"pathfile5.json\"",
									"            ]",
									"        },",
									"        \"batchId\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The batchId Schema\",",
									"            \"examples\": [",
									"                463",
									"            ]",
									"        },",
									"        \"createdBy\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The createdBy Schema\",",
									"            \"examples\": [",
									"                \"U696\"",
									"            ]",
									"        },",
									"        \"graderId\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The graderId Schema\",",
									"            \"examples\": [",
									"                \"U696\"",
									"            ]",
									"        }",
									"    },",
									"    ",
									"}",
									";",
									"",
									"pm.test(\"Schema is valid\", () => {",
									"pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3228d6fa-f0cc-49bd-8b99-8e25260417b0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"assignmentDescription\": \"Updated postman Intro part-1\",\n  \"assignmentId\": \"621\",\n  \"assignmentName\": \"{{assignmentName}}\",\n  \"batchId\": \"{{batchId}}\",\n  \"comments\": \"{{comments}}\",\n  \"createdBy\": \"\",\n  \"dueDate\": \"{{dueDate}}\",\n  \"graderId\": \"{{graderId}}\",\n  \"pathAttachment1\": \"{{pathAttachment1}}\",\n  \"pathAttachment2\": \"{{pathAttachment2}}\",\n  \"pathAttachment3\": \"{{pathAttachment3}}\",\n  \"pathAttachment4\": \"{{pathAttachment4}}\",\n  \"pathAttachment5\": \"{{pathAttachment5}}\"\n }\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/assignments/{{updateId}}"
					},
					"response": []
				},
				{
					"name": "Update without mandatory field : Grader ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c5418b8d-6bd2-4795-b040-15310db67faa",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"",
									"});",
									"",
									"",
									"pm.test(\"Body matches string : Grader ID is mandatory\", function () {",
									"    pm.expect(pm.response.json().message).to.eql(\"Grader ID is mandatory\");",
									"",
									"});",
									"",
									"const schema = {",
									"\"type\": \"object\",",
									"",
									"",
									"",
									"",
									"   //\"$schema\": \"https://json-schema.org/draft/2019-09/schema\",",
									"   // \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    //\"default\": {},",
									"    \"title\": \"Root Schema\",",
									"    ",
									"    \"properties\": {",
									"        \"assignmentId\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The assignmentId Schema\",",
									"            \"examples\": [",
									"                870",
									"            ]",
									"        },",
									"        \"assignmentName\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The assignmentName Schema\",",
									"            \"examples\": [",
									"                \"Postman intro part : 4\"",
									"            ]",
									"        },",
									"        \"assignmentDescription\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The assignmentDescription Schema\",",
									"            \"examples\": [",
									"                \"API basics - phase1\"",
									"            ]",
									"        },",
									"        \"comments\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The comments Schema\",",
									"            \"examples\": [",
									"                \"Practive this assignment\"",
									"            ]",
									"        },",
									"        \"dueDate\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The dueDate Schema\",",
									"            \"examples\": [",
									"                \"2023-06-29T23:44:31.377+00:00\"",
									"            ]",
									"        },",
									"        \"pathAttachment1\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment1 Schema\",",
									"            \"examples\": [",
									"                \"pathfile1.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment2\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment2 Schema\",",
									"            \"examples\": [",
									"                \"pathfile2.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment3\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment3 Schema\",",
									"            \"examples\": [",
									"                \"pathfile3.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment4\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment4 Schema\",",
									"            \"examples\": [",
									"                \"pathfile4.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment5\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment5 Schema\",",
									"            \"examples\": [",
									"                \"pathfile5.json\"",
									"            ]",
									"        },",
									"        \"batchId\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The batchId Schema\",",
									"            \"examples\": [",
									"                463",
									"            ]",
									"        },",
									"        \"createdBy\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The createdBy Schema\",",
									"            \"examples\": [",
									"                \"U696\"",
									"            ]",
									"        },",
									"        \"graderId\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The graderId Schema\",",
									"            \"examples\": [",
									"                \"U696\"",
									"            ]",
									"        }",
									"    },",
									"    ",
									"}",
									";",
									"",
									"pm.test(\"Schema is valid\", () => {",
									"pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "2e289de8-68f7-4615-9500-c12d76b19176",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"assignmentDescription\": \"Updated postman Intro part-1\",\n  \"assignmentId\": \"621\",\n  \"assignmentName\": \"{{assignmentName}}\",\n  \"batchId\": \"{{batchId}}\",\n  \"comments\": \"{{comments}}\",\n  \"createdBy\": \"{{createdBy}}\",\n  \"dueDate\": \"{{dueDate}}\",\n  \"graderId\": \"\",\n  \"pathAttachment1\": \"{{pathAttachment1}}\",\n  \"pathAttachment2\": \"{{pathAttachment2}}\",\n  \"pathAttachment3\": \"{{pathAttachment3}}\",\n  \"pathAttachment4\": \"{{pathAttachment4}}\",\n  \"pathAttachment5\": \"{{pathAttachment5}}\"\n }\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/assignments/{{updateId}}"
					},
					"response": []
				},
				{
					"name": "Update without mandatory field : Batch ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f454d874-0093-48f3-b1a3-cb7581bd520b",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"",
									"});",
									"",
									"",
									"pm.test(\"Body matches string : Batch ID is mandatory\", function () {",
									"    pm.expect(pm.response.json().message).to.eql(\"Batch ID is mandatory\");",
									"",
									"});",
									"",
									"const schema = {",
									"\"type\": \"object\",",
									"",
									"",
									"",
									"",
									"   //\"$schema\": \"https://json-schema.org/draft/2019-09/schema\",",
									"   // \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    //\"default\": {},",
									"    \"title\": \"Root Schema\",",
									"    ",
									"    \"properties\": {",
									"        \"assignmentId\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The assignmentId Schema\",",
									"            \"examples\": [",
									"                870",
									"            ]",
									"        },",
									"        \"assignmentName\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The assignmentName Schema\",",
									"            \"examples\": [",
									"                \"Postman intro part : 4\"",
									"            ]",
									"        },",
									"        \"assignmentDescription\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The assignmentDescription Schema\",",
									"            \"examples\": [",
									"                \"API basics - phase1\"",
									"            ]",
									"        },",
									"        \"comments\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The comments Schema\",",
									"            \"examples\": [",
									"                \"Practive this assignment\"",
									"            ]",
									"        },",
									"        \"dueDate\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The dueDate Schema\",",
									"            \"examples\": [",
									"                \"2023-06-29T23:44:31.377+00:00\"",
									"            ]",
									"        },",
									"        \"pathAttachment1\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment1 Schema\",",
									"            \"examples\": [",
									"                \"pathfile1.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment2\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment2 Schema\",",
									"            \"examples\": [",
									"                \"pathfile2.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment3\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment3 Schema\",",
									"            \"examples\": [",
									"                \"pathfile3.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment4\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment4 Schema\",",
									"            \"examples\": [",
									"                \"pathfile4.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment5\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment5 Schema\",",
									"            \"examples\": [",
									"                \"pathfile5.json\"",
									"            ]",
									"        },",
									"        \"batchId\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The batchId Schema\",",
									"            \"examples\": [",
									"                463",
									"            ]",
									"        },",
									"        \"createdBy\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The createdBy Schema\",",
									"            \"examples\": [",
									"                \"U696\"",
									"            ]",
									"        },",
									"        \"graderId\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The graderId Schema\",",
									"            \"examples\": [",
									"                \"U696\"",
									"            ]",
									"        }",
									"    },",
									"    ",
									"}",
									";",
									"",
									"pm.test(\"Schema is valid\", () => {",
									"pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "2f594c50-064b-462c-b023-1222b04ba38d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"assignmentDescription\": \"Updated postman Intro part-1\",\n  \"assignmentId\": \"621\",\n  \"assignmentName\": \"{{assignmentName}}\",\n  \"batchId\": \"\",\n  \"comments\": \"{{comments}}\",\n  \"createdBy\": \"{{createdBy}}\",\n  \"dueDate\": \"{{dueDate}}\",\n  \"graderId\": \"{{graderId}}\",\n  \"pathAttachment1\": \"{{pathAttachment1}}\",\n  \"pathAttachment2\": \"{{pathAttachment2}}\",\n  \"pathAttachment3\": \"{{pathAttachment3}}\",\n  \"pathAttachment4\": \"{{pathAttachment4}}\",\n  \"pathAttachment5\": \"{{pathAttachment5}}\"\n }\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/assignments/{{updateId}}"
					},
					"response": []
				},
				{
					"name": "Update without mandatory field : Due Date",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "91a7ca02-332c-487a-b100-22af62576ab3",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"",
									"});",
									"",
									"",
									"pm.test(\"Body matches string : Due Date is mandatory\", function () {",
									"    pm.expect(pm.response.json().message).to.eql(\"Due Date is mandatory\");",
									"",
									"});",
									"",
									"const schema = {",
									"\"type\": \"object\",",
									"",
									"",
									"",
									"",
									"   //\"$schema\": \"https://json-schema.org/draft/2019-09/schema\",",
									"   // \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    //\"default\": {},",
									"    \"title\": \"Root Schema\",",
									"    ",
									"    \"properties\": {",
									"        \"assignmentId\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The assignmentId Schema\",",
									"            \"examples\": [",
									"                870",
									"            ]",
									"        },",
									"        \"assignmentName\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The assignmentName Schema\",",
									"            \"examples\": [",
									"                \"Postman intro part : 4\"",
									"            ]",
									"        },",
									"        \"assignmentDescription\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The assignmentDescription Schema\",",
									"            \"examples\": [",
									"                \"API basics - phase1\"",
									"            ]",
									"        },",
									"        \"comments\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The comments Schema\",",
									"            \"examples\": [",
									"                \"Practive this assignment\"",
									"            ]",
									"        },",
									"        \"dueDate\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The dueDate Schema\",",
									"            \"examples\": [",
									"                \"2023-06-29T23:44:31.377+00:00\"",
									"            ]",
									"        },",
									"        \"pathAttachment1\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment1 Schema\",",
									"            \"examples\": [",
									"                \"pathfile1.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment2\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment2 Schema\",",
									"            \"examples\": [",
									"                \"pathfile2.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment3\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment3 Schema\",",
									"            \"examples\": [",
									"                \"pathfile3.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment4\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment4 Schema\",",
									"            \"examples\": [",
									"                \"pathfile4.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment5\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment5 Schema\",",
									"            \"examples\": [",
									"                \"pathfile5.json\"",
									"            ]",
									"        },",
									"        \"batchId\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The batchId Schema\",",
									"            \"examples\": [",
									"                463",
									"            ]",
									"        },",
									"        \"createdBy\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The createdBy Schema\",",
									"            \"examples\": [",
									"                \"U696\"",
									"            ]",
									"        },",
									"        \"graderId\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The graderId Schema\",",
									"            \"examples\": [",
									"                \"U696\"",
									"            ]",
									"        }",
									"    },",
									"    ",
									"}",
									";",
									"",
									"pm.test(\"Schema is valid\", () => {",
									"pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "dd4be329-ba87-4741-9240-b18de757507d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"assignmentDescription\": \"Updated postman Intro part-1\",\n  \"assignmentId\": \"{{updateId}}\",\n  \"assignmentName\": \"{{assignmentName}}\",\n  \"batchId\": \"{{batchId}}\",\n  \"comments\": \"{{comments}}\",\n  \"createdBy\": \"{{createdBy}}\",\n  \"dueDate\": \"\",\n  \"graderId\": \"{{graderId}}\",\n  \"pathAttachment1\": \"{{pathAttachment1}}\",\n  \"pathAttachment2\": \"{{pathAttachment2}}\",\n  \"pathAttachment3\": \"{{pathAttachment3}}\",\n  \"pathAttachment4\": \"{{pathAttachment4}}\",\n  \"pathAttachment5\": \"{{pathAttachment5}}\"\n }\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/assignments/{{updateId}}"
					},
					"response": []
				},
				{
					"name": "Update without mandatory field : Assignment Description",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b6e1214f-0a86-453f-be21-495288edbd25",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"",
									"});",
									"",
									"",
									"pm.test(\"Body matches string : Assignment Description is mandatory\", function () {",
									"    pm.expect(pm.response.json().message).to.eql(\"Assignment Description is mandatory\");",
									"",
									"});",
									"",
									"const schema = {",
									"\"type\": \"object\",",
									"",
									"",
									"",
									"",
									"   //\"$schema\": \"https://json-schema.org/draft/2019-09/schema\",",
									"   // \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    //\"default\": {},",
									"    \"title\": \"Root Schema\",",
									"    ",
									"    \"properties\": {",
									"        \"assignmentId\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The assignmentId Schema\",",
									"            \"examples\": [",
									"                870",
									"            ]",
									"        },",
									"        \"assignmentName\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The assignmentName Schema\",",
									"            \"examples\": [",
									"                \"Postman intro part : 4\"",
									"            ]",
									"        },",
									"        \"assignmentDescription\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The assignmentDescription Schema\",",
									"            \"examples\": [",
									"                \"API basics - phase1\"",
									"            ]",
									"        },",
									"        \"comments\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The comments Schema\",",
									"            \"examples\": [",
									"                \"Practive this assignment\"",
									"            ]",
									"        },",
									"        \"dueDate\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The dueDate Schema\",",
									"            \"examples\": [",
									"                \"2023-06-29T23:44:31.377+00:00\"",
									"            ]",
									"        },",
									"        \"pathAttachment1\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment1 Schema\",",
									"            \"examples\": [",
									"                \"pathfile1.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment2\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment2 Schema\",",
									"            \"examples\": [",
									"                \"pathfile2.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment3\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment3 Schema\",",
									"            \"examples\": [",
									"                \"pathfile3.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment4\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment4 Schema\",",
									"            \"examples\": [",
									"                \"pathfile4.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment5\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment5 Schema\",",
									"            \"examples\": [",
									"                \"pathfile5.json\"",
									"            ]",
									"        },",
									"        \"batchId\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The batchId Schema\",",
									"            \"examples\": [",
									"                463",
									"            ]",
									"        },",
									"        \"createdBy\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The createdBy Schema\",",
									"            \"examples\": [",
									"                \"U696\"",
									"            ]",
									"        },",
									"        \"graderId\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The graderId Schema\",",
									"            \"examples\": [",
									"                \"U696\"",
									"            ]",
									"        }",
									"    },",
									"    ",
									"}",
									";",
									"",
									"pm.test(\"Schema is valid\", () => {",
									"pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "efea0e69-5669-404f-a3fa-96da3d0b6a11",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"assignmentDescription\": \"\",\n  \"assignmentId\": \"{{updateId}}\",\n  \"assignmentName\": \"{{assignmentName}}\",\n  \"batchId\": \"{{batchId}}\",\n  \"comments\": \"{{comments}}\",\n  \"createdBy\": \"{{createdBy}}\",\n  \"dueDate\": \"{{dueDate}}\",\n  \"graderId\": \"{{graderId}}\",\n  \"pathAttachment1\": \"{{pathAttachment1}}\",\n  \"pathAttachment2\": \"{{pathAttachment2}}\",\n  \"pathAttachment3\": \"{{pathAttachment3}}\",\n  \"pathAttachment4\": \"{{pathAttachment4}}\",\n  \"pathAttachment5\": \"{{pathAttachment5}}\"\n }\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/assignments/{{updateId}}"
					},
					"response": []
				},
				{
					"name": "Update with invalid GraderID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0a558a88-d388-4472-9042-d4b425e51ed6",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"",
									"});",
									"",
									"",
									"pm.test(\"Body matches string : User not found with ID\", function () {",
									"    pm.expect(pm.response.json().message).to.eql(\"User not found with ID : \"+pm.collectionVariables.get(\"invalidGrader\")+\" \");",
									"",
									"});",
									"",
									"const schema = {",
									"\"type\": \"object\",",
									"",
									"",
									"",
									"",
									"   //\"$schema\": \"https://json-schema.org/draft/2019-09/schema\",",
									"   // \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    //\"default\": {},",
									"    \"title\": \"Root Schema\",",
									"    ",
									"    \"properties\": {",
									"        \"assignmentId\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The assignmentId Schema\",",
									"            \"examples\": [",
									"                870",
									"            ]",
									"        },",
									"        \"assignmentName\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The assignmentName Schema\",",
									"            \"examples\": [",
									"                \"Postman intro part : 4\"",
									"            ]",
									"        },",
									"        \"assignmentDescription\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The assignmentDescription Schema\",",
									"            \"examples\": [",
									"                \"API basics - phase1\"",
									"            ]",
									"        },",
									"        \"comments\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The comments Schema\",",
									"            \"examples\": [",
									"                \"Practive this assignment\"",
									"            ]",
									"        },",
									"        \"dueDate\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The dueDate Schema\",",
									"            \"examples\": [",
									"                \"2023-06-29T23:44:31.377+00:00\"",
									"            ]",
									"        },",
									"        \"pathAttachment1\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment1 Schema\",",
									"            \"examples\": [",
									"                \"pathfile1.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment2\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment2 Schema\",",
									"            \"examples\": [",
									"                \"pathfile2.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment3\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment3 Schema\",",
									"            \"examples\": [",
									"                \"pathfile3.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment4\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment4 Schema\",",
									"            \"examples\": [",
									"                \"pathfile4.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment5\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment5 Schema\",",
									"            \"examples\": [",
									"                \"pathfile5.json\"",
									"            ]",
									"        },",
									"        \"batchId\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The batchId Schema\",",
									"            \"examples\": [",
									"                463",
									"            ]",
									"        },",
									"        \"createdBy\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The createdBy Schema\",",
									"            \"examples\": [",
									"                \"U696\"",
									"            ]",
									"        },",
									"        \"graderId\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The graderId Schema\",",
									"            \"examples\": [",
									"                \"U696\"",
									"            ]",
									"        }",
									"    },",
									"    ",
									"}",
									";",
									"",
									"pm.test(\"Schema is valid\", () => {",
									"pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "7879333d-3037-406d-8c74-16f895cc92b7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"assignmentDescription\": \"{{assignmentDescription}}\",\n  \"assignmentId\": \"{{updateId}}\",\n  \"assignmentName\": \"{{assignmentName}}\",\n  \"batchId\": \"{{batchId}}\",\n  \"comments\": \"{{comments}}\",\n  \"createdBy\": \"{{createdBy}}\",\n  \"dueDate\": \"{{dueDate}}\",\n  \"graderId\": \"{{invalidGrader}}\",\n  \"pathAttachment1\": \"{{pathAttachment1}}\",\n  \"pathAttachment2\": \"{{pathAttachment2}}\",\n  \"pathAttachment3\": \"{{pathAttachment3}}\",\n  \"pathAttachment4\": \"{{pathAttachment4}}\",\n  \"pathAttachment5\": \"{{pathAttachment5}}\"\n }\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/assignments/{{updateId}}"
					},
					"response": []
				},
				{
					"name": "Update with invalid date format",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0dba2e02-f8c7-4561-b260-395b9bbdb81f",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"",
									"});",
									"",
									"",
									"pm.test(\"Body matches string : Bad Request\", function () {",
									"    pm.expect(pm.response.json().error).to.eql(\"Bad Request\");",
									"",
									"});",
									"",
									"const schema = {",
									"\"type\": \"object\",",
									"",
									"",
									"",
									"",
									"   //\"$schema\": \"https://json-schema.org/draft/2019-09/schema\",",
									"   // \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    //\"default\": {},",
									"    \"title\": \"Root Schema\",",
									"    ",
									"    \"properties\": {",
									"        \"assignmentId\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The assignmentId Schema\",",
									"            \"examples\": [",
									"                870",
									"            ]",
									"        },",
									"        \"assignmentName\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The assignmentName Schema\",",
									"            \"examples\": [",
									"                \"Postman intro part : 4\"",
									"            ]",
									"        },",
									"        \"assignmentDescription\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The assignmentDescription Schema\",",
									"            \"examples\": [",
									"                \"API basics - phase1\"",
									"            ]",
									"        },",
									"        \"comments\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The comments Schema\",",
									"            \"examples\": [",
									"                \"Practive this assignment\"",
									"            ]",
									"        },",
									"        \"dueDate\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The dueDate Schema\",",
									"            \"examples\": [",
									"                \"2023-06-29T23:44:31.377+00:00\"",
									"            ]",
									"        },",
									"        \"pathAttachment1\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment1 Schema\",",
									"            \"examples\": [",
									"                \"pathfile1.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment2\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment2 Schema\",",
									"            \"examples\": [",
									"                \"pathfile2.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment3\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment3 Schema\",",
									"            \"examples\": [",
									"                \"pathfile3.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment4\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment4 Schema\",",
									"            \"examples\": [",
									"                \"pathfile4.json\"",
									"            ]",
									"        },",
									"        \"pathAttachment5\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The pathAttachment5 Schema\",",
									"            \"examples\": [",
									"                \"pathfile5.json\"",
									"            ]",
									"        },",
									"        \"batchId\": {",
									"            \"type\": \"integer\",",
									"            \"default\": 0,",
									"            \"title\": \"The batchId Schema\",",
									"            \"examples\": [",
									"                463",
									"            ]",
									"        },",
									"        \"createdBy\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The createdBy Schema\",",
									"            \"examples\": [",
									"                \"U696\"",
									"            ]",
									"        },",
									"        \"graderId\": {",
									"            \"type\": \"string\",",
									"            \"default\": \"\",",
									"            \"title\": \"The graderId Schema\",",
									"            \"examples\": [",
									"                \"U696\"",
									"            ]",
									"        }",
									"    },",
									"    ",
									"}",
									";",
									"",
									"pm.test(\"Schema is valid\", () => {",
									"pm.response.to.have.jsonSchema(schema);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "4f5fc631-e222-4679-adb1-34d7a4e91645",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"assignmentDescription\": \"{{assignmentDescription}}\",\n  \"assignmentId\": \"{{updateId}}\",\n  \"assignmentName\": \"{{assignmentName}}\",\n  \"batchId\": \"{{batchId}}\",\n  \"comments\": \"{{comments}}\",\n  \"createdBy\": \"{{createdBy}}\",\n  \"dueDate\": \"{{invalidDate}}\",\n  \"graderId\": \"{{graderId}}\",\n  \"pathAttachment1\": \"{{pathAttachment1}}\",\n  \"pathAttachment2\": \"{{pathAttachment2}}\",\n  \"pathAttachment3\": \"{{pathAttachment3}}\",\n  \"pathAttachment4\": \"{{pathAttachment4}}\",\n  \"pathAttachment5\": \"{{pathAttachment5}}\"\n }\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/assignments/{{updateId}}"
					},
					"response": []
				},
				{
					"name": "Delete Assignment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6c18043b-b384-4f5e-91c3-0e6cbd85ddeb",
								"exec": [
									"",
									"",
									"",
									"pm.test(\"Status code is 200 : Assignment deleted successfully\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.json().message).to.eql(\"Assignment deleted successfully\");",
									"",
									"});",
									"//UnSet environment variable",
									"pm.environment.unset( \"assignmentId\");",
									"pm.environment.unset( \"assignmentname\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "158b980b-f1c1-4bbf-afd9-2448ed208867",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURL}}/assignments/{{assignmentId}}"
					},
					"response": []
				},
				{
					"name": "Delete same Assignment",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "edbe7a7a-d64a-4551-bf4f-530683fda8e8",
								"exec": [
									"pm.test(\"Status code is 405 : Deleted assignment can not be deleted again \", function () {",
									"    pm.response.to.have.status(405);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "bbae2ab6-711b-4b86-9bd7-27e961b2339d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURL}}/assignments/{{assignmentId}}"
					},
					"response": []
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8727fe68-dcde-4ccb-b5e6-d51f91178771",
								"exec": [
									"",
									"",
									"pm.test(\"Status code is 200 : User deleted successfully\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"/*",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.json().error).to.eql(\"Assignment deleted successfully\");",
									"",
									"}); */",
									"",
									"//UnSet environment variable",
									"pm.environment.unset(\"userId\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "0cb73497-1870-435f-b1bc-ffe36f5f6182",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURL}}/users/users/{{userId}}"
					},
					"response": []
				},
				{
					"name": "Delete Inactive user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c8b1e556-3771-4709-8aca-ff56d883091c",
								"exec": [
									"",
									"",
									"",
									"pm.test(\"Status code is 200 : User deleted successfully\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"/*",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.json().error).to.eql(\"Assignment deleted successfully\");",
									"",
									"}); */",
									"",
									"//UnSet environment variable",
									"pm.environment.unset(\"InactiveuserId\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "786473d7-eb33-4163-80a2-6275cf29dcd4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURL}}/users/users/{{InactiveuserId}}"
					},
					"response": []
				},
				{
					"name": "Delete batch",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4faa5f36-1298-42b4-8e24-33f0e7ce942c",
								"exec": [
									"",
									"pm.test(\"Status code is 200 : Batch deleted successfully\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//UnSet environment variable",
									"pm.environment.unset( \"batchId\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "66f209a7-60ba-4000-b9f5-d9a4391de208",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURL}}/batches/{{batchId}}"
					},
					"response": []
				},
				{
					"name": "Delete program",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bcf611eb-1aed-4651-ae80-bf4391403828",
								"exec": [
									"",
									"pm.test(\"Status code is 200 : Program deleted successfully\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//UnSet environment variable",
									"pm.environment.unset(\"programId\");",
									"pm.environment.unset(\"programnumber\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3e89626c-0a7f-480d-9414-fde832de841c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{BaseURL}}/deletebyprogid/{{programId}}"
					},
					"response": []
				}
			],
			"id": "2c57ce1a-7ecb-4285-837c-1d18f53d7a1a",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "d08aaa3b-49b0-4040-af49-32b9667930de",
						"type": "text/javascript",
						"exec": [
							"//Phone number",
							"const phoneNumber = Math.floor((Math.random()*1000000000 +1));",
							"pm.globals.set(\"phoneNumber\", phoneNumber);",
							"",
							"",
							"//Unique assignment name generator",
							"const assignmentname = Math.floor((Math.random()*100 +1));",
							"pm.globals.set(\"assignmentname\", assignmentname);",
							"",
							"",
							"//Random numer",
							"const programnumber = Math.floor((Math.random()*100 +1));",
							"pm.globals.set(\"programnumber\", programnumber);"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "5fe19825-19b7-4a17-84ba-b0d844f98b25",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "c34c6056-0637-451e-8c69-f304e38e4e51",
				"type": "text/javascript",
				"exec": [
					"// Load data from file",
					"if(typeof pm.variables.get('requestData') !== 'object')",
					"{",
					"    pm.variables.set('requestData', pm.iterationData.toObject());",
					"}",
					"",
					"const requestData = pm.variables.get('requestData');",
					"",
					"if(typeof requestData != 'object' || Object.keys(requestData).length === 0)",
					"{",
					"    console.log('No external data provided/data set is empty');",
					"    return;",
					"}",
					"",
					"// Find current request",
					"const currentRequest = requestData.requests.filter(({name}) => name === pm.info.requestName)[0];",
					"",
					"// If no data",
					"if(!currentRequest)",
					"{",
					"    console.log('Request ${pm.info.requestName} has no data.');",
					"}",
					"",
					"if(currentRequest)",
					"{",
					"    // Expose variables",
					"    const variables = currentRequest.data.shift();",
					"",
					"    Object.entries(variables).forEach(([key, value]) => {",
					"        pm.variables.set(key, value);",
					"    });",
					"",
					"    pm.variables.set('requestData', requestData);",
					"",
					"    // Declare next request",
					"    if(currentRequest.data.length > 0)",
					"    {",
					"        postman.setNextRequest(pm.info.requestName);",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "9c39d336-03a6-40ea-83b1-1eefc34d287e",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "8d79cc72-3874-4741-974b-3123f9e672c5",
			"key": "BaseURL",
			"value": "https://lms-api-hackathon-june2023-930a8b0f895d.herokuapp.com/lms"
		},
		{
			"id": "741e6fea-39f2-43fd-88ea-4486d6ca7252",
			"key": "batchDescription",
			"value": "Postman",
			"type": "string"
		},
		{
			"id": "c78808a0-5993-40aa-93c8-66f77a030ec6",
			"key": "batchNoOfClasses",
			"value": "2",
			"type": "string"
		},
		{
			"id": "e421bb61-ab56-4076-a0e1-e149ad38f630",
			"key": "batchStatus",
			"value": "Active",
			"type": "string"
		},
		{
			"id": "7b109e2e-d2d6-4a3c-9321-1e3a944bf006",
			"key": "programDescriptionbatch",
			"value": "Postman",
			"type": "string"
		},
		{
			"id": "d4188bc4-e8d8-48fe-8fdf-7e0e385309f3",
			"key": "programStatusbatch",
			"value": "Active",
			"type": "string"
		},
		{
			"id": "b80844ab-56d8-41bf-9556-0314f55229f4",
			"key": "UpdtbatchNoOfClasses",
			"value": "4",
			"type": "string"
		},
		{
			"id": "f87f9012-0302-4d94-b221-efb7c7d4ce25",
			"key": "UpdtbatchStatus",
			"value": "InActive",
			"type": "string"
		},
		{
			"id": "0c301a4b-358b-410f-b895-5234755b0f8e",
			"key": "UpdtbatchDescription",
			"value": "Rest Assure",
			"type": "string"
		},
		{
			"id": "5dfca53c-5a31-4411-863e-96e6f34f16f4",
			"key": "userComments",
			"value": "creating new user",
			"type": "string"
		},
		{
			"id": "5d4933c7-5eb1-4a79-90aa-8a912784656b",
			"key": "userEduPg",
			"value": "MS",
			"type": "string"
		},
		{
			"id": "730217e3-884e-41d2-8dd9-163aebbf1463",
			"key": "userEduUg",
			"value": "BE",
			"type": "string"
		},
		{
			"id": "1904cac7-f0e5-44c3-8967-d588fde259b8",
			"key": "userFirstName",
			"value": "APICollectors_004",
			"type": "string"
		},
		{
			"id": "9d13dc02-4f57-4293-b153-5fb054f8078f",
			"key": "adminUserFirstName",
			"value": "APICollectors_001",
			"type": "string"
		},
		{
			"id": "e81a8737-4f14-4f8e-aaf4-7f3588d1801a",
			"key": "staffUserFirstName",
			"value": "APICollectors_002",
			"type": "string"
		},
		{
			"id": "51a91df1-3dac-4a8a-bac5-9e6fc382aed7",
			"key": "studentUserFirstName",
			"value": "APICollectors_003",
			"type": "string"
		},
		{
			"id": "77f183da-66c4-4f4f-8049-0cb08dfd62d5",
			"key": "userLastName",
			"value": "User",
			"type": "string"
		},
		{
			"id": "335fe796-2682-4105-9b95-c9c3755c5aa7",
			"key": "userLinkedinUrl",
			"value": "www.linkedin.com/Test1234",
			"type": "string"
		},
		{
			"id": "6ec8fbf9-bda5-48b6-8d4b-cee1675d8593",
			"key": "userLocation",
			"value": "India",
			"type": "string"
		},
		{
			"id": "0217a88d-8dcf-4389-934d-cb159b3f9e9d",
			"key": "userMiddleName",
			"value": "",
			"type": "string"
		},
		{
			"id": "80302549-70f0-4853-bf3b-3560cbe7539d",
			"key": "roleId",
			"value": "R02",
			"type": "string"
		},
		{
			"id": "c81b6422-1b5a-48e1-8dc1-ca250e55e66a",
			"key": "userRoleStatus",
			"value": "Active",
			"type": "string"
		},
		{
			"id": "695a61f5-a31b-4e64-89c3-484575452e8e",
			"key": "userTimeZone",
			"value": "IST",
			"type": "string"
		},
		{
			"id": "0f00fd4a-57ed-406b-a394-b8f3f6ace71f",
			"key": "userVisaStatus",
			"value": "NA",
			"type": "string"
		},
		{
			"id": "ada1dee9-c2c3-40d0-8874-28c61a8910da",
			"key": "invalidUserRoleId",
			"value": "invalidRoleID",
			"type": "string"
		},
		{
			"id": "dd59a624-e1a4-49f9-b955-edcdaa9907f2",
			"key": "integerUserRoleId",
			"value": "46546",
			"type": "string"
		},
		{
			"id": "529136fb-88f1-49fb-b78a-f48aefced3cc",
			"key": "invalidUserVisaStatus",
			"value": "invalidVisaStatus",
			"type": "string"
		},
		{
			"id": "9dded778-c9b1-4f48-8865-484ec9d482d8",
			"key": "invalidUserTimeZone",
			"value": "invalidTimeZone",
			"type": "string"
		},
		{
			"id": "42975c64-6b93-4287-8596-95c22b1c9fb6",
			"key": "stringUserPhoneNumber",
			"value": "strPhone",
			"type": "string"
		},
		{
			"id": "f8f0923c-2ed9-46a1-8b90-7dbe9421a510",
			"key": "blankRoleId",
			"value": "",
			"type": "string"
		},
		{
			"id": "bf286205-6d19-43a3-90f8-a7c320226fd5",
			"key": "blankUserRoleStatus",
			"value": "",
			"type": "string"
		},
		{
			"id": "fcd5516a-e320-4f8b-812a-1f35b8ec1863",
			"key": "blankUserFirstName",
			"value": "",
			"type": "string"
		},
		{
			"id": "9db27d99-2c2c-4fa8-93fd-073bf5e1f3f7",
			"key": "blankUserLastName",
			"value": "",
			"type": "string"
		},
		{
			"id": "8e898aa7-0f8b-4e4d-9fb7-4a2b2bc49474",
			"key": "blankUserTimeZone",
			"value": "",
			"type": "string"
		},
		{
			"id": "d7b76f1f-15ec-4042-979c-f562fefed0d9",
			"key": "blankUserVisaStatus",
			"value": "",
			"type": "string"
		},
		{
			"id": "adadc19a-ae4e-43c3-b239-360984894be4",
			"key": "programDescription",
			"value": "DA",
			"type": "string"
		},
		{
			"id": "c446dcc7-caaf-49c7-b6e0-17c31c92a107",
			"key": "programStatus",
			"value": "Active",
			"type": "string"
		},
		{
			"id": "5786f252-d04a-4595-9915-3985b5bf435d",
			"key": "programDescription2",
			"value": "SDET",
			"type": "string"
		},
		{
			"id": "05a32164-24d8-4825-aeeb-1ef80e489416",
			"key": "UpdtprogramDescription",
			"value": "Postman",
			"type": "string"
		},
		{
			"id": "833dbce1-a2b3-42e6-b6bd-d1bafbe7d847",
			"key": "programStatus2",
			"value": "Active",
			"type": "string"
		},
		{
			"id": "7fb18b59-b314-49fa-981a-6d3c090607f3",
			"key": "UpdtprogramDescription2",
			"value": "Rest Assure",
			"type": "string"
		},
		{
			"id": "f224d72e-c7c2-4c4c-9382-127cc0e525a8",
			"key": "userNameCounter",
			"value": "0",
			"type": "string"
		},
		{
			"id": "136c8794-ce06-448a-ab1a-773e849a61d7",
			"key": "messageUpdateStatusSuccess",
			"value": "UserStatus Updated for User: ",
			"type": "string"
		},
		{
			"id": "4eff343f-654e-48ed-bf92-763744a3f2e8",
			"key": "message1UpdateStatusRoleid",
			"value": "RoleID: ",
			"type": "string"
		},
		{
			"id": "b4a83ed9-929c-403f-883a-ee4f94d3bbd8",
			"key": "message2UpdateStatusRoleid",
			"value": " not found for the UserID: ",
			"type": "string"
		},
		{
			"id": "e38d4aa9-1d20-4223-9300-0c25859fbd65",
			"key": "messageMandatoryRoleStatus",
			"value": "Role Status is Mandatory",
			"type": "string"
		},
		{
			"id": "a4b9384b-4aba-4013-bdd9-3834310f1fec",
			"key": "messageMandatoryRoleid",
			"value": "Role Id is mandatory",
			"type": "string"
		},
		{
			"id": "d1b01c13-e574-47d2-b249-5b4d78ee481b",
			"key": "messageUpdateRoleStatusInvalidroleid",
			"value": "RoleID: invalidRoleID not found for the UserID: ",
			"type": "string"
		},
		{
			"id": "533b4f03-acef-4af2-b95c-96d90fea7d97",
			"key": "messageMissingPhone",
			"value": "Phone Number is required",
			"type": "string"
		},
		{
			"id": "a103de54-800b-4e23-9ee0-51558490c6ea",
			"key": "messageStringPhone",
			"value": "Phone Number cannot be string",
			"type": "string"
		},
		{
			"id": "67a89b2b-582b-4c6d-8722-3bbbfca95e93",
			"key": "messageInvalidRoleid",
			"value": "Invalid Role id",
			"type": "string"
		},
		{
			"id": "e8851e2d-6fc1-49c4-9a30-2f5bd2bcfcab",
			"key": "messageMandatoryFirstName",
			"value": "User First Name cannot be null or empty",
			"type": "string"
		},
		{
			"id": "72cb093a-e088-4505-bb48-6ea27bd028af",
			"key": "messageMandatoryLastName",
			"value": "User Last Name cannot be null or empty",
			"type": "string"
		},
		{
			"id": "a4f5311f-bd6b-484d-8cdb-65752bc12f50",
			"key": "messageMandatoryTimeZone",
			"value": "Failed to create user, as 'TimeZone' is invalid !! ",
			"type": "string"
		},
		{
			"id": "9fe4368b-9ddb-4d0a-84e5-ff6d88de3879",
			"key": "messageMandatoryVisaStatus",
			"value": "Failed to create user, as 'Visa Status' is invalid !! ",
			"type": "string"
		},
		{
			"id": "6432c788-9a49-4839-a3a5-0844d4f3bbba",
			"key": "integerRoleStatus",
			"value": "1234",
			"type": "string"
		},
		{
			"id": "cc5d8a6f-6078-4108-9e3b-a893159a3e2f",
			"key": "messagePutMandatoryFirstName",
			"value": "User First Name is mandatory",
			"type": "string"
		},
		{
			"id": "c1c93c0f-2520-48f6-8974-209b88928c26",
			"key": "messagePutMandatoryLastName",
			"value": "User Last Name is mandatory",
			"type": "string"
		},
		{
			"id": "15ba74c9-7440-4de7-981e-d85bfd6bf6af",
			"key": "messagePutMandatoryTimeZone",
			"value": "Failed to update user, as 'TimeZone' is invalid !! ",
			"type": "string"
		},
		{
			"id": "c43dff53-b9fc-4bc2-a2c9-5260943d021a",
			"key": "messagePutMandatoryVisaStatus",
			"value": "Failed to update user, as 'Visa Status' is invalid !! ",
			"type": "string"
		},
		{
			"id": "bd0261e9-117e-4539-827b-f9dfb0a5ee19",
			"key": "assignmentDescription",
			"value": "API basics -phase1",
			"type": "string"
		},
		{
			"id": "81609a86-db97-4cd3-af26-eebdd7807f7e",
			"key": "assignmentName",
			"value": "Jun23-APICollectors_SDET_97 : Postman intro part : {{assignmentname}}",
			"type": "string"
		},
		{
			"id": "8cabc0e8-ea32-4685-ba59-2e47497c4375",
			"key": "comments",
			"value": "Practice this assignment",
			"type": "string"
		},
		{
			"id": "f24122d4-65c7-423e-b45f-89d4bf70cc49",
			"key": "createdBy",
			"value": "U696",
			"type": "string"
		},
		{
			"id": "cee965bb-0e12-4a87-a6b5-40f4e3ed9182",
			"key": "dueDate",
			"value": "2023-06-29T23:44:31.377+00:00",
			"type": "string"
		},
		{
			"id": "63ae8d7f-b854-4869-bbc6-886ac0db9ca5",
			"key": "pathAttachment1",
			"value": "pathfile1.json",
			"type": "string"
		},
		{
			"id": "26c07265-cb52-40ba-8ed2-283060880fbb",
			"key": "pathAttachment2",
			"value": "pathfile2.json",
			"type": "string"
		},
		{
			"id": "93f2aca0-5980-4cc8-a8ab-1cb0684aef6c",
			"key": "pathAttachment3",
			"value": "pathfile3.json",
			"type": "string"
		},
		{
			"id": "b00375ed-bdf6-47b4-8597-1a3da36c72c2",
			"key": "pathAttachment4",
			"value": "pathfile4.json",
			"type": "string"
		},
		{
			"id": "94c3e622-8001-4d32-906d-47208dc7e753",
			"key": "pathAttachment5",
			"value": "pathfile3.json",
			"type": "string"
		},
		{
			"id": "7f4b74fb-6f0c-480b-90c2-8910117d83b7",
			"key": "graderId",
			"value": "U696",
			"type": "string"
		},
		{
			"id": "26dcadb5-236b-485b-a47a-4ecbcf0f53e3",
			"key": "nonexistantassignmentId",
			"value": "99999",
			"type": "string"
		},
		{
			"id": "18a435d1-63e6-4ff6-b706-d86f9d65d6d8",
			"key": "invalidId",
			"value": "abc",
			"type": "string"
		},
		{
			"id": "04c1c8c9-a56b-42c2-8939-74243ba9ca27",
			"key": "batchNA",
			"value": "99999",
			"type": "string"
		},
		{
			"id": "770d134a-7448-42a9-9cb3-28629f461149",
			"key": "batchInvalid",
			"value": "xyz",
			"type": "string"
		},
		{
			"id": "02ee188b-6174-4d5e-9a9c-d538f1feaa07",
			"key": "batchwithnoassignment",
			"value": "1343",
			"type": "string"
		},
		{
			"id": "86bdb321-5472-4c1e-8ae8-cd1ea91583ce",
			"key": "duplicateAssignment",
			"value": "621",
			"type": "string"
		},
		{
			"id": "7378d039-3130-4865-abe3-ec55276fb581",
			"key": "updateId",
			"value": "621",
			"type": "string"
		},
		{
			"id": "104d0023-07cf-4d15-b3e2-a7e6134c6753",
			"key": "invalidGrader",
			"value": "99999",
			"type": "string"
		},
		{
			"id": "00a5e07d-09c0-492f-91fa-95611f34070d",
			"key": "invalidDate",
			"value": "20-06-29T23:44:31.377+00:00",
			"type": "string"
		},
		{
			"id": "43815565-3eb5-4d0d-9598-c0aef1bcd28c",
			"key": "programDescriptionAssign",
			"value": "Phase1 : part{{programnumber}}",
			"type": "string"
		},
		{
			"id": "b9e5f4b3-17a6-412b-9dda-1314202b8853",
			"key": "programNameAssign",
			"value": "Jun23-APICollectors_SDET_97 : {{programnumber}}",
			"type": "string"
		},
		{
			"id": "e21ee818-9a78-4550-a30c-ae4d7266a2c3",
			"key": "programStatusAssign",
			"value": "Active",
			"type": "string"
		},
		{
			"id": "eed8b08f-e3d7-47d5-a9c7-85325ff140f6",
			"key": "batchDescription",
			"value": "API-collectors-Batch2",
			"type": "string"
		},
		{
			"id": "8fbff57c-320c-470d-8e28-932d5f4c4b32",
			"key": "batchName",
			"value": "P1B1",
			"type": "string"
		},
		{
			"id": "bda9d470-58dc-4201-b982-ed415e329065",
			"key": "batchNoOfClasses",
			"value": "3",
			"type": "string"
		},
		{
			"id": "d88a1373-286a-4bad-aa46-fd31ec77d3bd",
			"key": "updatecomments",
			"value": "This comment is updated",
			"type": "string"
		},
		{
			"id": "df0e3c7d-2ccd-491a-a592-4e4d985acaa4",
			"key": "duplicateAsnname",
			"value": "Postman intro part : 70",
			"type": "string"
		},
		{
			"id": "653339d9-1d0d-4576-a9af-61f880ca373e",
			"key": "batchStatus",
			"value": "On",
			"type": "string"
		},
		{
			"id": "ba28c81e-ab08-48bc-89c8-d76e45f9ac0b",
			"key": "userComments",
			"value": "test",
			"type": "string"
		},
		{
			"id": "9ca59d57-7b7c-4711-b97f-d815bde9a855",
			"key": "userEduPg",
			"value": "B.E.",
			"type": "string"
		},
		{
			"id": "b19b73f9-8184-4308-9c83-5511395bb438",
			"key": "userEduUg",
			"value": "Diploma",
			"type": "string"
		},
		{
			"id": "81b31724-ed91-4188-89d6-e6fb47876964",
			"key": "userFirstName",
			"value": "Numpy",
			"type": "string"
		},
		{
			"id": "6f13317b-ac75-4e3d-8b2b-c1b43d7d2706",
			"key": "userLastName",
			"value": "Ninja",
			"type": "string"
		},
		{
			"id": "bd7975c4-11cf-4475-a4ee-b42e45f6c8a4",
			"key": "userLinkedinUrl",
			"value": "testapi.com",
			"type": "string"
		},
		{
			"id": "50c0b26e-8ea3-4967-babe-25957c83f84f",
			"key": "userLocation",
			"value": "USA",
			"type": "string"
		},
		{
			"id": "2167083e-66fe-45c9-90ad-cedeaed651db",
			"key": "userMiddleName",
			"value": "A",
			"type": "string"
		},
		{
			"id": "ecbee415-faf6-4397-9b79-5fb9c1f33cb5",
			"key": "roleId",
			"value": "R01",
			"type": "string"
		},
		{
			"id": "f88311c0-ec6e-45ed-9324-60cc16b02726",
			"key": "userRoleStatus",
			"value": "Active",
			"type": "string"
		},
		{
			"id": "998f5c46-79b0-4209-8fae-a259aeb56fde",
			"key": "userTimeZone",
			"value": "PST",
			"type": "string"
		},
		{
			"id": "d7db809d-07b3-4677-83fb-bc371d06dc80",
			"key": "userVisaStatus",
			"value": "H4-EAD",
			"type": "string"
		},
		{
			"id": "f0bfd87e-80c1-425e-80a1-231caaf62a8d",
			"key": "userRoleStatusInactive",
			"value": "Inactive",
			"type": "string"
		}
	]
}